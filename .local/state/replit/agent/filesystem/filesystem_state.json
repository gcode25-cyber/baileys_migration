{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# WhatsApp Bulk Messaging Tool - Waziper Clone\n\n## Overview\nThis project is a comprehensive WhatsApp bulk messaging platform inspired by Waziper, built with React and Node.js. Its primary purpose is to enable businesses to efficiently send bulk WhatsApp messages, manage contacts, create targeted campaigns, and automate customer interactions. The platform maintains integration with WhatsApp Web, aiming to provide a robust solution for marketing and communication needs, with a vision for a SaaS model featuring tiered pricing, free trials, and scalable message-volume-based plans.\n\n## User Preferences\n- Modern TypeScript/React development stack\n- Database-first approach with Drizzle ORM\n- Component-based UI with shadcn/ui\n- Clean, maintainable code structure\n- Successfully migrated from Replit Agent to standard Replit environment (August 2025)\n- Migration completed with full functionality restored: PostgreSQL database provisioned, all dependencies installed, application running on port 5000, WhatsApp client initialization fixed, logout/QR code generation functionality working properly (August 12, 2025)\n- Migration completed: Database provisioned, dependencies installed, application running on port 5000, missing tsx package installed, database tables created via migration, missing POST /api/chats/:contactId/clear route added for chat clearing functionality, WebSocket broadcast issues for chat deletion and clearing resolved (August 2025)\n- Enhanced scrolling functionality for chats and groups modules with sticky headers and scrollable content areas (August 2025)\n- Bulk messaging module improvements completed (January 2025): Replaced \"Clone & Reuse\" with \"Restart\" functionality, fixed progress counters to use totalTargets, added scrollable interface, removed redundant bulk-messaging.tsx file, removed Refresh button and added Delete campaign functionality, removed Active Campaigns quick view component\n- Advanced scheduling features implemented (August 2025): Enhanced bulk messaging with time post scheduling, random message intervals (1-3600 seconds), schedule time controls (daytime/nighttime/odd/even hours), dynamic hour management with add/remove functionality, major performance optimization by replacing heavy dropdowns with fast number inputs\n- Admin-only messaging restrictions removed from bulk messaging (August 2025): Removed unnecessary restrictions from bulk messaging interface since it sends individual private messages to group participants, not group messages, so admin-only group settings don't apply\n- Real-time chat management features rolled back (August 2025): Restored original chat deletion and clearing behavior due to UI stability issues, chat operations now use standard WhatsApp Web.js API methods with fallback to archiving for deletion when needed\n- Media message display fixed (August 2025): Enhanced media detection logic to properly identify and display images, videos, documents, and other media content in chat interface with proper URLs for media rendering\n- Contact validation and deduplication implemented (August 2025): Added comprehensive phone number validation and deduplication logic to filter out invalid numbers and remove duplicate contacts from the contacts list\n- WhatsApp Web-like UI implemented (August 2025): Replaced resync button with logout button, moved QR code below account name, added WhatsApp/RCS buttons below QR, removed /account route, automated background data refresh every 60 seconds for seamless real-time experience matching official WhatsApp Web\n- Logout and QR generation completely fixed (August 12, 2025): Resolved Chrome singleton lock conflicts, implemented comprehensive logout process with phone disconnection via UI-based logout, enhanced Chrome process cleanup with lock file removal, complete session data clearing, and reliable fresh QR code generation after logout. Migration from Replit Agent to standard environment now fully complete with all WhatsApp functionality working perfectly.\n- Account panel UI improvements completed (August 12, 2025): Removed logout button from sidebar account panel, made account panel clickable to display QR code/account information in main content area, enhanced WhatsApp/RCS buttons in sidebar with proper spacing and click functionality for module switching, improved visual feedback with border highlighting for selected features\n- WhatsApp and RCS button functionality unified (August 12, 2025): Fixed inconsistent button behavior by removing duplicate implementations and creating single, unified WhatsApp/RCS buttons that work seamlessly in both connected and disconnected states with consistent styling, hover effects, and click functionality. Migration from Replit Agent to standard Replit environment completed successfully with all UI interactions working properly.\n- Contact group phone validation enhanced (August 12, 2025): Added comprehensive country code dropdown with 25 countries and intelligent phone number validation. System validates phone numbers according to country-specific digit requirements (e.g., India: 10 digits, France: 9 digits, Vietnam: 9-10 digits). Includes visual country flags, automatic phone number formatting with selected country code, and dynamic placeholder text showing expected digit count.\n\n## System Architecture\nThe application is built with a React frontend (TypeScript, Vite, TailwindCSS, shadcn/ui) and a Node.js backend (Express, TypeScript). Data is managed using PostgreSQL with Drizzle ORM. WhatsApp integration is handled via the `whatsapp-web.js` library, supporting QR code authentication, session persistence, and multiple WhatsApp accounts. Authentication is session-based. File storage utilizes the local file system with Multer.\n\n**Core Features:**\n- **Authentication:** User registration, login, and session management.\n- **WhatsApp Integration:** QR code authentication, session persistence, multiple account support, real-time connection status.\n- **Messaging:** Single and bulk message sending, media message support (images, videos, documents, audio), message scheduling, and advanced campaign management with options for target types (contact groups, local contacts, WhatsApp groups), scheduling (immediate, timed, odd/even hours), randomized delivery intervals, and real-time status monitoring.\n- **Campaign Management:** Real-time progress tracking with visual progress bars using accurate totalTargets field, sent/remaining/failed message counts, campaign restart functionality for completed campaigns, auto-refresh for active campaigns, WebSocket integration for live updates, comprehensive campaign status management, and scrollable interface for better navigation.\n- **Contact Management:** Contact group creation, CSV import, validation, deduplication, group member management, and bulk contact-to-group assignment. Contacts are sorted alphabetically by name.\n- **Data Export/Import:** Export chats, contacts, and group participants as CSV; import contacts from CSV.\n- **Dashboard & Analytics:** System status monitoring, campaign tracking, message statistics, real-time notifications.\n- **UI/UX:** Component-based UI with shadcn/ui for a consistent and modern design. Illustrations are used for login/signup and landing pages, and lazy loading is implemented for images. Chat interface mirrors WhatsApp Web features.\n- **Technical Implementations:** WebSocket connections for real-time updates, comprehensive logout functionality, robust media handling and display, secure session configuration, server-side sorting for consistent data display, real-time campaign progress broadcasting, and admin-only messaging restrictions with dynamic form controls and user permission validation.\n\n**Database Schema:**\n- **Users:** Authentication, profiles, email verification, WhatsApp number association.\n- **WhatsApp Sessions:** Session persistence, login time tracking, session data storage.\n- **WhatsApp Accounts:** Multiple account management, active status tracking, session data persistence.\n- **Contact Groups:** Organized contact management, validation statistics, group-based messaging.\n- **Contact Group Members:** Individual contact entries, validation, duplicate detection.\n- **Bulk Message Campaigns:** Campaign creation, scheduling, delivery tracking.\n\n## External Dependencies\n- **Database:** PostgreSQL with persistent session storage\n- **WhatsApp Integration:** `whatsapp-web.js` library\n- **File Storage:** Multer (local file system)\n- **Frontend Framework:** React\n- **Backend Framework:** Node.js (Express)\n- **ORM:** Drizzle ORM\n- **Session Management:** connect-pg-simple for database-backed session persistence\n- **UI Components:** shadcn/ui\n- **Styling:** TailwindCSS\n- **Module Bundler/Dev Server:** Vite","size_bytes":8736},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      fontFamily: {\n        sans: ['Inter', 'system-ui', 'sans-serif'],\n        inter: ['Inter', 'system-ui', 'sans-serif'],\n        poppins: ['Poppins', 'system-ui', 'sans-serif'],\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2786},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/content-1754049372425.md":{"content":"Messaging So Smooth, You'll Forget You’re Typing!\n\nWe help you schedule posts like a boss, analyze like a genius, and optimize like you’ve got a degree in viral content!\n\n[Learn more](https://sender.hubwale.in/#features)\n\n![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/push_arrow_down.png)\n\nNo credit card required\n\n[Get start now](https://sender.hubwale.in/login)\n\n![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/sp-hero.png)![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/hero-icon/sp-hero-male.png)![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/hero-icon/sp-hero-icon1.png)![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/hero-icon/sp-hero-icon1.png)![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/hero-icon/sp-hero-icon5.png)![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/hero-icon/sp-hero-icon5.png)![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/hero-icon/sp-hero-icon6.png)![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/hero-icon/sp-hero-icon4.png)![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/hero-icon/sp-hero-icon8.png)![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/hero-icon/sp-hero-icon3.png)![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/hero-icon/sp-hero-icon2.png)![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/hero-icon/sp-hero-icon9.png)\n\n8\n2\n8\n8\n\n9\n8\n9\n\n0\n\nTotal Social Media Campaigns completed per month\n\n8\n2\n,8\n5\n8\n7\n\n8\n8\n9\n\n0\n\nPosts are scheduled without interruption every week\n\n8\n2\n8\n5\n,8\n7\n8\n8\n\n9\n8\n9\n\n0\n\nClients choose platform to build brand through social media\n\nFeature\n\nManage social media accounts through one centralized dashboard\n\nIt is the best solution for Individuals, Small or Large Companies, Software Companies, and Digital Marketers.\n\nComposer\n\nCreate and publish social media content across multiple platforms. Individuals, Small or Large Companies, Software Companies\n\nSchedule Posts\n\nSelect your date, time or whenever you want to publish on each your social accounts. A few clicks to complete and enjoy.\n\nBulk upload multiple posts\n\nSave time and effort by scheduling more than a hundred social media posts using our Bulk Uploader in three easy steps.\n\nClear and Concise Dashboard\n\nIt helps you to quickly and easily understand all your post reports on social media networks\n\n![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/bg-o1.png)![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/sp-features/f1.png)![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/sp-features/f2.png)![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/sp-features/f3.png)![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/sp-features/f4.png)\n\nTrusted by 20,000+ clients\n\n![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/stars.png)\n\n- ![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/brands/brand-1.png)\n- ![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/brands/brand-2.png)\n- ![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/brands/brand-3.png)\n- ![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/brands/brand-4.png)\n- ![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/brands/brand-5.png)\n- ![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/brands/brand-6.png)\n- ![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/brands/brand-7.png)\n- ![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/brands/brand-8.png)\n- ![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/brands/brand-9.png)\n- ![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/brands/brand-10.png)\n- ![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/brands/brand-1.png)\n- ![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/brands/brand-2.png)\n- ![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/brands/brand-3.png)\n- ![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/brands/brand-4.png)\n- ![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/brands/brand-5.png)\n- ![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/brands/brand-6.png)\n- ![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/brands/brand-7.png)\n- ![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/brands/brand-8.png)\n- ![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/brands/brand-9.png)\n- ![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/brands/brand-10.png)\n\nMaximizing Business Growth with Social Media\n\nCreating attractive content can be a challenging and time-consuming task. Let us ease the burden by helping you effectively distribute your ideas across all relevant social media channels, ensuring that your content reaches a broader audience.\n\n![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/circle-1.png)![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/circle-2.png)![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/circle-3.png)![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/circle-4.png)\n\n![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/sp-b3.png)\n\n![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/sp-b4.png)\n\n![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/sp-b1.png)\n\n![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/sp-b2.png)\n\n![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/sp-b3.png)\n\n![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/sp-b4.png)\n\n![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/sp-b1.png)\n\n![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/sp-b2.png)\n\n‹›\n\nBoosting Brand Visibility Through Strategic Social Media Engagement\n\nMaintaining a consistent and strategically planned social media presence significantly enhances your brand’s visibility and recognition, ensuring that your message reaches a wider audience and reinforces your brand identity over time.\n\nEnhancing Website Traffic Through Effective Social Media Strategies\n\nEffective social media management plays a crucial role in driving increased traffic to your website by strategically placing well-designed links, executing targeted promotions, and creating engaging content.\n\nAchieving High ROI with Social Media vs. Traditional Advertising\n\nSocial media offers a highly cost-effective method for reaching a broad and diverse audience compared to traditional advertising channels, providing businesses with a significantly higher return on investment.\n\nStrengthening Customer Relationships with Consistent Social Media Presence\n\nBy regularly engaging with your audience, sharing valuable content, and consistently representing your brand’s voice, you build trust leading to long-term customer loyalty and a deeper connection with your audience.\n\nBrand Awareness\n\nWebsite Traffic\n\nCost Efficiency\n\nCustomer Relationships\n\nStreamline Social Media and Unlock Advanced Features\n\nBeyond managing your social media accounts from a single location, we offer a suite of advanced features designed to take your social media efforts further.\n\nSave and edit drafts\n\nKeep your content ideas safe by saving drafts from the Composer whenever you want, enabling you to perfect and publish them later.\n\nSave & Get Caption\n\nSave your content with Captions Feature that you plan to use repetitively in your social media posts that you regularly use are particularly good to be saved as captions. Sometimes, you can organize your hashtags, and links and then get them when you compose a new post.\n\nAccount Manager\n\nSave time on social media by connecting your accounts to the platform. With us, you can manage activity for all your linked accounts in one place, removing the need to sign in to each social network individually.\n\nFile Manager\n\nWith the file manager, you can create and view the files/folders hierarchy and access a range of functions like uploading, moving, as well as deleting files, and folders.\n\nWatermark\n\nA watermark is a visible overlay that is applied to an image that is placed in a prominent location on the media file, such as the corner or centre.\n\nPhoto Editor\n\nProduce attention-grabbing, remarkable, shareable, and stunning images with Image Editor which is integrated with our platform. You can edit and enhance your photo before publishing it to your selected network.\n\nSocial Media Post Types\n\nThere are several types of posts that can be created on our platform such as Images, Videos, Links and text and we are constantly evolving, and new features and post types are added regularly.\n\nURL Shortener\n\nShortening URLs becomes essential when you have to share long and complicated web links on social media platforms that have character limitations.\n\nSpintax\n\nIt’s an ideal tool to create massive content. It could minimize the risk of account lockouts if social media platforms tag the messages as spam.\n\nTake advantage of our free trial offer today, with no commitments or credit card required.\n\n[Get started for Free](https://sender.hubwale.in/login)\n\nWhat our clients say\n\nWe receive high praise from our clients for our outstanding results, approachable service. Take a look at what some of them have to say.\n\n![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/stars.png)\n\nOne Hour a Week, Zero Social Media Worries\n\nIt’s fantastic to spend just an hour each week adding to my library and then not have to worry about social media for the rest of the week.\n\n![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/ratings/4.jpg)\n\nAva Rose\n\nSocial Media Analyst\n\n![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/stars.png)\n\nDoubling Growth and 68% More Productivity\n\nThanks to this tool, our company has grown doubled. Without it, we would have been floundering, but now we’re accomplishing 68% more work with the same team.\n\n![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/ratings/5.jpg)\n\nNoah James\n\nContent Manager\n\n![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/stars.png)\n\nEasy Scheduling and Metrics with the team\n\nThis incredible platform has unified our team. It offers easy post scheduling, smooth team collaboration, and centralized metric sharing with all stakeholders, all in one convenient place.\n\n![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/ratings/6.jpg)\n\nOlivia Claire\n\nMarketing Automation Specialist\n\n![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/stars.png)\n\nComplete Tool for Social Media Agencies\n\nIt's amazing to have found a tool that integrates all the necessary resources for a Social Media Marketing agency into one comprehensive and accessible platform.\n\n![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/ratings/1.jpg)\n\nJohn Carter\n\nDigital Marketing Manager\n\n![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/stars.png)\n\nEfficient Marketing Management and Expanded Presence\n\nWith this platform, I can efficiently manage my marketing efforts, reduce the time spent on tasks, and expand my presence in multiple locations effortlessly.\n\n![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/ratings/2.jpg)\n\nEmma Grace\n\nSEO Specialist\n\n![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/stars.png)\n\nComprehensive Analytics and Impressive Post Management\n\nI really appreciate this platform for its comprehensive analytics, ability to schedule in bulk, versatile scheduling options, and impressive post appearance.\n\n![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/ratings/3.jpg)\n\nLiam Scott\n\nSocial Media Strategist\n\n![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/stars.png)\n\nOne Hour a Week, Zero Social Media Worries\n\nIt’s fantastic to spend just an hour each week adding to my library and then not have to worry about social media for the rest of the week.\n\n![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/ratings/4.jpg)\n\nAva Rose\n\nSocial Media Analyst\n\n![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/stars.png)\n\nDoubling Growth and 68% More Productivity\n\nThanks to this tool, our company has grown doubled. Without it, we would have been floundering, but now we’re accomplishing 68% more work with the same team.\n\n![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/ratings/5.jpg)\n\nNoah James\n\nContent Manager\n\n![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/stars.png)\n\nEasy Scheduling and Metrics with the team\n\nThis incredible platform has unified our team. It offers easy post scheduling, smooth team collaboration, and centralized metric sharing with all stakeholders, all in one convenient place.\n\n![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/ratings/6.jpg)\n\nOlivia Claire\n\nMarketing Automation Specialist\n\n![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/stars.png)\n\nComplete Tool for Social Media Agencies\n\nIt's amazing to have found a tool that integrates all the necessary resources for a Social Media Marketing agency into one comprehensive and accessible platform.\n\n![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/ratings/1.jpg)\n\nJohn Carter\n\nDigital Marketing Manager\n\n![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/stars.png)\n\nEfficient Marketing Management and Expanded Presence\n\nWith this platform, I can efficiently manage my marketing efforts, reduce the time spent on tasks, and expand my presence in multiple locations effortlessly.\n\n![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/ratings/2.jpg)\n\nEmma Grace\n\nSEO Specialist\n\n![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/stars.png)\n\nComprehensive Analytics and Impressive Post Management\n\nI really appreciate this platform for its comprehensive analytics, ability to schedule in bulk, versatile scheduling options, and impressive post appearance.\n\n![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/ratings/3.jpg)\n\nLiam Scott\n\nSocial Media Strategist\n\n‹›\n\n- ![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/ratings/1.jpg)\n- ![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/ratings/2.jpg)\n- ![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/ratings/3.jpg)\n- ![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/ratings/4.jpg)\n- ![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/ratings/5.jpg)\n- ![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/ratings/6.jpg)\n\n![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/shape-1.png)![](https://sender.hubwale.in/inc/themes/frontend/Stackblue/Assets/images/shape-2.png)\n\nJoin 5,000 happy customers like you who trust us to help them manage their social media calendars.\n\nYou can get started in mere minutes.\n\n[Sign up for Free](https://sender.hubwale.in/login)","size_bytes":15914},"server/db.ts":{"content":"import { drizzle } from 'drizzle-orm/node-postgres';\nimport pkg from 'pg';\nimport * as schema from \"@shared/schema\";\n\nconst { Pool } = pkg;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":404},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { WebSocketServer } from 'ws';\n\n// Global error handlers to prevent WhatsApp ProtocolError crashes\nprocess.on('uncaughtException', (error) => {\n  if (error.message.includes('Protocol error') || \n      error.message.includes('Target closed')) {\n    console.log('🔧 Handled ProtocolError (expected during WhatsApp logout):', error.message);\n    // Don't exit the process for protocol errors\n    return;\n  }\n  console.error('❌ Uncaught Exception:', error);\n  process.exit(1);\n});\n\nprocess.on('unhandledRejection', (reason: any, promise) => {\n  if (reason?.message?.includes('Protocol error') || \n      reason?.message?.includes('Target closed')) {\n    console.log('🔧 Handled ProtocolError rejection (expected during WhatsApp logout):', reason.message);\n    // Don't exit the process for protocol errors\n    return;\n  }\n  console.error('❌ Unhandled Rejection at:', promise, 'reason:', reason);\n  process.exit(1);\n});\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Configure PostgreSQL session store\nconst pgStore = connectPg(session);\n\n// Session configuration with PostgreSQL persistence\napp.use(session({\n  store: new pgStore({\n    conString: process.env.DATABASE_URL,\n    tableName: 'sessions',\n    createTableIfMissing: false, // We'll create it with Drizzle\n    ttl: 30 * 24 * 60 * 60, // 30 days default TTL\n  }),\n  secret: process.env.SESSION_SECRET || 'fallback-secret-key-change-in-production',\n  resave: false,\n  saveUninitialized: false,\n  rolling: true, // Reset expiration on activity\n  cookie: {\n    secure: process.env.NODE_ENV === 'production',\n    httpOnly: true,\n    maxAge: 30 * 24 * 60 * 60 * 1000, // 30 days default\n    sameSite: 'lax'\n  }\n}));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  // Setup WebSocket server for real-time updates\n  const wss = new WebSocketServer({ server, path: '/ws' });\n  \n  wss.on('connection', (ws) => {\n    console.log('📡 WebSocket client connected');\n    \n    ws.on('message', (message) => {\n      try {\n        const data = JSON.parse(message.toString());\n        console.log('📨 Received WebSocket message:', data.type);\n      } catch (e) {\n        console.log('Invalid WebSocket message format');\n      }\n    });\n    \n    ws.on('close', () => {\n      console.log('📡 WebSocket client disconnected');\n    });\n    \n    ws.on('error', (error) => {\n      console.error('📡 WebSocket error:', error);\n    });\n  });\n\n  // Make WebSocket server available globally for WhatsApp service\n  (global as any).wss = wss;\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":4548},"server/routes.ts":{"content":"import type { Express, Request } from \"express\";\nimport { createServer, type Server } from \"http\";\n\n// Extend Express Request interface to include session\ndeclare module \"express-session\" {\n  interface SessionData {\n    userId?: string;\n    username?: string;\n    userEmail?: string;\n    userFullName?: string;\n  }\n}\nimport { whatsappService } from \"./services/whatsapp\";\nimport { sessionInfoSchema, qrResponseSchema, sendMessageSchema, sendMediaMessageSchema, loginSchema, signupSchema, createCampaignSchema } from \"@shared/schema\";\nimport type { WhatsappAccount, ContactGroup } from \"@shared/schema\";\nimport { storage } from \"./storage\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport QRCode from \"qrcode\";\nimport qrImage from 'qr-image';\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Authentication routes\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const validatedData = loginSchema.parse(req.body);\n      const user = await storage.authenticateUser(validatedData.usernameOrEmail, validatedData.password);\n      \n      if (!user) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n\n      // Set up persistent session for user\n      req.session.userId = user.id;\n      req.session.username = user.username;\n      req.session.userEmail = user.email;\n      req.session.userFullName = user.fullName;\n      \n      // Always remember sessions for 30 days (persistent across restarts)\n      req.session.cookie.maxAge = 30 * 24 * 60 * 60 * 1000; // 30 days\n      \n      // Force session save to ensure persistence\n      req.session.save((err) => {\n        if (err) {\n          console.error('Session save error:', err);\n        } else {\n          console.log('✅ Session saved to database for persistent authentication');\n        }\n      });\n      \n      res.json({ \n        message: \"Login successful\", \n        user: { \n          id: user.id, \n          username: user.username, \n          email: user.email,\n          fullName: user.fullName \n        } \n      });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(400).json({ error: \"Invalid request data\" });\n    }\n  });\n\n  app.post(\"/api/auth/signup\", async (req, res) => {\n    try {\n      const validatedData = signupSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUserByUsername = await storage.getUserByUsername(validatedData.username);\n      if (existingUserByUsername) {\n        return res.status(400).json({ error: \"Username already exists\" });\n      }\n\n      const existingUserByEmail = await storage.getUserByEmail(validatedData.email);\n      if (existingUserByEmail) {\n        return res.status(400).json({ error: \"Email already exists\" });\n      }\n\n      // Create user - map signup data to user insert schema\n      const { confirmPassword, acceptTerms, phone, ...baseUserData } = validatedData;\n      const userInsertData = {\n        ...baseUserData,\n        phone: phone,\n        whatsappNumber: phone, // Use the phone number as WhatsApp number too\n      };\n      const user = await storage.createUser(userInsertData);\n      \n      res.status(201).json({ \n        message: \"Account created successfully\", \n        user: { \n          id: user.id, \n          username: user.username, \n          email: user.email,\n          fullName: user.fullName \n        } \n      });\n    } catch (error) {\n      console.error(\"Signup error:\", error);\n      res.status(400).json({ error: \"Invalid request data\" });\n    }\n  });\n\n  // User authentication session info\n  app.get(\"/api/auth/session\", (req, res) => {\n    if (req.session.userId) {\n      res.json({ \n        authenticated: true, \n        user: { \n          id: req.session.userId, \n          username: req.session.username,\n          email: req.session.userEmail,\n          fullName: req.session.userFullName\n        } \n      });\n    } else {\n      res.status(401).json({ error: \"No active session\" });\n    }\n  });\n\n  // User authentication logout\n  app.post(\"/api/auth/logout\", (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        console.error(\"Session destroy error:\", err);\n        return res.status(500).json({ error: \"Failed to logout\" });\n      }\n      res.clearCookie('connect.sid');\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n  \n  // Configure multer for file uploads\n  const upload = multer({\n    dest: 'uploads/',\n    limits: {\n      fileSize: 16 * 1024 * 1024, // 16MB limit\n    },\n    fileFilter: (req, file, cb) => {\n      const allowedTypes = [\n        'image/jpeg', 'image/png', 'image/gif', 'image/webp',\n        'video/mp4', 'video/3gpp', 'video/quicktime',\n        'audio/aac', 'audio/mp3', 'audio/mpeg', 'audio/amr', 'audio/ogg',\n        'application/pdf', 'text/plain',\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n      ];\n      \n      if (allowedTypes.includes(file.mimetype)) {\n        cb(null, true);\n      } else {\n        cb(new Error('Unsupported file type'));\n      }\n    }\n  });\n\n  // Separate CSV upload configuration (in memory)\n  const csvUpload = multer({\n    storage: multer.memoryStorage(),\n    limits: {\n      fileSize: 5 * 1024 * 1024, // 5MB limit for CSV\n    },\n    fileFilter: (req, file, cb) => {\n      if (file.mimetype === 'text/csv' || file.mimetype === 'application/csv' || file.originalname.endsWith('.csv')) {\n        cb(null, true);\n      } else {\n        cb(new Error('Only CSV files are allowed'));\n      }\n    }\n  });\n\n  // Ensure uploads directory exists\n  if (!fs.existsSync('uploads')) {\n    fs.mkdirSync('uploads');\n  }\n  \n  // Media download endpoint\n  app.get('/api/media/:messageId', async (req, res) => {\n    try {\n      const messageId = req.params.messageId;\n      \n      if (!whatsappService.isClientReady()) {\n        return res.status(503).json({ error: 'WhatsApp client not ready' });\n      }\n\n      // Get the message and download its media\n      const mediaData = await whatsappService.downloadMessageMedia(messageId);\n      \n      if (!mediaData) {\n        return res.status(404).json({ error: 'Media not found' });\n      }\n\n      // Set appropriate headers\n      res.setHeader('Content-Type', mediaData.mimetype || 'application/octet-stream');\n      res.setHeader('Content-Disposition', `inline; filename=\"${mediaData.filename || 'media'}\"`);\n      \n      // Send the media data\n      res.send(mediaData.data);\n      \n    } catch (error: any) {\n      console.error('Failed to download media:', error.message);\n      res.status(500).json({ error: 'Failed to download media' });\n    }\n  });\n  \n  // Get QR code for WhatsApp authentication\n  app.get(\"/api/get-qr\", async (req, res) => {\n    try {\n      const qr = await whatsappService.getQRCode();\n      if (qr) {\n        // Check if QR is already a base64 data URL\n        if (qr.startsWith('data:image/')) {\n          console.log(\"✅ QR already in base64 format, returning directly\");\n          res.json({ qr: qr });\n        } else {\n          console.log(\"🔍 QR String length:\", qr.length);\n          console.log(\"🔍 QR String preview:\", qr.substring(0, 100) + '...');\n          \n          try {\n            // Use qr-image library directly for better large data handling\n            const qrBuffer = qrImage.imageSync(qr, { \n              type: 'png', \n              size: 20, // Larger size for better scanning\n              margin: 2,\n              ec_level: 'L' // Low error correction for maximum data capacity\n            });\n            const qrBase64 = `data:image/png;base64,${qrBuffer.toString('base64')}`;\n            console.log(\"✅ QR Code generated successfully with qr-image\");\n            res.json({ qr: qrBase64 });\n          } catch (qrError) {\n            console.error(\"QR generation failed:\", qrError);\n            // Return the raw QR string so client can handle it\n            res.json({ qr: null, rawQr: qr });\n          }\n        }\n      } else {\n        res.json({ qr: null });\n      }\n    } catch (error) {\n      console.error(\"QR code error:\", error);\n      res.status(500).json({ error: \"Failed to generate QR code\" });\n    }\n  });\n\n  // Get current session information\n  app.get(\"/api/session-info\", async (req, res) => {\n    try {\n      // Check if client is actually ready (connected)\n      const isReady = await whatsappService.isClientReady();\n      const sessionInfo = await whatsappService.getSessionInfo();\n      \n      // Only return session info if both exist AND client is ready\n      if (sessionInfo && isReady) {\n        res.json({\n          ...sessionInfo,\n          connected: true\n        });\n      } else {\n        res.status(404).json({ error: \"No active session\", connected: false });\n      }\n    } catch (error) {\n      console.error(\"Session info error:\", error);\n      res.status(500).json({ error: \"Failed to get session info\", connected: false });\n    }\n  });\n\n\n\n  // Force refresh QR code\n  app.post(\"/api/refresh-qr\", async (req, res) => {\n    try {\n      await whatsappService.forceRefreshQR();\n      res.json({ success: true, message: \"QR refresh initiated\" });\n    } catch (error) {\n      console.error(\"QR refresh error:\", error);\n      res.status(500).json({ error: \"Failed to refresh QR code\" });\n    }\n  });\n\n  // Complete restart endpoint\n  app.post(\"/api/restart-whatsapp\", async (req, res) => {\n    try {\n      await whatsappService.completeRestart();\n      res.json({ success: true, message: \"WhatsApp service restarted completely\" });\n    } catch (error) {\n      console.error(\"WhatsApp restart error:\", error);\n      res.status(500).json({ error: \"Failed to restart WhatsApp service\" });\n    }\n  });\n\n  // Reconnect without clearing session files\n  app.post(\"/api/reconnect-whatsapp\", async (req, res) => {\n    try {\n      console.log('🔄 API: Reconnecting WhatsApp without clearing session...');\n      await whatsappService.reconnectWithoutClearing();\n      res.json({ success: true, message: \"WhatsApp service reconnection initiated (session preserved)\" });\n    } catch (error) {\n      console.error(\"WhatsApp reconnect error:\", error);\n      res.status(500).json({ error: \"Failed to reconnect WhatsApp service\" });\n    }\n  });\n\n  // Force restart with session clearing\n  app.post(\"/api/force-restart-whatsapp\", async (req, res) => {\n    try {\n      console.log('🔄 API: Force restarting WhatsApp with session clearing...');\n      await whatsappService.completeRestart();\n      res.json({ success: true, message: \"WhatsApp service force restarted (session cleared)\" });\n    } catch (error) {\n      console.error(\"WhatsApp force restart error:\", error);\n      res.status(500).json({ error: \"Failed to force restart WhatsApp service\" });\n    }\n  });\n\n  // Logout from WhatsApp\n  app.post(\"/api/logout\", async (req, res) => {\n    try {\n      await whatsappService.logout();\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n      // Don't return error for logout - it should still clear the session\n      res.json({ success: true, warning: \"Session cleared successfully\" });\n    }\n  });\n\n  // Get system status\n  app.get(\"/api/system-status\", async (req, res) => {\n    try {\n      const isReady = await whatsappService.isClientReady();\n      const status = {\n        client: isReady ? \"Running\" : \"Initializing\",\n        puppeteer: \"Stable\",\n        storage: \"Active\",\n        lastCheck: new Date().toISOString(),\n      };\n      res.json(status);\n    } catch (error) {\n      console.error(\"System status error:\", error);\n      res.status(500).json({ error: \"Failed to get system status\" });\n    }\n  });\n\n  // Trigger data synchronization\n  app.post(\"/api/sync-data\", async (req, res) => {\n    try {\n      const isReady = await whatsappService.isClientReady();\n      if (!isReady) {\n        return res.status(400).json({ \n          success: false, \n          error: \"WhatsApp client not connected. Please scan QR code first to authenticate.\" \n        });\n      }\n      \n      const sessionInfo = await whatsappService.getSessionInfo();\n      if (!sessionInfo) {\n        return res.status(503).json({ \n          success: false, \n          error: \"WhatsApp session not available. Please reconnect by scanning QR code.\" \n        });\n      }\n\n      await whatsappService.triggerDataSync();\n      res.json({ success: true, message: \"Data synchronization completed successfully\" });\n    } catch (error: any) {\n      console.error(\"Data sync error:\", error);\n      res.status(500).json({ \n        success: false, \n        error: error.message || \"Failed to sync data\" \n      });\n    }\n  });\n\n  // Get chat history for a specific chat\n  app.get(\"/api/chats/:chatId/history\", async (req, res) => {\n    try {\n      const { chatId } = req.params;\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 50;\n      const chatHistory = await whatsappService.getChatHistory(chatId, limit);\n      res.json(chatHistory);\n    } catch (error: any) {\n      console.error(\"Get chat history error:\", error);\n      res.status(500).json({ error: error.message || \"Failed to get chat history\" });\n    }\n  });\n\n\n\n  // Send message\n  app.post(\"/api/send-message\", async (req, res) => {\n    try {\n      const parsed = sendMessageSchema.parse(req.body);\n      const result = await whatsappService.sendMessage(\n        parsed.phoneNumber,\n        parsed.message\n      );\n      res.json({ success: true, messageId: result.messageId });\n    } catch (error) {\n      console.error(\"Send message error:\", error);\n      res.status(500).json({ \n        error: error instanceof Error ? error.message : \"Failed to send message\" \n      });\n    }\n  });\n\n  // Send media message\n  app.post(\"/api/send-media-message\", upload.single('media'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: \"No media file provided\" });\n      }\n\n      const parsed = sendMediaMessageSchema.parse({\n        phoneNumber: req.body.phoneNumber,\n        message: req.body.message,\n      });\n\n      const result = await whatsappService.sendMediaMessage(\n        parsed.phoneNumber,\n        parsed.message || '',\n        req.file.path,\n        req.file.originalname || 'media'\n      );\n      \n      res.json({ success: true, messageId: result.messageId, fileName: result.fileName });\n    } catch (error) {\n      console.error(\"Send media message error:\", error);\n      \n      // Clean up uploaded file on error\n      if (req.file?.path && fs.existsSync(req.file.path)) {\n        try {\n          fs.unlinkSync(req.file.path);\n        } catch (cleanupError) {\n          console.warn(\"Failed to clean up uploaded file:\", cleanupError);\n        }\n      }\n      \n      res.status(500).json({ \n        error: error instanceof Error ? error.message : \"Failed to send media message\" \n      });\n    }\n  });\n\n  // Get all chats from connected WhatsApp device (sorted by latest activity)\n  app.get(\"/api/chats\", async (req, res) => {\n    try {\n      // Check if WhatsApp service is ready first\n      const sessionInfo = await whatsappService.getSessionInfo();\n      if (!sessionInfo) {\n        return res.status(503).json({ error: \"WhatsApp not connected\" });\n      }\n\n      // Disable caching for chats to ensure fresh data\n      res.set('Cache-Control', 'no-cache, no-store, must-revalidate');\n      res.set('Pragma', 'no-cache');\n      res.set('Expires', '0');\n      \n      const chats = await whatsappService.getChats();\n      // Chats are already sorted by latest activity in the service layer\n      res.json(chats);\n    } catch (error: any) {\n      console.error(\"Get chats error:\", error);\n      res.status(500).json({ error: error.message || \"Failed to get chats\" });\n    }\n  });\n\n  // Helper function to determine if a phone number is valid\n  const isValidPhoneNumber = (phoneNumber: string): boolean => {\n    // Remove all non-digit characters\n    const cleanNumber = phoneNumber.replace(/[^0-9]/g, '');\n    \n    // Valid phone numbers should:\n    // 1. Have at least 10 digits\n    // 2. Not be extremely long (likely group IDs if > 15 digits)\n    // 3. Start with a reasonable country code pattern\n    if (cleanNumber.length < 10 || cleanNumber.length > 15) {\n      return false;\n    }\n    \n    // Check for common invalid patterns (group-like IDs)\n    // Group IDs often have patterns like long sequences of repeated digits or unusual patterns\n    if (cleanNumber.length > 13) {\n      return false; // Likely a group ID\n    }\n    \n    // Valid phone numbers typically start with country codes\n    // Common patterns: +91, +1, +44, etc.\n    const startsWithValidCountryCode = \n      cleanNumber.startsWith('91') ||   // India\n      cleanNumber.startsWith('1') ||    // US/Canada  \n      cleanNumber.startsWith('44') ||   // UK\n      cleanNumber.startsWith('49') ||   // Germany\n      cleanNumber.startsWith('33') ||   // France\n      cleanNumber.startsWith('61') ||   // Australia\n      cleanNumber.startsWith('81') ||   // Japan\n      cleanNumber.startsWith('86') ||   // China\n      cleanNumber.startsWith('7') ||    // Russia\n      cleanNumber.startsWith('55');     // Brazil\n    \n    return startsWithValidCountryCode;\n  };\n\n  // Helper function to deduplicate contacts by name, prioritizing valid phone numbers\n  const deduplicateContacts = (contactsList: any[]): any[] => {\n    const contactMap = new Map<string, any>();\n    \n    contactsList.forEach(contact => {\n      const existingContact = contactMap.get(contact.name);\n      \n      if (!existingContact) {\n        // First contact with this name\n        contactMap.set(contact.name, contact);\n      } else {\n        // Contact with same name exists, prioritize the one with valid phone number\n        const currentIsValid = isValidPhoneNumber(contact.number || contact.id);\n        const existingIsValid = isValidPhoneNumber(existingContact.number || existingContact.id);\n        \n        if (currentIsValid && !existingIsValid) {\n          // Replace with valid phone number\n          contactMap.set(contact.name, contact);\n        } else if (currentIsValid && existingIsValid) {\n          // Both are valid, keep the shorter/more standard one\n          const currentClean = (contact.number || contact.id).replace(/[^0-9]/g, '');\n          const existingClean = (existingContact.number || existingContact.id).replace(/[^0-9]/g, '');\n          \n          if (currentClean.length <= existingClean.length) {\n            contactMap.set(contact.name, contact);\n          }\n        }\n        // If current is invalid and existing is valid, keep existing (do nothing)\n      }\n    });\n    \n    return Array.from(contactMap.values());\n  };\n\n  // Get all contacts from connected WhatsApp device\n  app.get(\"/api/contacts\", async (req, res) => {\n    try {\n      // Check if WhatsApp service is ready first\n      const sessionInfo = await whatsappService.getSessionInfo();\n      if (!sessionInfo) {\n        return res.status(503).json({ error: \"WhatsApp not connected\" });\n      }\n\n      const contacts = await whatsappService.getContacts();\n      \n      // Filter out invalid phone numbers and apply deduplication\n      const validContacts = contacts.filter(contact => {\n        // Apply the same validation as the helper function\n        return isValidPhoneNumber(contact.number || contact.id);\n      });\n\n      // Apply deduplication to clean up duplicate contacts\n      const deduplicatedContacts = deduplicateContacts(validContacts);\n      \n      // Sort contacts alphabetically by name for consistent ordering\n      deduplicatedContacts.sort((a, b) => (a.name || '').localeCompare(b.name || ''));\n      \n      res.json(deduplicatedContacts);\n    } catch (error: any) {\n      console.error(\"Get contacts error:\", error);\n      res.status(500).json({ error: error.message || \"Failed to get contacts\" });\n    }\n  });\n\n  // Get all groups from connected WhatsApp device\n  app.get(\"/api/groups\", async (req, res) => {\n    try {\n      // Check if WhatsApp service is ready first\n      const sessionInfo = await whatsappService.getSessionInfo();\n      if (!sessionInfo) {\n        return res.status(503).json({ error: \"WhatsApp not connected\" });\n      }\n\n      // Disable caching for groups to ensure fresh data\n      res.set('Cache-Control', 'no-cache, no-store, must-revalidate');\n      res.set('Pragma', 'no-cache');\n      res.set('Expires', '0');\n      \n      const groups = await whatsappService.getGroups();\n      res.json(groups);\n    } catch (error: any) {\n      console.error(\"Get groups error:\", error);\n      res.status(500).json({ error: error.message || \"Failed to get groups\" });\n    }\n  });\n\n\n\n  // Download chats as CSV\n  app.get(\"/api/chats/download\", async (req, res) => {\n    try {\n      const chats = await whatsappService.getChats();\n      \n      // Convert to CSV format\n      const csvHeader = 'Name,Phone Number,Is Group,Unread Count,Last Message,Last Message Time,From Me\\n';\n      const csvRows = chats.map((chat: any) => {\n        const lastMsg = chat.lastMessage ? chat.lastMessage.body.replace(/\"/g, '\"\"') : '';\n        const lastMsgTime = chat.lastMessage ? new Date(chat.lastMessage.timestamp * 1000).toISOString() : '';\n        const fromMe = chat.lastMessage ? chat.lastMessage.fromMe : '';\n        \n        return `\"${chat.name}\",\"${chat.id}\",\"${chat.isGroup}\",\"${chat.unreadCount}\",\"${lastMsg}\",\"${lastMsgTime}\",\"${fromMe}\"`;\n      }).join('\\n');\n      \n      const csvContent = '\\uFEFF' + csvHeader + csvRows;\n      \n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', 'attachment; filename=\"whatsapp_chats.csv\"');\n      res.send(csvContent);\n    } catch (error: any) {\n      console.error(\"Download chats error:\", error);\n      res.status(500).json({ error: error.message || \"Failed to download chats\" });\n    }\n  });\n\n  // Download contacts as CSV\n  app.get(\"/api/contacts/download\", async (req, res) => {\n    try {\n      const contacts = await whatsappService.getContacts();\n      // Apply deduplication to remove duplicate contacts with same name but different numbers\n      const deduplicatedContacts = deduplicateContacts(contacts);\n      \n      // Convert to CSV format\n      const csvHeader = 'Name,Phone Number,Is My Contact,Is WhatsApp Contact,Is Group\\n';\n      const csvRows = deduplicatedContacts.map((contact: any) => {\n        return `\"${contact.name}\",\"${contact.number || contact.id}\",\"${contact.isMyContact}\",\"${contact.isWAContact}\",\"${contact.isGroup}\"`;\n      }).join('\\n');\n      \n      const csvContent = '\\uFEFF' + csvHeader + csvRows;\n      \n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', 'attachment; filename=\"whatsapp_contacts.csv\"');\n      res.send(csvContent);\n    } catch (error: any) {\n      console.error(\"Download contacts error:\", error);\n      res.status(500).json({ error: error.message || \"Failed to download contacts\" });\n    }\n  });\n\n  // Download groups as CSV with participant phone numbers\n  app.get(\"/api/groups/download\", async (req, res) => {\n    try {\n      const groups = await whatsappService.getGroups();\n      \n      // Convert to CSV format with ID and Numbers columns\n      const csvHeader = 'ID,Numbers\\n';\n      let rowIndex = 1;\n      const csvRows: string[] = [];\n      \n      groups.forEach((group: any) => {\n        if (group.participants) {\n          const participantNumbers = group.participants\n            .map((p: any) => p.id._serialized || p.id)\n            .filter((id: string) => id.includes('@c.us'))\n            .map((id: string) => id.split('@')[0]);\n          \n          participantNumbers.forEach((number: string) => {\n            csvRows.push(`${rowIndex},${number}`);\n            rowIndex++;\n          });\n        }\n      });\n      \n      const csvContent = '\\uFEFF' + csvHeader + csvRows.join('\\n');\n      \n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', 'attachment; filename=\"whatsapp_groups.csv\"');\n      res.send(csvContent);\n    } catch (error: any) {\n      console.error(\"Download groups error:\", error);\n      res.status(500).json({ error: error.message || \"Failed to download groups\" });\n    }\n  });\n\n  // Export individual group as CSV \n  app.get(\"/api/groups/:groupId/export\", async (req, res) => {\n    try {\n      const { groupId } = req.params;\n      \n      if (!groupId) {\n        return res.status(400).json({ error: \"Group ID is required\" });\n      }\n      \n      const groups = await whatsappService.getGroups();\n      const group = groups.find((g: any) => g.id === groupId);\n      \n      if (!group) {\n        return res.status(404).json({ error: \"Group not found\" });\n      }\n      \n      // Convert to CSV format with ID and Numbers columns\n      const csvHeader = 'ID,Numbers\\n';\n      const participantNumbers = group.participants \n        ? group.participants\n            .map((p: any) => p.id._serialized || p.id)\n            .filter((id: string) => id.includes('@c.us'))\n            .map((id: string) => id.split('@')[0])\n        : [];\n      \n      const csvRows = participantNumbers.map((number: string, index: number) => `${index + 1},${number}`).join('\\n');\n      const csvContent = '\\uFEFF' + csvHeader + csvRows;\n      \n      // Create safe filename from group name\n      const safeGroupName = group.name.replace(/[^a-zA-Z0-9]/g, '_');\n      const filename = `${safeGroupName}_participants.csv`;\n      \n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n      res.send(csvContent);\n    } catch (error: any) {\n      console.error(\"Export group error:\", error);\n      res.status(500).json({ error: error.message || \"Failed to export group\" });\n    }\n  });\n\n  // Download single group as CSV with participant phone numbers (deprecated)\n  app.get(\"/api/groups/download-single\", async (req, res) => {\n    try {\n      const { groupId } = req.query;\n      \n      if (!groupId || typeof groupId !== 'string') {\n        return res.status(400).json({ error: \"Group ID is required\" });\n      }\n      \n      const groups = await whatsappService.getGroups();\n      const group = groups.find((g: any) => g.id === groupId);\n      \n      if (!group) {\n        return res.status(404).json({ error: \"Group not found\" });\n      }\n      \n      // Convert to CSV format with ID and Numbers columns\n      const csvHeader = 'ID,Numbers\\n';\n      const participantNumbers = group.participants \n        ? group.participants\n            .map((p: any) => p.id._serialized || p.id)\n            .filter((id: string) => id.includes('@c.us'))\n            .map((id: string) => id.split('@')[0])\n        : [];\n      \n      const csvRows = participantNumbers.map((number: string, index: number) => `${index + 1},${number}`).join('\\n');\n      const csvContent = '\\uFEFF' + csvHeader + csvRows;\n      \n      // Create safe filename from group name\n      const safeGroupName = group.name.replace(/[^a-zA-Z0-9]/g, '_');\n      const filename = `${safeGroupName}_participants.csv`;\n      \n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n      res.send(csvContent);\n    } catch (error: any) {\n      console.error(\"Download single group error:\", error);\n      res.status(500).json({ error: error.message || \"Failed to download group\" });\n    }\n  });\n\n  // Get chat history with a specific contact\n  app.get(\"/api/chat-history/:contactId\", async (req, res) => {\n    try {\n      const { contactId } = req.params;\n      const chatHistory = await whatsappService.getChatHistory(contactId);\n      res.json(chatHistory);\n    } catch (error: any) {\n      console.error(\"Get chat history error:\", error);\n      res.status(500).json({ error: error.message || \"Failed to get chat history\" });\n    }\n  });\n\n  // Delete a chat (for personal chats only)\n  app.delete(\"/api/chats/:contactId\", async (req, res) => {\n    try {\n      const { contactId } = req.params;\n      \n      // Validate that this is not a group chat\n      if (contactId.includes('@g.us')) {\n        return res.status(400).json({ error: \"Cannot delete group chats\" });\n      }\n      \n      const result = await whatsappService.deleteChat(contactId);\n      res.json(result);\n    } catch (error: any) {\n      console.error(\"Delete chat error:\", error);\n      res.status(500).json({ error: error.message || \"Failed to delete chat\" });\n    }\n  });\n\n  // Clear chat history (for both personal and group chats)\n  app.delete(\"/api/chat-history/:contactId\", async (req, res) => {\n    try {\n      const { contactId } = req.params;\n      const result = await whatsappService.clearChatHistory(contactId);\n      res.json(result);\n    } catch (error: any) {\n      console.error(\"Clear chat history error:\", error);\n      res.status(500).json({ error: error.message || \"Failed to clear chat history\" });\n    }\n  });\n\n  // Clear chat history (POST route for frontend compatibility)\n  app.post(\"/api/chats/:contactId/clear\", async (req, res) => {\n    try {\n      const { contactId } = req.params;\n      const result = await whatsappService.clearChatHistory(contactId);\n      res.json(result);\n    } catch (error: any) {\n      console.error(\"Clear chat history error:\", error);\n      res.status(500).json({ error: error.message || \"Failed to clear chat history\" });\n    }\n  });\n\n  // Contact Groups API\n  app.get(\"/api/contact-groups\", async (req, res) => {\n    try {\n      const groups = await storage.getContactGroups();\n      res.json(groups);\n    } catch (error: any) {\n      console.error(\"Get contact groups error:\", error);\n      res.status(500).json({ error: error.message || \"Failed to get contact groups\" });\n    }\n  });\n\n  app.post(\"/api/contact-groups\", async (req, res) => {\n    try {\n      const { name, description } = req.body;\n      \n      if (!name || name.trim() === '') {\n        return res.status(400).json({ error: \"Group name is required\" });\n      }\n\n      const group = await storage.createContactGroup({\n        name: name.trim(),\n        description: description?.trim() || null\n      });\n\n      res.json(group);\n    } catch (error: any) {\n      console.error(\"Create contact group error:\", error);\n      res.status(500).json({ error: error.message || \"Failed to create contact group\" });\n    }\n  });\n\n  app.post(\"/api/contact-groups/:groupId/import-csv\", csvUpload.single('csv'), async (req, res) => {\n    try {\n      const { groupId } = req.params;\n      \n      if (!req.file) {\n        return res.status(400).json({ error: \"CSV file is required\" });\n      }\n\n      const group = await storage.getContactGroup(groupId);\n      if (!group) {\n        return res.status(404).json({ error: \"Contact group not found\" });\n      }\n\n      // Parse CSV file from memory buffer\n      const csvContent = req.file.buffer.toString('utf8');\n      const lines = csvContent.split(/\\r?\\n/).filter(line => line.trim());\n\n      // Clear existing members\n      await storage.deleteContactGroupMembers(groupId);\n\n      let totalContacts = 0;\n      let validContacts = 0;\n      let invalidContacts = 0;\n      let duplicateContacts = 0;\n      const processedNumbers = new Set();\n      const membersToInsert: { groupId: string; phoneNumber: string; name: null; status: 'valid' | 'invalid' }[] = [];\n\n      for (const line of lines) {\n        if (!line.trim()) continue;\n\n        const tokens = line.split(/[;,\\t]+|\\s+/).map(t => t.trim()).filter(Boolean);\n        if (tokens.length === 0) continue;\n\n        const firstLower = tokens[0].toLowerCase();\n        if (firstLower === 'id' || firstLower.includes('phone') || firstLower.includes('number')) {\n          continue;\n        }\n\n        totalContacts++;\n        let phoneNumber = tokens.length > 1 ? tokens[tokens.length - 1] : tokens[0];\n        phoneNumber = phoneNumber.replace(/[^0-9+]/g, '');\n\n        if (phoneNumber && !phoneNumber.startsWith('+') && phoneNumber.length === 10) {\n          phoneNumber = '+91' + phoneNumber;\n        }\n\n        if (!phoneNumber || phoneNumber.length < 10) {\n          invalidContacts++;\n          continue;\n        }\n\n        if (processedNumbers.has(phoneNumber)) {\n          duplicateContacts++;\n          continue;\n        }\n\n        processedNumbers.add(phoneNumber);\n        validContacts++;\n\n        membersToInsert.push({\n          groupId,\n          phoneNumber,\n          name: null, // No name in the CSV format\n          status: \"valid\"\n        });\n      }\n\n      // Bulk insert all valid members at once\n      if (membersToInsert.length > 0) {\n        await storage.createContactGroupMembersBulk(membersToInsert);\n      }\n\n      // Update group statistics\n      await storage.updateContactGroup(groupId, {\n        totalContacts,\n        validContacts,\n        invalidContacts,\n        duplicateContacts\n      });\n\n      res.json({\n        success: true,\n        totalContacts,\n        validContacts,\n        invalidContacts,\n        duplicateContacts\n      });\n\n    } catch (error: any) {\n      console.error(\"Import CSV error:\", error);\n      res.status(500).json({ error: error.message || \"Failed to import CSV\" });\n    }\n  });\n\n  app.delete(\"/api/contact-groups/:groupId\", async (req, res) => {\n    try {\n      const { groupId } = req.params;\n      await storage.deleteContactGroup(groupId);\n      res.json({ success: true });\n    } catch (error: any) {\n      console.error(\"Delete contact group error:\", error);\n      res.status(500).json({ error: error.message || \"Failed to delete contact group\" });\n    }\n  });\n\n  app.get(\"/api/contact-groups/:groupId/export\", async (req, res) => {\n    try {\n      const { groupId } = req.params;\n      const group = await storage.getContactGroup(groupId);\n      const members = await storage.getContactGroupMembers(groupId);\n      \n      if (!group) {\n        return res.status(404).json({ error: \"Contact group not found\" });\n      }\n\n      const csvHeader = 'id,phone_number\\n';\n      const csvRows = members.map((member, index) => \n        `${index + 1},${member.phoneNumber.replace('+91', '')}`\n      ).join('\\n');\n      \n      const csvContent = csvHeader + csvRows;\n      const safeGroupName = group.name.replace(/[^a-zA-Z0-9]/g, '_');\n      \n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', `attachment; filename=\"${safeGroupName}_contacts.csv\"`);\n      res.send(csvContent);\n    } catch (error: any) {\n      console.error(\"Export contact group error:\", error);\n      res.status(500).json({ error: error.message || \"Failed to export contact group\" });\n    }\n  });\n\n  // Get contact group details\n  app.get(\"/api/contact-groups/:groupId\", async (req, res) => {\n    try {\n      const { groupId } = req.params;\n      const group = await storage.getContactGroup(groupId);\n      \n      if (!group) {\n        return res.status(404).json({ error: \"Contact group not found\" });\n      }\n\n      res.json(group);\n    } catch (error: any) {\n      console.error(\"Get contact group error:\", error);\n      res.status(500).json({ error: error.message || \"Failed to get contact group\" });\n    }\n  });\n\n  // Get contact group members\n  app.get(\"/api/contact-groups/:groupId/members\", async (req, res) => {\n    try {\n      const { groupId } = req.params;\n      const members = await storage.getContactGroupMembers(groupId);\n      res.json(members);\n    } catch (error: any) {\n      console.error(\"Get contact group members error:\", error);\n      res.status(500).json({ error: error.message || \"Failed to get contact group members\" });\n    }\n  });\n\n  // Import contacts to group \n  app.post(\"/api/contact-groups/:groupId/import\", csvUpload.single('file'), async (req, res) => {\n    try {\n      const { groupId } = req.params;\n      \n      if (!req.file) {\n        return res.status(400).json({ error: \"CSV file is required\" });\n      }\n\n      const group = await storage.getContactGroup(groupId);\n      if (!group) {\n        return res.status(404).json({ error: \"Contact group not found\" });\n      }\n\n      // Parse CSV file from memory buffer\n      const csvContent = req.file.buffer.toString('utf8');\n      const lines = csvContent.split(/\\r?\\n/).filter(line => line.trim());\n\n      let totalContacts = 0;\n      let validContacts = 0;\n      let invalidContacts = 0;\n      let duplicateContacts = 0;\n      const existingMembers = await storage.getContactGroupMembers(groupId);\n      const existingNumbers = new Set(existingMembers.map(m => m.phoneNumber));\n\n      for (const line of lines) {\n        if (!line.trim()) continue;\n\n        const tokens = line.split(/[;,\\t]+|\\s+/).map(t => t.trim()).filter(Boolean);\n        if (tokens.length === 0) continue;\n\n        const firstLower = tokens[0].toLowerCase();\n        if (firstLower === 'id' || firstLower.includes('phone') || firstLower.includes('number')) {\n          continue;\n        }\n\n        totalContacts++;\n        let phoneNumber = tokens.length > 1 ? tokens[tokens.length - 1] : tokens[0];\n        phoneNumber = phoneNumber.replace(/[^0-9+]/g, '');\n\n        if (phoneNumber && !phoneNumber.startsWith('+') && phoneNumber.length === 10) {\n          phoneNumber = '+91' + phoneNumber;\n        }\n\n        if (!phoneNumber || phoneNumber.length < 10) {\n          invalidContacts++;\n          continue;\n        }\n\n        if (existingNumbers.has(phoneNumber)) {\n          duplicateContacts++;\n          continue;\n        }\n\n        existingNumbers.add(phoneNumber);\n        validContacts++;\n\n        await storage.createContactGroupMember({\n          groupId,\n          phoneNumber,\n          name: null,\n          status: \"valid\"\n        });\n      }\n\n      // Update group statistics\n      const updatedGroup = await storage.updateContactGroup(groupId, {\n        totalContacts: group.totalContacts + validContacts,\n        validContacts: group.validContacts + validContacts,\n        invalidContacts: group.invalidContacts + invalidContacts,\n        duplicateContacts: group.duplicateContacts + duplicateContacts\n      });\n\n      res.json({\n        success: true,\n        imported: validContacts,\n        duplicates: duplicateContacts,\n        invalid: invalidContacts,\n        total: totalContacts\n      });\n\n    } catch (error: any) {\n      console.error(\"Import contacts error:\", error);\n      res.status(500).json({ error: error.message || \"Failed to import contacts\" });\n    }\n  });\n\n  // Add single contact to group\n  app.post(\"/api/contact-groups/:groupId/members\", async (req, res) => {\n    try {\n      const { groupId } = req.params;\n      const { name, phoneNumber } = req.body;\n\n      if (!name || !phoneNumber) {\n        return res.status(400).json({ error: \"Name and phone number are required\" });\n      }\n\n      const group = await storage.getContactGroup(groupId);\n      if (!group) {\n        return res.status(404).json({ error: \"Contact group not found\" });\n      }\n\n      // Check if phone number already exists in the group\n      const existingMembers = await storage.getContactGroupMembers(groupId);\n      const existingNumbers = new Set(existingMembers.map(m => m.phoneNumber));\n      \n      if (existingNumbers.has(phoneNumber)) {\n        return res.status(400).json({ error: \"Phone number already exists in this group\" });\n      }\n\n      // Add the contact\n      const newMember = await storage.createContactGroupMember({\n        groupId,\n        phoneNumber,\n        name,\n        status: \"valid\"\n      });\n\n      // Update group statistics\n      await storage.updateContactGroup(groupId, {\n        totalContacts: group.totalContacts + 1,\n        validContacts: group.validContacts + 1\n      });\n\n      res.json({ success: true, member: newMember });\n\n    } catch (error: any) {\n      console.error(\"Add contact error:\", error);\n      res.status(500).json({ error: error.message || \"Failed to add contact\" });\n    }\n  });\n\n  // Add multiple phone numbers to contact group\n  app.post(\"/api/contact-groups/:groupId/members/batch\", async (req, res) => {\n    try {\n      const { groupId } = req.params;\n      const { phoneNumbers } = req.body;\n\n      if (!phoneNumbers || !Array.isArray(phoneNumbers)) {\n        return res.status(400).json({ error: \"Phone numbers array is required\" });\n      }\n\n      const group = await storage.getContactGroup(groupId);\n      if (!group) {\n        return res.status(404).json({ error: \"Contact group not found\" });\n      }\n\n      // Get existing numbers to avoid duplicates\n      const existingMembers = await storage.getContactGroupMembers(groupId);\n      const existingNumbers = new Set(existingMembers.map(m => m.phoneNumber));\n\n      let validContacts = 0;\n      let duplicateContacts = 0;\n      let invalidContacts = 0;\n      const membersToInsert: { groupId: string; phoneNumber: string; name: null; status: 'valid' | 'invalid' }[] = [];\n\n      for (const phoneNumber of phoneNumbers) {\n        if (!phoneNumber || typeof phoneNumber !== 'string') {\n          invalidContacts++;\n          continue;\n        }\n\n        // Check for duplicates\n        if (existingNumbers.has(phoneNumber)) {\n          duplicateContacts++;\n          continue;\n        }\n\n        // Add to existing numbers set to prevent duplicates within the batch\n        existingNumbers.add(phoneNumber);\n        validContacts++;\n\n        membersToInsert.push({\n          groupId,\n          phoneNumber,\n          name: null, // Multiple numbers don't have names\n          status: \"valid\"\n        });\n      }\n\n      // Bulk insert all valid members\n      if (membersToInsert.length > 0) {\n        await storage.createContactGroupMembersBulk(membersToInsert);\n      }\n\n      // Update group statistics\n      await storage.updateContactGroup(groupId, {\n        totalContacts: group.totalContacts + validContacts,\n        validContacts: group.validContacts + validContacts,\n        duplicateContacts: group.duplicateContacts + duplicateContacts,\n        invalidContacts: group.invalidContacts + invalidContacts\n      });\n\n      res.json({ \n        success: true, \n        validContacts,\n        duplicateContacts,\n        invalidContacts,\n        totalProcessed: phoneNumbers.length\n      });\n\n    } catch (error: any) {\n      console.error(\"Add multiple contacts error:\", error);\n      res.status(500).json({ error: error.message || \"Failed to add multiple contacts\" });\n    }\n  });\n\n  // Update contact group member phone number\n  app.patch(\"/api/contact-groups/:groupId/members/:memberId\", async (req, res) => {\n    try {\n      const { groupId, memberId } = req.params;\n      const { phoneNumber, name } = req.body;\n\n      if (!phoneNumber) {\n        return res.status(400).json({ error: \"Phone number is required\" });\n      }\n\n      const group = await storage.getContactGroup(groupId);\n      if (!group) {\n        return res.status(404).json({ error: \"Contact group not found\" });\n      }\n\n      // Check if phone number already exists in the group (excluding current member)\n      const existingMembers = await storage.getContactGroupMembers(groupId);\n      const existingNumbers = new Set(existingMembers.filter(m => m.id !== memberId).map(m => m.phoneNumber));\n      \n      if (existingNumbers.has(phoneNumber)) {\n        return res.status(400).json({ error: \"Phone number already exists in this group\" });\n      }\n\n      // Update the member\n      const updatedMember = await storage.updateContactGroupMember(memberId, {\n        phoneNumber,\n        name: name || null,\n        status: \"valid\"\n      });\n\n      if (!updatedMember) {\n        return res.status(404).json({ error: \"Contact member not found\" });\n      }\n\n      res.json({ success: true, member: updatedMember });\n\n    } catch (error: any) {\n      console.error(\"Update contact error:\", error);\n      res.status(500).json({ error: error.message || \"Failed to update contact\" });\n    }\n  });\n\n  // Add multiple contacts to multiple groups\n  app.post(\"/api/contacts/add-to-groups\", async (req, res) => {\n    try {\n      const { contactIds, groupIds } = req.body;\n      \n      if (!contactIds || !Array.isArray(contactIds) || contactIds.length === 0) {\n        return res.status(400).json({ error: \"Contact IDs are required\" });\n      }\n      \n      if (!groupIds || !Array.isArray(groupIds) || groupIds.length === 0) {\n        return res.status(400).json({ error: \"Group IDs are required\" });\n      }\n\n      // Get contact information from WhatsApp\n      const contacts = await whatsappService.getContacts();\n      const contactMap = new Map(contacts.map(contact => [contact.id, contact]));\n      \n      let totalAdded = 0;\n      let totalSkipped = 0;\n      \n      // Add each contact to each selected group\n      for (const groupId of groupIds) {\n        const group = await storage.getContactGroup(groupId);\n        if (!group) {\n          console.warn(`Group ${groupId} not found, skipping`);\n          continue;\n        }\n        \n        const existingMembers = await storage.getContactGroupMembers(groupId);\n        const existingNumbers = new Set(existingMembers.map(m => m.phoneNumber));\n        \n        let groupValidContacts = group.validContacts;\n        let groupTotalContacts = group.totalContacts;\n        \n        for (const contactId of contactIds) {\n          const contact = contactMap.get(contactId);\n          if (!contact) {\n            console.warn(`Contact ${contactId} not found, skipping`);\n            totalSkipped++;\n            continue;\n          }\n          \n          // Clean and format phone number\n          let phoneNumber = contact.number.replace(/[^0-9+]/g, '');\n          if (phoneNumber && !phoneNumber.startsWith('+') && phoneNumber.length === 10) {\n            phoneNumber = '+91' + phoneNumber;\n          }\n          \n          if (existingNumbers.has(phoneNumber)) {\n            totalSkipped++;\n            continue;\n          }\n          \n          // Add contact to group\n          await storage.createContactGroupMember({\n            groupId,\n            phoneNumber,\n            name: contact.name,\n            status: \"valid\"\n          });\n          \n          existingNumbers.add(phoneNumber);\n          groupValidContacts++;\n          groupTotalContacts++;\n          totalAdded++;\n        }\n        \n        // Update group statistics\n        await storage.updateContactGroup(groupId, {\n          totalContacts: groupTotalContacts,\n          validContacts: groupValidContacts\n        });\n      }\n      \n      res.json({\n        success: true,\n        message: `Added ${totalAdded} contacts to ${groupIds.length} group(s)`,\n        totalAdded,\n        totalSkipped,\n        contactsProcessed: contactIds.length,\n        groupsProcessed: groupIds.length\n      });\n      \n    } catch (error: any) {\n      console.error(\"Add contacts to groups error:\", error);\n      res.status(500).json({ error: error.message || \"Failed to add contacts to groups\" });\n    }\n  });\n\n  // Get all contact group memberships (bulk endpoint)\n  app.get(\"/api/contacts/bulk-group-memberships\", async (req, res) => {\n    try {\n      // Get all contact groups and their members\n      const groups = await storage.getContactGroups();\n      const contactGroupMemberships: Record<string, ContactGroup[]> = {};\n      \n      // Build a map of phone number to groups\n      for (const group of groups) {\n        const members = await storage.getContactGroupMembers(group.id);\n        \n        for (const member of members) {\n          if (!contactGroupMemberships[member.phoneNumber]) {\n            contactGroupMemberships[member.phoneNumber] = [];\n          }\n          contactGroupMemberships[member.phoneNumber].push(group);\n        }\n      }\n      \n      res.json(contactGroupMemberships);\n      \n    } catch (error: any) {\n      console.error(\"Get bulk contact groups error:\", error);\n      res.status(500).json({ error: error.message || \"Failed to get bulk contact groups\" });\n    }\n  });\n\n  // Get contact groups for a specific contact\n  app.get(\"/api/contacts/:contactNumber/groups\", async (req, res) => {\n    try {\n      const { contactNumber } = req.params;\n      \n      // Clean the contact number for matching\n      let cleanNumber = contactNumber.replace(/[^0-9+]/g, '');\n      if (cleanNumber && !cleanNumber.startsWith('+') && cleanNumber.length === 10) {\n        cleanNumber = '+91' + cleanNumber;\n      }\n      \n      // Get all contact groups\n      const groups = await storage.getContactGroups();\n      const contactGroups: ContactGroup[] = [];\n      \n      // Check each group for the contact\n      for (const group of groups) {\n        const members = await storage.getContactGroupMembers(group.id);\n        const isMember = members.some(member => member.phoneNumber === cleanNumber);\n        if (isMember) {\n          contactGroups.push(group);\n        }\n      }\n      \n      res.json(contactGroups);\n      \n    } catch (error: any) {\n      console.error(\"Get contact groups error:\", error);\n      res.status(500).json({ error: error.message || \"Failed to get contact groups\" });\n    }\n  });\n\n  // Remove contact from specific group\n  app.delete(\"/api/contacts/:contactNumber/remove-from-group/:groupId\", async (req, res) => {\n    try {\n      const { contactNumber, groupId } = req.params;\n      \n      // Clean the contact number for matching\n      let cleanNumber = contactNumber.replace(/[^0-9+]/g, '');\n      if (cleanNumber && !cleanNumber.startsWith('+') && cleanNumber.length === 10) {\n        cleanNumber = '+91' + cleanNumber;\n      }\n      \n      // Get the group\n      const group = await storage.getContactGroup(groupId);\n      if (!group) {\n        return res.status(404).json({ error: \"Contact group not found\" });\n      }\n      \n      // Get group members to find the specific member\n      const members = await storage.getContactGroupMembers(groupId);\n      const memberToRemove = members.find(member => member.phoneNumber === cleanNumber);\n      \n      if (!memberToRemove) {\n        return res.status(404).json({ error: \"Contact not found in group\" });\n      }\n      \n      // Remove the member\n      await storage.deleteContactGroupMember(memberToRemove.id);\n      \n      // Update group statistics\n      await storage.updateContactGroup(groupId, {\n        totalContacts: Math.max(0, group.totalContacts - 1),\n        validContacts: Math.max(0, group.validContacts - 1)\n      });\n      \n      res.json({\n        success: true,\n        message: \"Contact removed from group successfully\"\n      });\n      \n    } catch (error: any) {\n      console.error(\"Remove contact from group error:\", error);\n      res.status(500).json({ error: error.message || \"Failed to remove contact from group\" });\n    }\n  });\n\n  // Batch delete contact group members\n  app.delete(\"/api/contact-groups/:groupId/members/batch-delete\", async (req, res) => {\n    try {\n      const { groupId } = req.params;\n      const { memberIds } = req.body;\n\n      if (!memberIds || !Array.isArray(memberIds)) {\n        return res.status(400).json({ error: \"Member IDs array is required\" });\n      }\n\n      const group = await storage.getContactGroup(groupId);\n      if (!group) {\n        return res.status(404).json({ error: \"Contact group not found\" });\n      }\n\n      // Bulk delete all selected members at once\n      await storage.deleteContactGroupMembersBulk(memberIds);\n\n      // Update group member counts\n      const remainingMembers = await storage.getContactGroupMembers(groupId);\n      const validCount = remainingMembers.filter(m => m.status === 'valid').length;\n      const invalidCount = remainingMembers.filter(m => m.status === 'invalid').length;\n      const duplicateCount = remainingMembers.filter(m => m.status === 'duplicate').length;\n\n      await storage.updateContactGroup(groupId, {\n        totalContacts: remainingMembers.length,\n        validContacts: validCount,\n        invalidContacts: invalidCount,\n        duplicateContacts: duplicateCount\n      });\n\n      res.json({ success: true, deletedCount: memberIds.length });\n    } catch (error: any) {\n      console.error(\"Batch delete members error:\", error);\n      res.status(500).json({ error: error.message || \"Failed to delete members\" });\n    }\n  });\n\n  app.post(\"/api/contact-groups/:groupId/send\", async (req, res) => {\n    try {\n      const { groupId } = req.params;\n      const { message } = req.body;\n\n      if (!message) {\n        return res.status(400).json({ error: \"Message is required\" });\n      }\n\n      const group = await storage.getContactGroup(groupId);\n      if (!group) {\n        return res.status(404).json({ error: \"Contact group not found\" });\n      }\n\n      const members = await storage.getContactGroupMembers(groupId);\n      let sentCount = 0;\n      let failedCount = 0;\n\n      for (const member of members) {\n        if (member.status !== \"valid\") continue;\n\n        try {\n          await whatsappService.sendMessage(member.phoneNumber, message);\n          sentCount++;\n          await new Promise((r) => setTimeout(r, 1000 + Math.random() * 2000));\n        } catch (error) {\n          console.error(`Failed to send message to ${member.phoneNumber}:`, error);\n          failedCount++;\n        }\n      }\n\n      res.json({\n        success: true,\n        sentCount,\n        failedCount,\n        totalMembers: members.filter((m) => m.status === \"valid\").length,\n      });\n    } catch (error: any) {\n      console.error(\"Send contact group messages error:\", error);\n      res.status(500).json({ error: error.message || \"Failed to send messages\" });\n    }\n  });\n\n  // Export all groups as separate CSV files (returns JSON with file data)\n  app.get(\"/api/groups/export-all-csv\", async (req, res) => {\n    try {\n      if (!(whatsappService as any).isReady) {\n        return res.status(400).json({ error: \"WhatsApp not connected\" });\n      }\n\n      const groups = await whatsappService.getGroups();\n      \n      if (groups.length === 0) {\n        return res.status(404).json({ error: \"No groups found\" });\n      }\n\n      // Create a map to store CSV files\n      const csvFiles: { [filename: string]: string } = {};\n      \n      for (const group of groups) {\n        const participants = group.participants || [];\n        const numbers: string[] = [];\n        \n        for (const participant of participants) {\n          if (participant.id && participant.id._serialized) {\n            // Extract phone number from WhatsApp ID format\n            let phoneNumber = participant.id._serialized.replace('@c.us', '').replace('@g.us', '');\n            \n            // Clean and format phone number\n            phoneNumber = phoneNumber.replace(/[^0-9+]/g, '');\n            \n            // Add +91 prefix if not present and it's a 10-digit number\n            if (!phoneNumber.startsWith('+') && phoneNumber.length === 10) {\n              phoneNumber = '+91' + phoneNumber;\n            }\n            \n            // Remove +91 prefix for CSV as requested\n            if (phoneNumber.startsWith('+91')) {\n              phoneNumber = phoneNumber.substring(3);\n            }\n            \n            if (phoneNumber.length >= 10) {\n              numbers.push(phoneNumber);\n            }\n          }\n        }\n        \n        // Create CSV content for this group with one number per row\n        const csvContent = '\\uFEFF' + numbers.join('\\n');\n        \n        // Create safe filename from group name\n        const safeGroupName = (group.name || `Group_${group.id}`)\n          .replace(/[^a-zA-Z0-9\\s]/g, '_')\n          .replace(/\\s+/g, '_')\n          .substring(0, 50); // Limit filename length\n        \n        csvFiles[`${safeGroupName}.csv`] = csvContent;\n      }\n\n      // Return JSON with all CSV files\n      res.json({\n        success: true,\n        files: csvFiles,\n        totalGroups: groups.length\n      });\n    } catch (error: any) {\n      console.error(\"Export all groups error:\", error);\n      res.status(500).json({ error: error.message || \"Failed to export CSV files\" });\n    }\n  });\n\n  // Bulk Message Campaigns API\n  // Get all bulk campaigns\n  app.get(\"/api/bulk-campaigns\", async (req, res) => {\n    try {\n      const campaigns = await storage.getBulkMessageCampaigns();\n      res.json(campaigns);\n    } catch (error: any) {\n      console.error(\"Get bulk campaigns error:\", error);\n      res.status(500).json({ error: error.message || \"Failed to fetch bulk campaigns\" });\n    }\n  });\n\n  app.post(\"/api/bulk-campaigns\", async (req, res) => {\n    try {\n      const { campaignName, contactGroupId, message, scheduledAt } = req.body;\n      \n      if (!campaignName || !contactGroupId || !message) {\n        return res.status(400).json({ error: \"Campaign name, contact group, and message are required\" });\n      }\n\n      // Verify contact group exists\n      const group = await storage.getContactGroup(contactGroupId);\n      if (!group) {\n        return res.status(404).json({ error: \"Contact group not found\" });\n      }\n\n      const campaign = await storage.createBulkMessageCampaign({\n        name: campaignName,\n        targetType: \"contact_group\",\n        contactGroupId,\n        message,\n        timePost: scheduledAt ? new Date(scheduledAt) : null,\n        status: \"draft\",\n        mediaUrl: null,\n        minInterval: 1,\n        maxInterval: 10,\n        scheduleType: \"immediate\"\n      });\n\n      res.json(campaign);\n    } catch (error: any) {\n      console.error(\"Create bulk campaign error:\", error);\n      res.status(500).json({ error: error.message || \"Failed to create bulk campaign\" });\n    }\n  });\n\n  app.post(\"/api/bulk-campaigns/:campaignId/send\", async (req, res) => {\n    try {\n      const { campaignId } = req.params;\n      \n      const campaign = await storage.updateBulkMessageCampaign(campaignId, {\n        status: \"running\"\n      });\n\n      if (!campaign) {\n        return res.status(404).json({ error: \"Campaign not found\" });\n      }\n\n      // Get contact group members\n      const members = await storage.getContactGroupMembers(campaign.contactGroupId!);\n      let sentCount = 0;\n      let failedCount = 0;\n\n      // Send messages to all valid members\n      for (const member of members) {\n        if (member.status !== \"valid\") continue;\n        \n        try {\n          await whatsappService.sendMessage(member.phoneNumber, campaign.message);\n          sentCount++;\n          \n          // Add delay between messages (1-3 seconds)\n          await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));\n        } catch (error) {\n          console.error(`Failed to send message to ${member.phoneNumber}:`, error);\n          failedCount++;\n        }\n      }\n\n      // Update campaign status\n      await storage.updateBulkMessageCampaign(campaignId, {\n        status: \"completed\",\n        sentCount,\n        failedCount\n      });\n\n      res.json({\n        success: true,\n        sentCount,\n        failedCount,\n        totalMembers: members.filter(m => m.status === \"valid\").length\n      });\n\n    } catch (error: any) {\n      console.error(\"Send bulk campaign error:\", error);\n      \n      // Update campaign status to failed (if campaignId is available)\n      try {\n        const { campaignId } = req.params;\n        await storage.updateBulkMessageCampaign(campaignId, {\n          status: \"failed\"\n        });\n      } catch (updateError) {\n        console.error(\"Failed to update campaign status:\", updateError);\n      }\n      \n      res.status(500).json({ error: error.message || \"Failed to send bulk campaign\" });\n    }\n  });\n\n  // Enhanced Bulk Campaign Creation API\n  app.post(\"/api/campaigns/create\", upload.single('media'), async (req, res) => {\n    try {\n      // Transform FormData strings to appropriate types\n      const requestData = {\n        ...req.body,\n        minInterval: req.body.minInterval ? parseInt(req.body.minInterval) : 1,\n        maxInterval: req.body.maxInterval ? parseInt(req.body.maxInterval) : 10,\n        scheduleHours: req.body.scheduleHours ? JSON.parse(req.body.scheduleHours) : undefined,\n      };\n\n      // Debug logging\n      console.log(\"🔍 Raw request data:\", req.body);\n      console.log(\"🔍 Transformed request data:\", requestData);\n      \n      const validatedData = createCampaignSchema.parse(requestData);\n      \n      let mediaUrl = null;\n      let mediaType = null;\n      \n      // Handle media upload if provided\n      if (req.file) {\n        mediaUrl = `/uploads/${req.file.filename}`;\n        if (req.file.mimetype.startsWith('image/')) mediaType = 'image';\n        else if (req.file.mimetype.startsWith('video/')) mediaType = 'video';\n        else if (req.file.mimetype.startsWith('audio/')) mediaType = 'audio';\n        else mediaType = 'document';\n      }\n\n      // Determine total targets based on target type\n      let totalTargets = 0;\n      if (validatedData.targetType === \"contact_group\" && validatedData.contactGroupId) {\n        const group = await storage.getContactGroup(validatedData.contactGroupId);\n        if (!group) {\n          return res.status(404).json({ error: \"Contact group not found\" });\n        }\n        totalTargets = group.validContacts;\n      } else if (validatedData.targetType === \"local_contacts\") {\n        // Get count of all local WhatsApp contacts\n        const contacts = await whatsappService.getContacts();\n        totalTargets = contacts.length;\n      } else if (validatedData.targetType === \"whatsapp_group\" && validatedData.whatsappGroupId) {\n        // For WhatsApp groups, get the actual participant count\n        try {\n          const participants = await whatsappService.getGroupParticipants(validatedData.whatsappGroupId);\n          totalTargets = participants.length;\n          console.log(`🎯 WhatsApp group campaign will target ${totalTargets} participants`);\n        } catch (error) {\n          console.error(`Failed to get participant count for group ${validatedData.whatsappGroupId}:`, error);\n          totalTargets = 0;\n        }\n      }\n\n      // Create campaign with enhanced scheduling data\n      const campaignData = {\n        name: validatedData.name,\n        targetType: validatedData.targetType,\n        contactGroupId: validatedData.contactGroupId || null,\n        whatsappGroupId: validatedData.whatsappGroupId || null,\n        message: validatedData.message,\n        mediaUrl: mediaUrl || null,\n        mediaType: mediaType as any || null,\n        timePost: validatedData.timePost ? new Date(validatedData.timePost) : null,\n        minInterval: validatedData.minInterval,\n        maxInterval: validatedData.maxInterval,\n        scheduleType: validatedData.scheduleType,\n        scheduleHours: validatedData.scheduleHours ? JSON.stringify(validatedData.scheduleHours) : null,\n        status: \"draft\" as const,\n        totalTargets,\n        sentCount: 0,\n        failedCount: 0\n      };\n\n      console.log(\"🔍 Campaign data being inserted:\", campaignData);\n      const campaign = await storage.createBulkMessageCampaign(campaignData);\n\n      res.json({ \n        success: true, \n        campaign,\n        message: \"Campaign created successfully\" \n      });\n      \n    } catch (error: any) {\n      console.error(\"Create enhanced campaign error:\", error);\n      res.status(500).json({ error: error.message || \"Failed to create campaign\" });\n    }\n  });\n\n  // Enhanced Campaign Execution API\n  app.post(\"/api/campaigns/:campaignId/execute\", async (req, res) => {\n    try {\n      const { campaignId } = req.params;\n      \n      const campaign = await storage.updateBulkMessageCampaign(campaignId, {\n        status: \"running\",\n        lastExecuted: new Date()\n      });\n\n      if (!campaign) {\n        return res.status(404).json({ error: \"Campaign not found\" });\n      }\n\n      // Determine target list based on campaign type\n      let targets: Array<{id: string, name?: string}> = [];\n      \n      if (campaign.targetType === \"contact_group\" && campaign.contactGroupId) {\n        const members = await storage.getContactGroupMembers(campaign.contactGroupId);\n        targets = members\n          .filter(m => m.status === \"valid\")\n          .map(m => ({ id: m.phoneNumber, name: m.name || undefined }));\n      } else if (campaign.targetType === \"local_contacts\") {\n        const contacts = await whatsappService.getContacts();\n        targets = contacts.map(c => ({ id: c.id, name: c.name }));\n      } else if (campaign.targetType === \"whatsapp_group\" && campaign.whatsappGroupId) {\n        // Get all participants of the WhatsApp group and send to each individually\n        try {\n          const participants = await whatsappService.getGroupParticipants(campaign.whatsappGroupId);\n          targets = participants.map((participant: any) => ({\n            id: participant.id,\n            name: participant.name || participant.number || participant.id.split('@')[0]\n          }));\n          console.log(`🎯 Group campaign will target ${targets.length} individual participants`);\n        } catch (error) {\n          console.error(`Failed to get participants for group ${campaign.whatsappGroupId}:`, error);\n          // Fallback: empty targets array\n          targets = [];\n        }\n      }\n\n      // Execute campaign with intelligent scheduling\n      executeCampaignWithScheduling(campaign, targets);\n      \n      res.json({\n        success: true,\n        message: \"Campaign execution started\",\n        totalTargets: targets.length,\n        estimatedDuration: calculateEstimatedDuration(targets.length, campaign.minInterval, campaign.maxInterval)\n      });\n      \n    } catch (error: any) {\n      console.error(\"Execute campaign error:\", error);\n      res.status(500).json({ error: error.message || \"Failed to execute campaign\" });\n    }\n  });\n\n  // Campaign Control APIs\n  app.post(\"/api/campaigns/:campaignId/pause\", async (req, res) => {\n    try {\n      const { campaignId } = req.params;\n      const campaign = await storage.updateBulkMessageCampaign(campaignId, {\n        status: \"paused\"\n      });\n      \n      if (!campaign) {\n        return res.status(404).json({ error: \"Campaign not found\" });\n      }\n      \n      res.json({ success: true, message: \"Campaign paused successfully\" });\n    } catch (error: any) {\n      console.error(\"Pause campaign error:\", error);\n      res.status(500).json({ error: error.message || \"Failed to pause campaign\" });\n    }\n  });\n\n  app.post(\"/api/campaigns/:campaignId/resume\", async (req, res) => {\n    try {\n      const { campaignId } = req.params;\n      const campaign = await storage.updateBulkMessageCampaign(campaignId, {\n        status: \"running\"\n      });\n      \n      if (!campaign) {\n        return res.status(404).json({ error: \"Campaign not found\" });\n      }\n      \n      res.json({ success: true, message: \"Campaign resumed successfully\" });\n    } catch (error: any) {\n      console.error(\"Resume campaign error:\", error);\n      res.status(500).json({ error: error.message || \"Failed to resume campaign\" });\n    }\n  });\n\n  // Restart campaign\n  app.post(\"/api/campaigns/:campaignId/restart\", async (req, res) => {\n    try {\n      const { campaignId } = req.params;\n      \n      // Reset campaign status and counters\n      const campaign = await storage.updateBulkMessageCampaign(campaignId, {\n        status: \"draft\",\n        sentCount: 0,\n        failedCount: 0,\n        lastExecuted: null\n      });\n      \n      if (!campaign) {\n        return res.status(404).json({ error: \"Campaign not found\" });\n      }\n      \n      res.json({ success: true, message: \"Campaign restarted successfully\" });\n    } catch (error: any) {\n      console.error(\"Restart campaign error:\", error);\n      res.status(500).json({ error: error.message || \"Failed to restart campaign\" });\n    }\n  });\n\n  // Delete campaign\n  app.delete(\"/api/campaigns/:campaignId\", async (req, res) => {\n    try {\n      const { campaignId } = req.params;\n      \n      const success = await storage.deleteBulkMessageCampaign(campaignId);\n      \n      if (!success) {\n        return res.status(404).json({ error: \"Campaign not found\" });\n      }\n      \n      res.json({ success: true, message: \"Campaign deleted successfully\" });\n    } catch (error: any) {\n      console.error(\"Delete campaign error:\", error);\n      res.status(500).json({ error: error.message || \"Failed to delete campaign\" });\n    }\n  });\n\n  // Delete campaign API\n  app.delete(\"/api/campaigns/:campaignId\", async (req, res) => {\n    try {\n      const { campaignId } = req.params;\n      const success = await storage.deleteBulkMessageCampaign(campaignId);\n      \n      if (!success) {\n        return res.status(404).json({ error: \"Campaign not found\" });\n      }\n      \n      res.json({ success: true, message: \"Campaign deleted successfully\" });\n    } catch (error: any) {\n      console.error(\"Delete campaign error:\", error);\n      res.status(500).json({ error: error.message || \"Failed to delete campaign\" });\n    }\n  });\n\n  // Get campaign targets for preview\n  app.get(\"/api/campaigns/targets\", async (req, res) => {\n    try {\n      const { targetType, contactGroupId, whatsappGroupId } = req.query;\n      \n      let targets: Array<{id: string, name?: string, count?: number}> = [];\n      \n      if (targetType === \"contact_group\" && contactGroupId) {\n        const group = await storage.getContactGroup(contactGroupId as string);\n        if (group) {\n          targets.push({\n            id: group.id,\n            name: group.name,\n            count: group.validContacts\n          });\n        }\n      } else if (targetType === \"local_contacts\") {\n        const contacts = await whatsappService.getContacts();\n        targets.push({\n          id: \"local_contacts\",\n          name: \"All Local Contacts\",\n          count: contacts.length\n        });\n      } else if (targetType === \"whatsapp_group\") {\n        const groups = await whatsappService.getGroups();\n        targets = groups.map(g => ({\n          id: g.id,\n          name: g.name,\n          count: g.participants?.length || 0\n        }));\n      }\n      \n      res.json(targets);\n    } catch (error: any) {\n      console.error(\"Get campaign targets error:\", error);\n      res.status(500).json({ error: error.message || \"Failed to get targets\" });\n    }\n  });\n\n  // Helper functions for campaign execution\n  async function executeCampaignWithScheduling(campaign: any, targets: Array<{id: string, name?: string}>) {\n    const { scheduleType, timePost, minInterval, maxInterval, scheduleHours } = campaign;\n    \n    // Determine when to start sending\n    let startTime = new Date();\n    \n    if (scheduleType === \"scheduled\" && timePost) {\n      startTime = new Date(timePost);\n    } else if (scheduleType === \"daytime\") {\n      startTime = getNextScheduledTime([6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]);\n    } else if (scheduleType === \"nighttime\") {\n      startTime = getNextScheduledTime([19, 20, 21, 22, 23, 0, 1, 2, 3, 4, 5]);\n    } else if (scheduleType === \"odd_hours\") {\n      startTime = getNextScheduledTime([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23]);\n    } else if (scheduleType === \"even_hours\") {\n      startTime = getNextScheduledTime([0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22]);\n    }\n    \n    // Execute campaign in background\n    setTimeout(async () => {\n      await executeCampaignMessages(campaign, targets);\n    }, Math.max(0, startTime.getTime() - Date.now()));\n  }\n\n  function getNextScheduledTime(allowedHours: number[]): Date {\n    const now = new Date();\n    const currentHour = now.getHours();\n    \n    // Find next allowed hour today\n    const nextHourToday = allowedHours.find(hour => hour > currentHour);\n    \n    if (nextHourToday !== undefined) {\n      const nextTime = new Date(now);\n      nextTime.setHours(nextHourToday, 0, 0, 0);\n      return nextTime;\n    }\n    \n    // No valid hour today, use first hour tomorrow\n    const tomorrow = new Date(now);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    tomorrow.setHours(allowedHours[0], 0, 0, 0);\n    return tomorrow;\n  }\n\n  async function executeCampaignMessages(campaign: any, targets: Array<{id: string, name?: string}>) {\n    let sentCount = 0;\n    let failedCount = 0;\n    \n    for (const target of targets) {\n      try {\n        // Check if campaign is still running (could be paused)\n        const currentCampaign = await storage.getBulkMessageCampaigns();\n        const activeCampaign = currentCampaign.find(c => c.id === campaign.id);\n        \n        if (!activeCampaign || activeCampaign.status !== \"running\") {\n          console.log(`Campaign ${campaign.id} stopped or paused`);\n          break;\n        }\n        \n        // Send message\n        if (campaign.mediaUrl) {\n          // For media messages, extract filename from URL\n          const fileName = campaign.mediaUrl.split('/').pop() || 'media';\n          await whatsappService.sendMediaMessage(target.id, campaign.message, campaign.mediaUrl, fileName);\n        } else {\n          // For text messages, use the same method for both individual and group chats\n          await whatsappService.sendMessage(target.id, campaign.message);\n        }\n        \n        sentCount++;\n        \n        // Update campaign progress in database and broadcast to clients\n        await storage.updateBulkMessageCampaign(campaign.id, {\n          sentCount,\n          failedCount\n        });\n        \n        // Broadcast progress update via WebSocket\n        try {\n          const wss = (global as any).wss;\n          if (wss && wss.clients) {\n            const progressMessage = JSON.stringify({ \n              type: 'campaign_progress_update', \n              data: { \n                campaignId: campaign.id, \n                sentCount, \n                failedCount,\n                totalTargets: targets.length \n              } \n            });\n            wss.clients.forEach((client: any) => {\n              if (client.readyState === 1) {\n                client.send(progressMessage);\n              }\n            });\n          }\n        } catch (error) {\n          console.error('Failed to broadcast campaign progress:', error);\n        }\n        \n        // Random interval between messages\n        const interval = getRandomInterval(campaign.minInterval * 1000, campaign.maxInterval * 1000);\n        await new Promise(resolve => setTimeout(resolve, interval));\n        \n      } catch (error) {\n        console.error(`Failed to send message to ${target.id}:`, error);\n        failedCount++;\n      }\n    }\n    \n    // Update final campaign status\n    await storage.updateBulkMessageCampaign(campaign.id, {\n      status: \"completed\",\n      sentCount,\n      failedCount\n    });\n  }\n\n  function getRandomInterval(min: number, max: number): number {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  function calculateEstimatedDuration(targetCount: number, minInterval: number, maxInterval: number): string {\n    const avgInterval = (minInterval + maxInterval) / 2;\n    const totalSeconds = targetCount * avgInterval;\n    const hours = Math.floor(totalSeconds / 3600);\n    const minutes = Math.floor((totalSeconds % 3600) / 60);\n    \n    if (hours > 0) {\n      return `${hours}h ${minutes}m`;\n    } else {\n      return `${minutes}m`;\n    }\n  }\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":74827},"server/storage.ts":{"content":"import { \n  type User, type InsertUser, \n  type WhatsappSession, type InsertWhatsappSession,\n  type ContactGroup, type InsertContactGroup,\n  type ContactGroupMember, type InsertContactGroupMember,\n  type BulkMessageCampaign, type InsertBulkMessageCampaign,\n  users, whatsappSessions, contactGroups, contactGroupMembers, bulkMessageCampaigns\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { db } from \"./db\";\nimport { eq, and, desc, sql, inArray } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Authentication methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  authenticateUser(usernameOrEmail: string, password: string): Promise<User | null>;\n  \n  // WhatsApp session methods\n  getActiveSession(): Promise<WhatsappSession | undefined>;\n  getActiveSessions(): Promise<WhatsappSession[]>;\n  saveSession(session: InsertWhatsappSession): Promise<WhatsappSession>;\n  createSession(session: InsertWhatsappSession): Promise<WhatsappSession>;\n  updateSession(id: string, updates: Partial<WhatsappSession>): Promise<WhatsappSession | undefined>;\n  deactivateSession(id: string): Promise<void>;\n  clearAllSessions(): Promise<void>;\n  \n  // Contact group methods\n  getContactGroups(): Promise<ContactGroup[]>;\n  getContactGroup(id: string): Promise<ContactGroup | undefined>;\n  createContactGroup(group: InsertContactGroup): Promise<ContactGroup>;\n  updateContactGroup(id: string, updates: Partial<ContactGroup>): Promise<ContactGroup | undefined>;\n  deleteContactGroup(id: string): Promise<void>;\n  \n  // Contact group member methods\n  getContactGroupMembers(groupId: string): Promise<ContactGroupMember[]>;\n  createContactGroupMember(member: InsertContactGroupMember): Promise<ContactGroupMember>;\n  createContactGroupMembersBulk(members: InsertContactGroupMember[]): Promise<ContactGroupMember[]>;\n  updateContactGroupMember(memberId: string, updates: Partial<ContactGroupMember>): Promise<ContactGroupMember | undefined>;\n  deleteContactGroupMembers(groupId: string): Promise<void>;\n  deleteContactGroupMember(memberId: string): Promise<void>;\n  deleteContactGroupMembersBulk(memberIds: string[]): Promise<void>;\n  \n  // Bulk message campaign methods\n  getBulkMessageCampaigns(): Promise<BulkMessageCampaign[]>;\n  createBulkMessageCampaign(campaign: Partial<BulkMessageCampaign>): Promise<BulkMessageCampaign>;\n  updateBulkMessageCampaign(id: string, updates: Partial<BulkMessageCampaign>): Promise<BulkMessageCampaign | undefined>;\n  deleteBulkMessageCampaign(id: string): Promise<boolean>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private whatsappSessions: Map<string, WhatsappSession>;\n  private contactGroups: Map<string, ContactGroup>;\n  private contactGroupMembers: Map<string, ContactGroupMember>;\n  private bulkMessageCampaigns: Map<string, BulkMessageCampaign>;\n\n  constructor() {\n    this.users = new Map();\n    this.whatsappSessions = new Map();\n    this.contactGroups = new Map();\n    this.contactGroupMembers = new Map();\n    this.bulkMessageCampaigns = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.email === email,\n    );\n  }\n\n  async authenticateUser(usernameOrEmail: string, password: string): Promise<User | null> {\n    const user = Array.from(this.users.values()).find(\n      (user) => (user.username === usernameOrEmail || user.email === usernameOrEmail) && user.password === password\n    );\n    return user || null;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      id,\n      phone: insertUser.phone || null,\n      whatsappNumber: insertUser.whatsappNumber || null,\n      isEmailVerified: false,\n      createdAt: new Date(),\n\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getActiveSession(): Promise<WhatsappSession | undefined> {\n    return Array.from(this.whatsappSessions.values()).find(\n      (session) => session.isActive\n    );\n  }\n\n  async getActiveSessions(): Promise<WhatsappSession[]> {\n    return Array.from(this.whatsappSessions.values()).filter(\n      (session) => session.isActive\n    );\n  }\n\n  async saveSession(insertSession: InsertWhatsappSession): Promise<WhatsappSession> {\n    return this.createSession(insertSession);\n  }\n\n  async createSession(insertSession: InsertWhatsappSession): Promise<WhatsappSession> {\n    const id = randomUUID();\n    const session: WhatsappSession = { \n      ...insertSession, \n      id,\n      isActive: true,\n      sessionData: insertSession.sessionData || null\n    };\n    this.whatsappSessions.set(id, session);\n    return session;\n  }\n\n  async updateSession(id: string, updates: Partial<WhatsappSession>): Promise<WhatsappSession | undefined> {\n    const session = this.whatsappSessions.get(id);\n    if (!session) return undefined;\n    \n    const updatedSession = { ...session, ...updates };\n    this.whatsappSessions.set(id, updatedSession);\n    return updatedSession;\n  }\n\n  async deactivateSession(id: string): Promise<void> {\n    const session = this.whatsappSessions.get(id);\n    if (session) {\n      session.isActive = false;\n      this.whatsappSessions.set(id, session);\n    }\n  }\n\n  async clearAllSessions(): Promise<void> {\n    this.whatsappSessions.clear();\n  }\n\n  // Contact group methods\n  async getContactGroups(): Promise<ContactGroup[]> {\n    return Array.from(this.contactGroups.values());\n  }\n\n  async getContactGroup(id: string): Promise<ContactGroup | undefined> {\n    return this.contactGroups.get(id);\n  }\n\n  async createContactGroup(insertGroup: InsertContactGroup): Promise<ContactGroup> {\n    const id = randomUUID();\n    const group: ContactGroup = { \n      ...insertGroup, \n      id,\n      description: insertGroup.description || null,\n      totalContacts: 0,\n      validContacts: 0,\n      invalidContacts: 0,\n      duplicateContacts: 0,\n      createdAt: new Date()\n    };\n    this.contactGroups.set(id, group);\n    return group;\n  }\n\n  async updateContactGroup(id: string, updates: Partial<ContactGroup>): Promise<ContactGroup | undefined> {\n    const group = this.contactGroups.get(id);\n    if (!group) return undefined;\n    \n    const updatedGroup = { ...group, ...updates };\n    this.contactGroups.set(id, updatedGroup);\n    return updatedGroup;\n  }\n\n  async deleteContactGroup(id: string): Promise<void> {\n    this.contactGroups.delete(id);\n    // Also delete all members\n    const members = Array.from(this.contactGroupMembers.values());\n    members.forEach(member => {\n      if (member.groupId === id) {\n        this.contactGroupMembers.delete(member.id);\n      }\n    });\n  }\n\n  // Contact group member methods\n  async getContactGroupMembers(groupId: string): Promise<ContactGroupMember[]> {\n    return Array.from(this.contactGroupMembers.values())\n      .filter(member => member.groupId === groupId);\n  }\n\n  async createContactGroupMember(insertMember: InsertContactGroupMember): Promise<ContactGroupMember> {\n    const id = randomUUID();\n    const member: ContactGroupMember = { \n      ...insertMember, \n      id,\n      name: insertMember.name || null,\n      status: insertMember.status || \"valid\",\n      createdAt: new Date()\n    };\n    this.contactGroupMembers.set(id, member);\n    return member;\n  }\n\n  async deleteContactGroupMembers(groupId: string): Promise<void> {\n    const members = Array.from(this.contactGroupMembers.values());\n    members.forEach(member => {\n      if (member.groupId === groupId) {\n        this.contactGroupMembers.delete(member.id);\n      }\n    });\n  }\n\n  async deleteContactGroupMember(memberId: string): Promise<void> {\n    this.contactGroupMembers.delete(memberId);\n  }\n\n  async createContactGroupMembersBulk(insertMembers: InsertContactGroupMember[]): Promise<ContactGroupMember[]> {\n    const members: ContactGroupMember[] = [];\n    insertMembers.forEach(insertMember => {\n      const id = randomUUID();\n      const member: ContactGroupMember = { \n        ...insertMember, \n        id,\n        name: insertMember.name || null,\n        status: insertMember.status || \"valid\",\n        createdAt: new Date()\n      };\n      this.contactGroupMembers.set(id, member);\n      members.push(member);\n    });\n    return members;\n  }\n\n  async updateContactGroupMember(memberId: string, updates: Partial<ContactGroupMember>): Promise<ContactGroupMember | undefined> {\n    const member = this.contactGroupMembers.get(memberId);\n    if (!member) return undefined;\n    \n    const updatedMember = { ...member, ...updates };\n    this.contactGroupMembers.set(memberId, updatedMember);\n    return updatedMember;\n  }\n\n  async deleteContactGroupMembersBulk(memberIds: string[]): Promise<void> {\n    memberIds.forEach(memberId => {\n      this.contactGroupMembers.delete(memberId);\n    });\n  }\n\n  // Bulk message campaign methods\n  async getBulkMessageCampaigns(): Promise<BulkMessageCampaign[]> {\n    return Array.from(this.bulkMessageCampaigns.values());\n  }\n\n  async createBulkMessageCampaign(insertCampaign: Partial<BulkMessageCampaign>): Promise<BulkMessageCampaign> {\n    const id = randomUUID();\n    const campaign: BulkMessageCampaign = { \n      ...insertCampaign, \n      id,\n      name: insertCampaign.name || \"\",\n      targetType: insertCampaign.targetType || \"contact_group\",\n      message: insertCampaign.message || \"\",\n      status: insertCampaign.status || \"draft\",\n      mediaUrl: insertCampaign.mediaUrl || null,\n      mediaType: insertCampaign.mediaType || null,\n      timePost: insertCampaign.timePost || null,\n      contactGroupId: insertCampaign.contactGroupId || null,\n      whatsappGroupId: insertCampaign.whatsappGroupId || null,\n      scheduleHours: insertCampaign.scheduleHours || null,\n      minInterval: insertCampaign.minInterval || 1,\n      maxInterval: insertCampaign.maxInterval || 10,\n      scheduleType: insertCampaign.scheduleType || \"immediate\",\n      totalTargets: insertCampaign.totalTargets || 0,\n      lastExecuted: null,\n      sentCount: insertCampaign.sentCount || 0,\n      failedCount: insertCampaign.failedCount || 0,\n      createdAt: new Date()\n    };\n    this.bulkMessageCampaigns.set(id, campaign);\n    return campaign;\n  }\n\n  async updateBulkMessageCampaign(id: string, updates: Partial<BulkMessageCampaign>): Promise<BulkMessageCampaign | undefined> {\n    const campaign = this.bulkMessageCampaigns.get(id);\n    if (!campaign) return undefined;\n    \n    const updatedCampaign = { ...campaign, ...updates };\n    this.bulkMessageCampaigns.set(id, updatedCampaign);\n    return updatedCampaign;\n  }\n\n  async deleteBulkMessageCampaign(id: string): Promise<boolean> {\n    return this.bulkMessageCampaigns.delete(id);\n  }\n}\n\n// Database storage implementation\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async authenticateUser(usernameOrEmail: string, password: string): Promise<User | null> {\n    const [user] = await db.select().from(users).where(\n      and(\n        eq(users.password, password),\n        // Check if the identifier matches either username or email\n        usernameOrEmail.includes('@') \n          ? eq(users.email, usernameOrEmail)\n          : eq(users.username, usernameOrEmail)\n      )\n    );\n    return user || null;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async getActiveSession(): Promise<WhatsappSession | undefined> {\n    const [session] = await db\n      .select()\n      .from(whatsappSessions)\n      .where(eq(whatsappSessions.isActive, true));\n    return session || undefined;\n  }\n\n  async getActiveSessions(): Promise<WhatsappSession[]> {\n    return await db\n      .select()\n      .from(whatsappSessions)\n      .where(eq(whatsappSessions.isActive, true));\n  }\n\n  async saveSession(insertSession: InsertWhatsappSession): Promise<WhatsappSession> {\n    return this.createSession(insertSession);\n  }\n\n  async createSession(insertSession: InsertWhatsappSession): Promise<WhatsappSession> {\n    const [session] = await db\n      .insert(whatsappSessions)\n      .values(insertSession)\n      .returning();\n    return session;\n  }\n\n  async updateSession(id: string, updates: Partial<WhatsappSession>): Promise<WhatsappSession | undefined> {\n    const [session] = await db\n      .update(whatsappSessions)\n      .set(updates)\n      .where(eq(whatsappSessions.id, id))\n      .returning();\n    return session || undefined;\n  }\n\n  async deactivateSession(id: string): Promise<void> {\n    await db\n      .update(whatsappSessions)\n      .set({ isActive: false })\n      .where(eq(whatsappSessions.id, id));\n  }\n\n  async clearAllSessions(): Promise<void> {\n    await db\n      .update(whatsappSessions)\n      .set({ isActive: false })\n      .where(eq(whatsappSessions.isActive, true));\n  }\n\n  async getContactGroups(): Promise<ContactGroup[]> {\n    return await db.select().from(contactGroups);\n  }\n\n  async getContactGroup(id: string): Promise<ContactGroup | undefined> {\n    const [group] = await db\n      .select()\n      .from(contactGroups)\n      .where(eq(contactGroups.id, id));\n    return group || undefined;\n  }\n\n  async createContactGroup(insertGroup: InsertContactGroup): Promise<ContactGroup> {\n    const [group] = await db\n      .insert(contactGroups)\n      .values(insertGroup)\n      .returning();\n    return group;\n  }\n\n  async updateContactGroup(id: string, updates: Partial<ContactGroup>): Promise<ContactGroup | undefined> {\n    const [group] = await db\n      .update(contactGroups)\n      .set(updates)\n      .where(eq(contactGroups.id, id))\n      .returning();\n    return group || undefined;\n  }\n\n  async deleteContactGroup(id: string): Promise<void> {\n    await db.delete(contactGroups).where(eq(contactGroups.id, id));\n  }\n\n  async getContactGroupMembers(groupId: string): Promise<ContactGroupMember[]> {\n    return await db\n      .select()\n      .from(contactGroupMembers)\n      .where(eq(contactGroupMembers.groupId, groupId));\n  }\n\n  async createContactGroupMember(insertMember: InsertContactGroupMember): Promise<ContactGroupMember> {\n    const [member] = await db\n      .insert(contactGroupMembers)\n      .values(insertMember)\n      .returning();\n    return member;\n  }\n\n  async createContactGroupMembersBulk(insertMembers: InsertContactGroupMember[]): Promise<ContactGroupMember[]> {\n    if (insertMembers.length === 0) return [];\n    return await db\n      .insert(contactGroupMembers)\n      .values(insertMembers)\n      .returning();\n  }\n\n  async deleteContactGroupMembers(groupId: string): Promise<void> {\n    await db\n      .delete(contactGroupMembers)\n      .where(eq(contactGroupMembers.groupId, groupId));\n  }\n\n  async updateContactGroupMember(memberId: string, updates: Partial<ContactGroupMember>): Promise<ContactGroupMember | undefined> {\n    const [updatedMember] = await db\n      .update(contactGroupMembers)\n      .set(updates)\n      .where(eq(contactGroupMembers.id, memberId))\n      .returning();\n    \n    return updatedMember;\n  }\n\n  async deleteContactGroupMember(memberId: string): Promise<void> {\n    await db\n      .delete(contactGroupMembers)\n      .where(eq(contactGroupMembers.id, memberId));\n  }\n\n  async deleteContactGroupMembersBulk(memberIds: string[]): Promise<void> {\n    if (memberIds.length === 0) return;\n    await db\n      .delete(contactGroupMembers)\n      .where(inArray(contactGroupMembers.id, memberIds));\n  }\n\n  async getBulkMessageCampaigns(): Promise<BulkMessageCampaign[]> {\n    return await db.select().from(bulkMessageCampaigns);\n  }\n\n  async createBulkMessageCampaign(insertCampaign: Partial<BulkMessageCampaign>): Promise<BulkMessageCampaign> {\n    // Ensure required fields are present with defaults\n    const campaignData = {\n      name: insertCampaign.name || \"Untitled Campaign\",\n      targetType: insertCampaign.targetType || \"contact_group\",\n      message: insertCampaign.message || \"\",\n      status: insertCampaign.status || \"draft\",\n      minInterval: insertCampaign.minInterval || 1,\n      maxInterval: insertCampaign.maxInterval || 10,\n      scheduleType: insertCampaign.scheduleType || \"immediate\",\n      totalTargets: insertCampaign.totalTargets || 0,\n      sentCount: insertCampaign.sentCount || 0,\n      failedCount: insertCampaign.failedCount || 0,\n      ...insertCampaign\n    };\n\n    const [campaign] = await db\n      .insert(bulkMessageCampaigns)\n      .values(campaignData)\n      .returning();\n    return campaign;\n  }\n\n  async updateBulkMessageCampaign(id: string, updates: Partial<BulkMessageCampaign>): Promise<BulkMessageCampaign | undefined> {\n    const [campaign] = await db\n      .update(bulkMessageCampaigns)\n      .set(updates)\n      .where(eq(bulkMessageCampaigns.id, id))\n      .returning();\n    return campaign || undefined;\n  }\n\n  async deleteBulkMessageCampaign(id: string): Promise<boolean> {\n    const result = await db\n      .delete(bulkMessageCampaigns)\n      .where(eq(bulkMessageCampaigns.id, id));\n    return result.rowCount !== null && result.rowCount > 0;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":18032},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, boolean, integer, jsonb, index } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Sessions table for persistent authentication\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  fullName: text(\"full_name\").notNull(),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  phone: text(\"phone\"),\n  whatsappNumber: text(\"whatsapp_number\"),\n  password: text(\"password\").notNull(),\n  isEmailVerified: boolean(\"is_email_verified\").default(false),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const whatsappSessions = pgTable(\"whatsapp_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: text(\"user_id\").notNull(),\n  userName: text(\"user_name\").notNull(),\n  loginTime: timestamp(\"login_time\").notNull(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  sessionData: text(\"session_data\"),\n});\n\nexport const whatsappAccounts = pgTable(\"whatsapp_accounts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  phone: text(\"phone\").notNull(),\n  isActive: boolean(\"is_active\").default(false).notNull(),\n  loginTime: timestamp(\"login_time\").notNull(),\n  sessionData: text(\"session_data\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const contactGroups = pgTable(\"contact_groups\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  totalContacts: integer(\"total_contacts\").default(0).notNull(),\n  validContacts: integer(\"valid_contacts\").default(0).notNull(),\n  invalidContacts: integer(\"invalid_contacts\").default(0).notNull(),\n  duplicateContacts: integer(\"duplicate_contacts\").default(0).notNull(),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const contactGroupMembers = pgTable(\"contact_group_members\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  groupId: varchar(\"group_id\").notNull().references(() => contactGroups.id, { onDelete: \"cascade\" }),\n  phoneNumber: text(\"phone_number\").notNull(),\n  name: text(\"name\"),\n  status: varchar(\"status\", { enum: [\"valid\", \"invalid\", \"duplicate\"] }).default(\"valid\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const bulkMessageCampaigns = pgTable(\"bulk_message_campaigns\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  // Target configuration - one of these will be set\n  targetType: varchar(\"target_type\", { enum: [\"contact_group\", \"local_contacts\", \"whatsapp_group\"] }).notNull(),\n  contactGroupId: varchar(\"contact_group_id\").references(() => contactGroups.id),\n  whatsappGroupId: text(\"whatsapp_group_id\"), // For WhatsApp groups\n  // Message content\n  message: text(\"message\").notNull(),\n  mediaUrl: text(\"media_url\"),\n  mediaType: varchar(\"media_type\", { enum: [\"image\", \"video\", \"document\", \"audio\"] }),\n  // Scheduling configuration\n  timePost: timestamp(\"time_post\"),\n  minInterval: integer(\"min_interval\").default(1).notNull(), // seconds (1-3600)\n  maxInterval: integer(\"max_interval\").default(10).notNull(), // seconds (1-3600)\n  scheduleType: varchar(\"schedule_type\", { enum: [\"immediate\", \"scheduled\", \"daytime\", \"nighttime\", \"odd_hours\", \"even_hours\"] }).default(\"immediate\").notNull(),\n  scheduleHours: text(\"schedule_hours\"), // JSON array of hours (0-23) for custom scheduling\n  // Status and tracking\n  status: varchar(\"status\", { enum: [\"draft\", \"scheduled\", \"running\", \"paused\", \"completed\", \"failed\"] }).default(\"draft\").notNull(),\n  sentCount: integer(\"sent_count\").default(0).notNull(),\n  failedCount: integer(\"failed_count\").default(0).notNull(),\n  totalTargets: integer(\"total_targets\").default(0).notNull(),\n  lastExecuted: timestamp(\"last_executed\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\n// Campaign execution logs for tracking message sending progress\nexport const campaignExecutions = pgTable(\"campaign_executions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  campaignId: varchar(\"campaign_id\").notNull().references(() => bulkMessageCampaigns.id, { onDelete: \"cascade\" }),\n  targetId: text(\"target_id\").notNull(), // Phone number or group ID\n  targetName: text(\"target_name\"),\n  status: varchar(\"status\", { enum: [\"pending\", \"sent\", \"failed\", \"skipped\"] }).default(\"pending\").notNull(),\n  errorMessage: text(\"error_message\"),\n  sentAt: timestamp(\"sent_at\"),\n  scheduledFor: timestamp(\"scheduled_for\"),\n  retryCount: integer(\"retry_count\").default(0).notNull(),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  isEmailVerified: true,\n});\n\nexport const loginSchema = z.object({\n  usernameOrEmail: z.string().min(1, \"Username or Email is required\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  rememberMe: z.boolean().optional(),\n});\n\nexport const signupSchema = z.object({\n  fullName: z.string().min(1, \"Full name is required\"),\n  username: z.string().min(1, \"Username is required\"),\n  email: z.string().min(1, \"Email is required\").email(\"Invalid email format\"),\n  phone: z.string().min(1, \"Phone number is required\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string().min(1, \"Please confirm your password\"),\n  acceptTerms: z.boolean().refine(val => val === true, \"You must accept the terms and conditions\"),\n}).refine(data => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\nexport const insertWhatsappSessionSchema = createInsertSchema(whatsappSessions).omit({\n  id: true,\n});\n\nexport const insertWhatsappAccountSchema = createInsertSchema(whatsappAccounts).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertContactGroupSchema = createInsertSchema(contactGroups).omit({\n  id: true,\n  createdAt: true,\n  totalContacts: true,\n  validContacts: true,\n  invalidContacts: true,\n  duplicateContacts: true,\n});\n\nexport const insertContactGroupMemberSchema = createInsertSchema(contactGroupMembers).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertBulkMessageCampaignSchema = createInsertSchema(bulkMessageCampaigns).omit({\n  id: true,\n  createdAt: true,\n  sentCount: true,\n  failedCount: true,\n  totalTargets: true,\n  lastExecuted: true,\n});\n\nexport const insertCampaignExecutionSchema = createInsertSchema(campaignExecutions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type LoginRequest = z.infer<typeof loginSchema>;\nexport type SignupRequest = z.infer<typeof signupSchema>;\nexport type WhatsappSession = typeof whatsappSessions.$inferSelect;\nexport type InsertWhatsappSession = z.infer<typeof insertWhatsappSessionSchema>;\nexport type WhatsappAccount = typeof whatsappAccounts.$inferSelect;\nexport type InsertWhatsappAccount = z.infer<typeof insertWhatsappAccountSchema>;\nexport type ContactGroup = typeof contactGroups.$inferSelect;\nexport type InsertContactGroup = z.infer<typeof insertContactGroupSchema>;\nexport type ContactGroupMember = typeof contactGroupMembers.$inferSelect;\nexport type InsertContactGroupMember = z.infer<typeof insertContactGroupMemberSchema>;\nexport type BulkMessageCampaign = typeof bulkMessageCampaigns.$inferSelect;\nexport type InsertBulkMessageCampaign = z.infer<typeof insertBulkMessageCampaignSchema>;\nexport type CampaignExecution = typeof campaignExecutions.$inferSelect;\nexport type InsertCampaignExecution = z.infer<typeof insertCampaignExecutionSchema>;\n\n// API Response types\nexport const sessionInfoSchema = z.object({\n  isAuthenticated: z.boolean(),\n  user: z.object({\n    name: z.string(),\n    loginTime: z.string(),\n  }).optional(),\n});\n\nexport const qrResponseSchema = z.object({\n  qr: z.string().optional(),\n  error: z.string().optional(),\n});\n\n\n\nexport const sendMessageSchema = z.object({\n  phoneNumber: z.string().min(1, \"Phone number is required\"),\n  message: z.string().min(1, \"Message is required\").max(1000, \"Message too long\"),\n});\n\nexport const sendMediaMessageSchema = z.object({\n  phoneNumber: z.string().min(1, \"Phone number is required\"),\n  message: z.string().max(1000, \"Message too long\").optional(),\n  // Note: media file will be handled separately as FormData\n});\n\nexport const bulkMessageSchema = z.object({\n  campaignName: z.string().min(1, \"Campaign name is required\"),\n  contactGroupId: z.string().min(1, \"Contact group is required\"),\n  message: z.string().min(1, \"Message is required\").max(1000, \"Message too long\"),\n  scheduledAt: z.string().optional(),\n});\n\n// Enhanced bulk message campaign schema\nexport const createCampaignSchema = z.object({\n  name: z.string().min(1, \"Campaign name is required\"),\n  targetType: z.enum([\"contact_group\", \"local_contacts\", \"whatsapp_group\"]),\n  contactGroupId: z.string().optional().transform(val => val || undefined),\n  whatsappGroupId: z.string().optional().transform(val => val || undefined),\n  message: z.string().min(1, \"Message is required\").max(1000, \"Message too long\"),\n  mediaUrl: z.string().optional(),\n  mediaType: z.enum([\"image\", \"video\", \"document\", \"audio\"]).optional(),\n  timePost: z.string().optional().transform(val => val || undefined), // ISO string\n  minInterval: z.number().min(1).max(3600).default(1),\n  maxInterval: z.number().min(1).max(3600).default(10),\n  scheduleType: z.enum([\"immediate\", \"scheduled\", \"daytime\", \"nighttime\", \"odd_hours\", \"even_hours\"]).default(\"immediate\"),\n  scheduleHours: z.array(z.number().optional()).optional(), // Array of hours (0-23)\n}).refine(data => {\n  // More detailed validation with error messages\n  console.log(\"🔍 Campaign validation data:\", data);\n  \n  if (data.targetType === \"contact_group\" && !data.contactGroupId) {\n    console.log(\"❌ Validation failed: contact_group requires contactGroupId\");\n    return false;\n  }\n  if (data.targetType === \"whatsapp_group\" && !data.whatsappGroupId) {\n    console.log(\"❌ Validation failed: whatsapp_group requires whatsappGroupId\");\n    return false;\n  }\n  if (data.scheduleType === \"scheduled\" && !data.timePost) {\n    console.log(\"❌ Validation failed: scheduled requires timePost\");\n    return false;\n  }\n  if (data.minInterval > data.maxInterval) {\n    console.log(\"❌ Validation failed: minInterval > maxInterval\");\n    return false;\n  }\n  \n  console.log(\"✅ Campaign validation passed\");\n  return true;\n}, {\n  message: \"Invalid campaign configuration\"\n});\n\nexport type SessionInfo = z.infer<typeof sessionInfoSchema>;\nexport type QRResponse = z.infer<typeof qrResponseSchema>;\nexport type SendMessageRequest = z.infer<typeof sendMessageSchema>;\nexport type SendMediaMessageRequest = z.infer<typeof sendMediaMessageSchema>;\nexport type BulkMessageRequest = z.infer<typeof bulkMessageSchema>;\nexport type CreateCampaignRequest = z.infer<typeof createCampaignSchema>;\n","size_bytes":11505},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Landing from \"@/pages/landing\";\nimport Login from \"@/pages/login\";\nimport Signup from \"@/pages/signup\";\nimport Features from \"@/pages/features\";\nimport Pricing from \"@/pages/pricing\";\nimport Blogs from \"@/pages/blogs\";\nimport Terms from \"@/pages/terms\";\nimport ForgotPassword from \"@/pages/forgot-password\";\n\nimport Dashboard from \"@/pages/dashboard\";\nimport ChatPage from \"@/pages/chat\";\nimport GroupContacts from \"@/pages/group-contacts\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Landing} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/signup\" component={Signup} />\n      <Route path=\"/features\" component={Features} />\n      <Route path=\"/pricing\" component={Pricing} />\n      <Route path=\"/blogs\" component={Blogs} />\n      <Route path=\"/terms\" component={Terms} />\n      <Route path=\"/forgot-password\" component={ForgotPassword} />\n\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route path=\"/chat/:contactId\" component={ChatPage} />\n      <Route path=\"/group-contacts/:groupId\" component={GroupContacts} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1676},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&family=Poppins:wght@300;400;500;600;700;800&display=swap');\n@import url('https://fonts.googleapis.com/css2?family=Noto+Color+Emoji&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Disable text selection globally */\n* {\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n}\n\n/* Allow text selection for input fields and editable content */\ninput, textarea, [contenteditable=\"true\"] {\n  -webkit-user-select: text;\n  -moz-user-select: text;\n  -ms-user-select: text;\n  user-select: text;\n}\n\n:root {\n  --background: hsl(0, 0%, 98%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222.2, 47.4%, 11.2%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --ring: hsl(207, 90%, 54%);\n  --radius: 0.5rem;\n  --success: hsl(142, 71%, 45%);\n  --warning: hsl(38, 92%, 50%);\n  --error: hsl(0, 84%, 60%);\n  --surface: hsl(0, 0%, 100%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n  --success: hsl(142, 71%, 45%);\n  --warning: hsl(38, 92%, 50%);\n  --error: hsl(0, 84%, 60%);\n  --surface: hsl(240, 10%, 3.9%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n    font-family: Inter, system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";\n  }\n\n  body {\n    @apply font-inter antialiased bg-background text-foreground;\n  }\n\n  .animate-fade-in {\n    animation: fadeIn 0.5s ease-in-out;\n  }\n\n  .animate-slide-up {\n    animation: slideUp 0.3s ease-out;\n  }\n\n  .animate-pulse-slow {\n    animation: pulse 2s infinite;\n  }\n\n  /* Emoji and Unicode support */\n  .emoji, .message-content, .chat-message, .contact-name {\n    font-family: Inter, system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";\n    font-feature-settings: \"liga\" on, \"calt\" on;\n    -webkit-font-feature-settings: \"liga\" on, \"calt\" on;\n    text-rendering: optimizeLegibility;\n  }\n\n  /* Force emoji rendering */\n  .emoji {\n    font-variant-emoji: emoji;\n    font-style: normal;\n    font-weight: normal;\n  }\n}\n\n@keyframes fadeIn {\n  from { opacity: 0; }\n  to { opacity: 1; }\n}\n\n@keyframes slideUp {\n  from { transform: translateY(20px); opacity: 0; }\n  to { transform: translateY(0); opacity: 1; }\n}\n","size_bytes":3720},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/whatsapp.ts":{"content":"import pkg from 'whatsapp-web.js';\nconst { Client, LocalAuth, MessageMedia } = pkg as any;\nimport QRCode from 'qrcode';\nimport qrImage from 'qr-image';\nimport { storage } from '../storage';\nimport fs from 'fs';\nimport path from 'path';\nimport type { WebSocket } from 'ws';\n\nexport class WhatsAppService {\n  private client: any = null;\n  private qrCode: string | null = null;\n  private sessionInfo: any = null;\n  private isReady: boolean = false;\n  private isInitializing: boolean = false;\n  private messageCache: Map<string, any[]> = new Map(); // Cache for real-time messages\n  private connectionCheckInterval: NodeJS.Timeout | null = null;\n  private currentState: string = 'DISCONNECTED';\n  private isPhoneConnected: boolean = false;\n  private lastStateCheck: Date = new Date();\n\n  constructor() {\n    this.initializeClient();\n    this.startConnectionMonitoring();\n  }\n\n  // Helper method to broadcast WebSocket events\n  private broadcastToClients(eventType: string, data: any) {\n    try {\n      const wss = (global as any).wss;\n      if (wss && wss.clients) {\n        const message = JSON.stringify({ type: eventType, data });\n        wss.clients.forEach((client: any) => {\n          if (client.readyState === 1) { // WebSocket.OPEN\n            client.send(message);\n          }\n        });\n        console.log(`📡 Broadcasted ${eventType} to ${wss.clients.size} clients`);\n      }\n    } catch (error) {\n      console.error('Failed to broadcast WebSocket message:', error);\n    }\n  }\n\n  private async initializeClient() {\n    if (this.isInitializing) {\n      console.log('⚠️ Client already initializing, waiting for completion...');\n      // Wait for current initialization to complete or timeout\n      let attempts = 0;\n      while (this.isInitializing && attempts < 10) {\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        attempts++;\n      }\n      \n      if (this.isInitializing) {\n        console.log('🔄 Force resetting initialization flag after timeout');\n        this.isInitializing = false;\n      }\n    }\n    \n    // Additional safety check for existing client\n    if (this.client) {\n      try {\n        await this.client.destroy();\n        console.log('🧹 Destroyed existing client before reinitializing');\n      } catch (e: any) {\n        console.log('Previous client cleanup:', e.message);\n      }\n      this.client = null;\n    }\n\n    try {\n      this.isInitializing = true;\n      console.log('🚀 Initializing WhatsApp client...');\n\n      // Check if there's an existing session\n      const fs = await import('fs');\n      const path = await import('path');\n      const sessionPath = path.resolve('./.wwebjs_auth');\n      const hasExistingSession = fs.existsSync(sessionPath);\n      \n      // Also check for stored session info in database\n      let storedSessionInfo = null;\n      try {\n        const activeSessions = await storage.getActiveSessions();\n        if (activeSessions.length > 0) {\n          storedSessionInfo = activeSessions[0];\n          console.log('📦 Found stored session info:', storedSessionInfo.userId);\n        }\n      } catch (error: any) {\n        console.log('Session info retrieval failed:', error.message);\n      }\n      \n      if (hasExistingSession) {\n        console.log('🔍 Found existing session files, attempting automatic restoration...');\n        \n        // If we have stored session info, use it for immediate UI updates\n        if (storedSessionInfo) {\n          console.log('📦 Restoring from stored session info for UI');\n          this.sessionInfo = {\n            number: storedSessionInfo.userId,\n            name: storedSessionInfo.userName,\n            loginTime: storedSessionInfo.loginTime\n          };\n        } else {\n          console.log('📋 Session files exist, will restore on WhatsApp ready event');\n        }\n        \n        // Don't mark as ready until client is actually connected and ready\n        this.isReady = false;\n      } else {\n        console.log('📱 No existing session found, will require QR authentication');\n      }\n\n      // Clean up existing client\n      if (this.client) {\n        try {\n          await this.client.destroy();\n        } catch (e: any) {\n          console.log('Old client cleanup (expected):', e.message);\n        }\n        this.client = null;\n      }\n\n      // Reset state but preserve session info if we're restoring\n      this.qrCode = null;\n      if (!hasExistingSession && !storedSessionInfo) {\n        this.sessionInfo = null;\n        this.isReady = false;\n      }\n      this.messageCache.clear(); // Clear message cache on reinitialize\n\n      // Use full puppeteer with proper configuration to fix execution context issues\n      this.client = new Client({\n        authStrategy: new LocalAuth({\n          clientId: \"main_session\", // Persistent session ID for session preservation\n          dataPath: \"./.wwebjs_auth\" // Explicit data path\n        }),\n        puppeteer: {\n          headless: true,\n          args: [\n            '--no-sandbox',\n            '--disable-setuid-sandbox',\n            '--disable-dev-shm-usage',\n            '--disable-accelerated-2d-canvas',\n            '--no-first-run',\n            '--no-zygote',\n            '--disable-gpu',\n            '--disable-background-timer-throttling',\n            '--disable-backgrounding-occluded-windows',\n            '--disable-renderer-backgrounding',\n            '--disable-web-security',\n            '--disable-features=VizDisplayCompositor',\n            '--disable-ipc-flooding-protection',\n            '--memory-pressure-off',\n            '--max_old_space_size=4096',\n            '--disable-extensions',\n            '--disable-plugins',\n            '--disable-sync',\n            '--disable-translate',\n            '--hide-scrollbars',\n            '--mute-audio',\n            '--no-default-browser-check',\n            '--no-pings',\n            '--disable-default-apps',\n            '--disable-component-extensions-with-background-pages',\n            '--force-single-process-tabs',\n            '--single-process',\n            '--disable-process-per-site',\n            '--disable-site-isolation-trials',\n            `--user-data-dir=./.chrome_user_data_${Date.now()}` // Use unique directory to avoid conflicts\n          ],\n          handleSIGINT: false,\n          handleSIGTERM: false,\n          handleSIGHUP: false,\n          timeout: 90000 // 90 second timeout for initialization\n        }\n      });\n\n      // Event handlers\n      this.client.on('qr', (qr: string) => {\n        console.log('📱 New QR Code received from WhatsApp Web');\n        console.log('⚠️ Note: QR code means session was not restored or has expired');\n        console.log('🔍 QR String type:', typeof qr);\n        console.log('🔍 QR String length:', qr.length);\n        console.log('🔍 QR String preview:', qr.substring(0, 120) + '...');\n        \n        try {\n          // Fix: qr-image returns a stream, we need to convert it properly\n          const qrStream = qrImage.image(qr, { type: 'png' });\n          const chunks: Buffer[] = [];\n          \n          qrStream.on('data', (chunk: Buffer) => chunks.push(chunk));\n          qrStream.on('end', () => {\n            const qrBuffer = Buffer.concat(chunks);\n            const qrDataURL = 'data:image/png;base64,' + qrBuffer.toString('base64');\n            \n            this.qrCode = qrDataURL;\n            console.log('✅ QR Code generated successfully with qr-image');\n            \n            // Broadcast QR code to all connected WebSocket clients\n            this.broadcastToClients('qr', { qr: qrDataURL });\n          });\n          \n          qrStream.on('error', (error: any) => {\n            console.error('❌ QR stream error:', error.message);\n            this.qrCode = null;\n          });\n          \n        } catch (qrError: any) {\n          console.error('❌ QR generation with qr-image failed:', qrError.message);\n          \n          // Fallback: Try with QRCode library\n          QRCode.toDataURL(qr)\n            .then((qrDataURL: string) => {\n              this.qrCode = qrDataURL;\n              console.log('✅ QR Code generated successfully with fallback method');\n              \n              // Broadcast QR code to all connected WebSocket clients\n              this.broadcastToClients('qr', { qr: qrDataURL });\n            })\n            .catch((fallbackError: any) => {\n              console.error('❌ Fallback QR generation also failed:', fallbackError.message);\n              this.qrCode = null;\n            });\n        }\n      });\n\n      this.client.on('ready', async () => {\n        console.log('✅ WhatsApp client is ready - session restored successfully!');\n        this.isReady = true;\n        \n        // Update session info with fresh data from client\n        const freshSessionInfo = {\n          number: this.client.info?.wid?.user || this.sessionInfo?.number || 'unknown',\n          name: this.client.info?.pushname || this.sessionInfo?.name || 'unknown',\n          loginTime: this.sessionInfo?.loginTime || new Date().toISOString()\n        };\n        \n        this.sessionInfo = freshSessionInfo;\n        \n        // Clear QR code since we're now authenticated\n        this.qrCode = null;\n        \n        console.log('🎉 Session restored automatically! User:', freshSessionInfo.name, 'Number:', freshSessionInfo.number);\n        \n        // Save/update session info to storage for future persistence\n        try {\n          // First clear any old sessions\n          await storage.clearAllSessions();\n          \n          // Create comprehensive session backup\n          const sessionBackup = {\n            sessionId: \"main_session\",\n            userId: freshSessionInfo.number,\n            userName: freshSessionInfo.name,\n            timestamp: new Date().toISOString(),\n            status: \"active\"\n          };\n          \n          // Save to backup file\n          const fs = await import('fs');\n          await fs.promises.writeFile('.session_backup.json', JSON.stringify(sessionBackup, null, 2));\n          console.log('💾 Session backup saved to file');\n          \n          // Save the current active session\n          await storage.saveSession({\n            userId: freshSessionInfo.number,\n            userName: freshSessionInfo.name,\n            loginTime: new Date(freshSessionInfo.loginTime),\n            sessionData: JSON.stringify(freshSessionInfo)\n          });\n          console.log('💾 Session info saved to storage for future persistence');\n          \n          // Create a backup marker file to indicate successful session\n          try {\n            const fs = await import('fs');\n            const sessionMarker = {\n              sessionId: 'main_session',\n              userId: freshSessionInfo.number,\n              userName: freshSessionInfo.name,\n              timestamp: new Date().toISOString(),\n              status: 'active'\n            };\n            fs.writeFileSync('./.session_backup.json', JSON.stringify(sessionMarker, null, 2));\n            console.log('📄 Session backup marker created');\n          } catch (fsError: any) {\n            console.log('Session marker creation failed:', fsError.message);\n          }\n        } catch (error: any) {\n          console.log('Session save failed (non-critical):', error.message);\n        }\n        \n        // Broadcast connection status immediately\n        this.broadcastToClients('connected', { \n          connected: true, \n          sessionInfo: this.sessionInfo \n        });\n\n        // Full data synchronization after client is ready\n        setTimeout(() => {\n          this.performFullDataSync();\n        }, 2000); // Wait 2 seconds to ensure client is fully ready\n      });\n\n      this.client.on('authenticated', () => {\n        console.log('🔐 WhatsApp client authenticated successfully');\n        console.log('✅ Session restoration successful - no QR code needed');\n      });\n\n      this.client.on('auth_failure', (msg: any) => {\n        console.error('❌ Authentication failed:', msg);\n        this.isReady = false;\n        this.sessionInfo = null;\n      });\n\n      this.client.on('disconnected', (reason: any) => {\n        console.log('🔌 WhatsApp client disconnected:', reason);\n        this.isReady = false;\n        \n        // Clear session info on logout/UNPAIRED - critical for real-time updates\n        if (reason === 'UNPAIRED' || reason === 'LOGOUT') {\n          console.log('📱 User logged out from phone - clearing session data');\n          this.sessionInfo = null;\n          this.clearStoredSession();\n        }\n        this.qrCode = null;\n        \n        // Broadcast disconnection with detailed reason\n        this.broadcastToClients('disconnected', { \n          connected: false, \n          reason,\n          requiresNewAuth: reason === 'UNPAIRED' || reason === 'LOGOUT'\n        });\n        \n        // If user logged out from phone, restart with QR immediately\n        if (reason === 'UNPAIRED' || reason === 'LOGOUT') {\n          console.log('🔄 Phone logout detected - restarting for new QR');\n          this.handlePhoneLogoutRestart();\n        } else {\n          console.log('📋 Use /api/reconnect-whatsapp to attempt reconnection with preserved session');\n          console.log('📋 Use /api/force-restart-whatsapp to start fresh with QR code');\n        }\n      });\n\n      // Real-time message handling\n      this.client.on('message', (message: any) => {\n        this.storeRealtimeMessage(message);\n      });\n\n      // Listen for outgoing messages sent from phone\n      this.client.on('message_create', (message: any) => {\n        if (message.fromMe) {\n          console.log('📱 Outgoing message from phone detected');\n          this.storeRealtimeMessage(message);\n        }\n      });\n\n      console.log('✅ Starting client initialization...');\n      try {\n        await this.client.initialize();\n        console.log('🎯 Client initialization completed successfully');\n      } catch (initError: any) {\n        console.error('❌ Client initialization failed:', initError.message);\n        \n        // If initialization fails, reset and try again after delay\n        this.isInitializing = false;\n        this.client = null;\n        \n        setTimeout(() => {\n          console.log('🔄 Retrying client initialization after failure...');\n          this.initializeClient();\n        }, 5000);\n        \n        throw initError;\n      }\n\n    } catch (error: any) {\n      console.error('❌ WhatsApp client initialization failed:', error.message);\n      console.error('Error details:', error);\n      this.isReady = false;\n      this.sessionInfo = null;\n      this.qrCode = null;\n      \n      // Handle specific error types\n      if (error.message.includes('Protocol error') || \n          error.message.includes('Target closed') ||\n          error.message.includes('Navigation timeout')) {\n        console.log('🔧 Protocol/Connection error handled - attempting clean restart');\n        // Clean restart for protocol errors\n        setTimeout(() => {\n          this.initializeClient();\n        }, 5000);\n      } else {\n        // Attempt retry after a delay for other transient network issues\n        console.log('🔄 Scheduling retry in 10 seconds...');\n        setTimeout(() => {\n          if (!this.isReady && !this.isInitializing) {\n            console.log('🔄 Retrying WhatsApp client initialization...');\n            this.initializeClient();\n          }\n        }, 10000);\n      }\n      \n      console.log('Browser failed to initialize - QR will be available when browser starts');\n    } finally {\n      this.isInitializing = false;\n    }\n  }\n\n  async logout(): Promise<void> {\n    try {\n      console.log('🔌 Starting comprehensive logout process...');\n      \n      // Use the same logic as force restart but with UI logout\n      await this.performCompleteLogout();\n      \n    } catch (error: any) {\n      console.error('❌ Logout failed:', error.message);\n      throw error;\n    }\n  }\n\n  private async performCompleteLogout(): Promise<void> {\n    // Stop connection monitoring to prevent conflicts\n    if (this.connectionCheckInterval) {\n      clearInterval(this.connectionCheckInterval);\n      this.connectionCheckInterval = null;\n    }\n    \n    // Clear session info first\n    this.sessionInfo = null;\n    this.qrCode = null;\n    this.isReady = false;\n    this.messageCache.clear();\n    \n    // Clear storage\n    await storage.clearAllSessions();\n    \n    // Enhanced logout with phone disconnection\n    if (this.client) {\n      try {\n        console.log('🎯 Attempting comprehensive logout with phone disconnection...');\n        \n        // Method 1: PRIORITY - Use client.logout() to properly unlink phone\n        try {\n          console.log('📱 CRITICAL: Calling client.logout() to unlink from phone\\'s Linked Devices...');\n          await this.client.logout();\n          console.log('✅ Phone successfully unlinked from Linked Devices list');\n          \n          // Wait for logout to fully process on WhatsApp servers\n          await new Promise(resolve => setTimeout(resolve, 4000));\n        } catch (logoutError: any) {\n          console.log('⚠️ Primary logout failed, trying fallback methods:', logoutError.message);\n          \n          // Fallback: Try UI-based logout if API fails\n          try {\n            const page = await this.client.pupPage;\n            if (page) {\n              console.log('📱 Fallback: UI-based logout to disconnect phone...');\n              \n              const uiLogoutPromise = page.evaluate(() => {\n                try {\n                  const menuBtn = document.querySelector(\"span[data-icon='menu']\");\n                  if (menuBtn) {\n                    (menuBtn as HTMLElement).click();\n                    setTimeout(() => {\n                      const logoutElements = Array.from(document.querySelectorAll('div')).filter(\n                        el => el.textContent?.includes('Log out')\n                      );\n                      if (logoutElements.length > 0) {\n                        (logoutElements[0] as HTMLElement).click();\n                        setTimeout(() => {\n                          const confirmElements = Array.from(document.querySelectorAll('div')).filter(\n                            el => el.textContent?.includes('Log out')\n                          );\n                          if (confirmElements.length > 0) {\n                            (confirmElements[0] as HTMLElement).click();\n                          }\n                        }, 1000);\n                      }\n                    }, 1000);\n                  }\n                } catch (e) {\n                  console.log('UI logout failed:', e);\n                }\n              });\n              \n              const timeoutPromise = new Promise(resolve => setTimeout(resolve, 5000));\n              await Promise.race([uiLogoutPromise, timeoutPromise]);\n              console.log('✅ Fallback UI logout completed');\n              await new Promise(resolve => setTimeout(resolve, 2000));\n            }\n          } catch (pageError: any) {\n            console.log('🔧 Fallback also failed (expected during logout):', pageError.message);\n          }\n        }\n        \n        // Method 2: CRITICAL - Standard client logout to unlink from phone\n        try {\n          console.log('📱 Calling client.logout() to unlink from phone\\'s Linked Devices...');\n          await this.client.logout();\n          console.log('✅ Phone successfully unlinked from Linked Devices');\n          // Wait longer for logout to fully process on WhatsApp servers\n          await new Promise(resolve => setTimeout(resolve, 5000));\n        } catch (logoutError: any) {\n          console.log('⚠️ Client logout failed - phone may still be linked:', logoutError.message);\n        }\n        \n        // Method 3: Destroy client with timeout\n        console.log('🧹 Destroying WhatsApp client...');\n        try {\n          const destroyPromise = this.client.destroy();\n          const timeoutPromise = new Promise((_, reject) => \n            setTimeout(() => reject(new Error('timeout')), 5000)\n          );\n          await Promise.race([destroyPromise, timeoutPromise]);\n          console.log('✅ Client destroyed');\n        } catch (destroyError: any) {\n          console.log('🔧 Client destruction completed (expected)');\n        }\n        \n        this.client = null;\n      } catch (clientError: any) {\n        console.log('Client operation completed:', clientError.message);\n      }\n    }\n    \n    // Force clear all session data\n    await this.clearAllSessionData();\n    \n    // Broadcast logout event\n    this.broadcastToClients('logout', { connected: false });\n    \n    // Start fresh with delay\n    setTimeout(async () => {\n      console.log('🔄 Starting completely fresh client...');\n      this.isInitializing = false;\n      try {\n        await this.initializeClient();\n        console.log('✅ Fresh client started successfully');\n      } catch (error: any) {\n        console.error('❌ Fresh client start failed:', error.message);\n        // Retry with longer delay\n        setTimeout(() => {\n          this.isInitializing = false;\n          this.initializeClient();\n        }, 5000);\n      }\n    }, 3000);\n  }\n\n  private async clearAllSessionData(): Promise<void> {\n    try {\n      const fs = await import('fs');\n      const path = await import('path');\n      \n      // Kill any remaining Chrome processes first\n      try {\n        const { execSync } = await import('child_process');\n        execSync('pkill -f chrome || pkill -f chromium || true', { stdio: 'ignore' });\n        console.log('🔫 Killed existing Chrome processes');\n        await new Promise(resolve => setTimeout(resolve, 2000)); // Wait for processes to die\n      } catch (e) {\n        // Process kill might fail, that's OK\n      }\n      \n      const pathsToClean = [\n        './.wwebjs_auth',\n        './.chrome_user_data',\n        './.session_backup.json'\n      ];\n      \n      for (const dirPath of pathsToClean) {\n        const fullPath = path.resolve(dirPath);\n        if (fs.existsSync(fullPath)) {\n          // For Chrome data directory, clear lock files first\n          if (dirPath === './.chrome_user_data') {\n            try {\n              const lockFiles = [\n                path.join(fullPath, 'SingletonLock'),\n                path.join(fullPath, 'SingletonSocket'),\n                path.join(fullPath, 'Default', 'Session Storage'),\n                path.join(fullPath, 'Default', 'Local Storage')\n              ];\n              \n              for (const lockFile of lockFiles) {\n                if (fs.existsSync(lockFile)) {\n                  if (fs.statSync(lockFile).isDirectory()) {\n                    fs.rmSync(lockFile, { recursive: true, force: true });\n                  } else {\n                    fs.unlinkSync(lockFile);\n                  }\n                  console.log(`🔓 Removed lock: ${path.basename(lockFile)}`);\n                }\n              }\n            } catch (e) {}\n          }\n          \n          if (fs.statSync(fullPath).isDirectory()) {\n            fs.rmSync(fullPath, { recursive: true, force: true });\n            console.log(`🗑️ Cleared directory: ${dirPath}`);\n          } else {\n            fs.unlinkSync(fullPath);\n            console.log(`🗑️ Cleared file: ${dirPath}`);\n          }\n        }\n      }\n      \n      // Also clear temp Chrome data\n      const tmpDir = '/tmp';\n      try {\n        const chromeDataDirs = fs.readdirSync(tmpDir).filter(dir => \n          dir.startsWith('chrome-') || dir.startsWith('chromium-')\n        );\n        for (const dir of chromeDataDirs) {\n          try {\n            fs.rmSync(path.join(tmpDir, dir), { recursive: true, force: true });\n            console.log(`🗑️ Cleared temp Chrome data: ${dir}`);\n          } catch (e) {}\n        }\n      } catch (e) {}\n      \n      // Wait a bit more for filesystem to stabilize\n      await new Promise(resolve => setTimeout(resolve, 1000));\n    } catch (fsError: any) {\n      console.log('Session cleanup:', fsError.message);\n    }\n  }\n\n  private async clearStoredSession(): Promise<void> {\n    try {\n      await storage.clearAllSessions();\n      console.log('🗑️ Cleared stored session data from database');\n    } catch (error: any) {\n      console.log('Session clear failed:', error.message);\n    }\n  }\n\n  private startConnectionMonitoring(): void {\n    // Real-time connection monitoring every 30 seconds - reduced frequency to prevent aggressive restarts\n    this.connectionCheckInterval = setInterval(async () => {\n      await this.checkRealTimeConnection();\n    }, 30000);\n  }\n\n  private async checkRealTimeConnection() {\n    try {\n      if (!this.client) {\n        this.updateConnectionState('DISCONNECTED', false);\n        return;\n      }\n\n      // Get real-time state from WhatsApp Web instance\n      const currentState = await this.client.getState();\n      const wasConnected = this.isPhoneConnected;\n      const isNowConnected = currentState === 'CONNECTED';\n      \n      // Only broadcast if state actually changed\n      if (this.currentState !== currentState || this.isPhoneConnected !== isNowConnected) {\n        console.log(`🔌 Phone connection changed: ${this.currentState} → ${currentState} | Phone: ${this.isPhoneConnected ? 'Connected' : 'Disconnected'} → ${isNowConnected ? 'Connected' : 'Disconnected'}`);\n        \n        this.updateConnectionState(currentState, isNowConnected);\n        \n        // If phone disconnected, clear session info immediately  \n        if (wasConnected && !isNowConnected) {\n          console.log('📱 Phone disconnected - clearing session data');\n          this.sessionInfo = null;\n          this.isReady = false;\n        }\n        \n        // Handle different disconnection states (disabled automatic restart)\n        if (currentState === 'UNPAIRED' || currentState === 'UNPAIRED_IDLE') {\n          console.log('📱 Phone was unpaired - but not auto-restarting to prevent connection loops');\n          // this.handleUnpairedRestart(); // Disabled to prevent automatic logouts\n        }\n      }\n      \n      this.lastStateCheck = new Date();\n    } catch (error: any) {\n      // Connection check failed - likely means client is broken\n      console.log('⚠️ Connection health check failed:', error.message);\n      this.updateConnectionState('TIMEOUT', false);\n      this.isReady = false;\n    }\n  }\n\n  private updateConnectionState(state: string, phoneConnected: boolean) {\n    this.currentState = state;\n    this.isPhoneConnected = phoneConnected;\n    \n    // Broadcast real-time status update\n    this.broadcastToClients('connection_status', {\n      connected: phoneConnected,\n      state: state,\n      sessionInfo: phoneConnected ? this.sessionInfo : null,\n      timestamp: new Date().toISOString(),\n      isRealTime: true\n    });\n  }\n\n  private handleUnpairedRestart(): void {\n    console.log('📱 Handling unpaired restart event');\n    this.isReady = false;\n    this.sessionInfo = null;\n    this.qrCode = null;\n    \n    // Clear stored session data\n    this.clearStoredSession();\n    \n    // Broadcast disconnection with unpaired reason\n    this.broadcastToClients('disconnected', { \n      connected: false, \n      reason: 'UNPAIRED',\n      requiresNewAuth: true\n    });\n    \n    // Restart to get new QR\n    setTimeout(() => {\n      this.handlePhoneLogoutRestart();\n    }, 2000);\n  }\n\n  private async handlePhoneLogoutRestart(): Promise<void> {\n    try {\n      console.log('🔄 Starting safe restart after phone logout...');\n      \n      // Stop connection monitoring to prevent conflicts\n      if (this.connectionCheckInterval) {\n        clearInterval(this.connectionCheckInterval);\n        this.connectionCheckInterval = null;\n      }\n      \n      // Set initialization flag to prevent multiple restarts\n      this.isInitializing = true;\n      \n      // Clean destroy current client if it exists\n      if (this.client) {\n        try {\n          console.log('🧹 Safely destroying existing client...');\n          \n          // Add timeout to prevent hanging on destroy\n          const destroyPromise = this.client.destroy();\n          const timeoutPromise = new Promise((_, reject) => \n            setTimeout(() => reject(new Error('Destroy timeout')), 5000)\n          );\n          \n          await Promise.race([destroyPromise, timeoutPromise]);\n          console.log('✅ Client destroyed successfully');\n        } catch (destroyError: any) {\n          // Handle ProtocolError and other cleanup errors gracefully\n          if (destroyError.message.includes('Protocol error') || \n              destroyError.message.includes('Target closed') ||\n              destroyError.message.includes('Destroy timeout')) {\n            console.log('🔧 Client cleanup completed (expected during phone logout)');\n          } else {\n            console.log('Client destroy error:', destroyError.message);\n          }\n        }\n        this.client = null;\n      }\n      \n      // Clear session files to force fresh start\n      try {\n        const fs = await import('fs');\n        const path = await import('path');\n        const sessionPath = path.resolve('./.wwebjs_auth');\n        const chromeDataPath = path.resolve('./.chrome_user_data');\n        \n        if (fs.existsSync(sessionPath)) {\n          fs.rmSync(sessionPath, { recursive: true, force: true });\n          console.log('🗑️ Session files cleared for fresh start');\n        }\n        \n        if (fs.existsSync(chromeDataPath)) {\n          fs.rmSync(chromeDataPath, { recursive: true, force: true });\n          console.log('🗑️ Chrome data cleared for fresh start');\n        }\n      } catch (fsError: any) {\n        console.log('File cleanup:', fsError.message);\n      }\n      \n      // Wait for cleanup to complete\n      await new Promise(resolve => setTimeout(resolve, 3000));\n      \n      // Reset flags\n      this.isInitializing = false;\n      \n      // Restart client\n      console.log('🚀 Restarting client for new QR...');\n      await this.initializeClient();\n      \n    } catch (error: any) {\n      console.error('❌ Restart after logout failed:', error.message);\n      this.isInitializing = false;\n      \n      // Handle ProtocolError gracefully - it's expected during logout\n      if (error.message.includes('Protocol error') || \n          error.message.includes('Target closed')) {\n        console.log('🔧 ProtocolError handled - this is expected during phone logout');\n        // Continue with restart anyway\n        setTimeout(() => {\n          this.initializeClient();\n        }, 3000);\n      } else {\n        // Fallback: try again after longer delay for other errors\n        setTimeout(() => {\n          this.initializeClient();\n        }, 10000);\n      }\n    }\n  }\n\n  private handleConnectionLost(): void {\n    console.log('🔌 Handling connection lost event');\n    this.isReady = false;\n    \n    // Don't clear session info immediately - might be temporary\n    // this.sessionInfo = null;\n    \n    // Broadcast disconnection\n    this.broadcastToClients('disconnected', { \n      connected: false, \n      reason: 'CONNECTION_LOST',\n      requiresNewAuth: false // Might reconnect with same session\n    });\n  }\n\n  async getQRCode(): Promise<string | null> {\n    return this.qrCode;\n  }\n\n  async forceRefreshQR() {\n    console.log('🔄 Force refreshing QR code by reinitializing client...');\n    await this.completeRestart();\n  }\n\n  async completeRestart() {\n    console.log('🔄 Starting complete WhatsApp client restart (CLEARING SESSION)...');\n    \n    // Reset all state\n    this.qrCode = null;\n    this.sessionInfo = null;\n    this.isReady = false;\n    this.isInitializing = false;\n    this.messageCache.clear();\n    \n    // Destroy existing client\n    if (this.client) {\n      try {\n        await this.client.destroy();\n      } catch (e: any) {\n        console.log('Client cleanup during restart:', e?.message);\n      }\n    }\n    this.client = null;\n    \n    // Clear session storage\n    try {\n      await storage.clearAllSessions();\n    } catch (e: any) {\n      console.log('Storage cleanup during restart:', e?.message);\n    }\n    \n    // Clear session files - ONLY when doing complete restart\n    try {\n      const fs = await import('fs');\n      const path = await import('path');\n      const sessionPath = path.resolve('./.wwebjs_auth');\n      const chromeDataPath = path.resolve('./.chrome_user_data');\n      \n      if (fs.existsSync(sessionPath)) {\n        fs.rmSync(sessionPath, { recursive: true, force: true });\n        console.log('🗑️ WhatsApp session files cleared');\n      }\n      \n      if (fs.existsSync(chromeDataPath)) {\n        fs.rmSync(chromeDataPath, { recursive: true, force: true });\n        console.log('🗑️ Chrome user data cleared');\n      }\n    } catch (fsError: any) {\n      console.log('Session file cleanup:', fsError.message);\n    }\n    \n    // Wait a moment for cleanup\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    // Reinitialize\n    await this.initializeClient();\n  }\n\n  async reconnectWithoutClearing() {\n    console.log('🔄 Starting WhatsApp client reconnection (PRESERVING SESSION)...');\n    \n    // Check if we have valid session files before attempting reconnection\n    const fs = await import('fs');\n    const sessionPath = './.wwebjs_auth/session-main_session';\n    \n    // Reset state but keep session info for restoration\n    const preservedSessionInfo = this.sessionInfo;\n    this.qrCode = null;\n    this.isReady = false;\n    this.isInitializing = false;\n    \n    // Destroy existing client but preserve session files\n    if (this.client) {\n      try {\n        await this.client.destroy();\n      } catch (e: any) {\n        console.log('Client cleanup during reconnection:', e?.message);\n      }\n    }\n    this.client = null;\n    \n    // Restore session info\n    this.sessionInfo = preservedSessionInfo;\n    \n    if (fs.existsSync(sessionPath)) {\n      const sessionContents = fs.readdirSync(sessionPath);\n      if (sessionContents.length > 0) {\n        console.log('📱 Reconnecting with preserved session files...');\n        console.log('📄 Session files found:', sessionContents.length, 'files');\n      } else {\n        console.log('⚠️ Session directory exists but is empty - QR scan will be required');\n      }\n    } else {\n      console.log('⚠️ No session files found - QR scan will be required');\n    }\n    \n    // Don't clear session files or storage - just reinitialize\n    await this.initializeClient();\n  }\n\n  async getSessionInfo() {\n    // First check in-memory session\n    if (this.sessionInfo && this.isReady) {\n      return this.sessionInfo;\n    }\n    \n    // If no in-memory session, try to restore from storage\n    try {\n      const activeSessions = await storage.getActiveSessions();\n      if (activeSessions.length > 0) {\n        const storedSession = activeSessions[0];\n        console.log('📦 Restoring session info from storage');\n        \n        this.sessionInfo = {\n          number: storedSession.userId,\n          name: storedSession.userName,\n          loginTime: storedSession.loginTime\n        };\n        \n        // If we have session files and stored session, mark as ready\n        const fs = await import('fs');\n        const path = await import('path');\n        const sessionPath = path.resolve('./.wwebjs_auth');\n        \n        if (fs.existsSync(sessionPath)) {\n          this.isReady = true;\n          console.log('✅ Session restored from storage with file verification');\n          return this.sessionInfo;\n        }\n      }\n    } catch (error: any) {\n      console.log('Session restoration failed:', error.message);\n    }\n    \n    return null;\n  }\n\n  async isClientReady(): Promise<boolean> {\n    return this.isReady;\n  }\n\n  async sendMessage(phoneNumber: string, message: string): Promise<any> {\n    if (!this.client || !this.isReady) {\n      throw new Error('WhatsApp is not connected. Please scan the QR code to connect your WhatsApp account.');\n    }\n\n    try {\n      let chatId: string;\n      \n      // Check if it's already a WhatsApp ID (group or individual)\n      if (phoneNumber.includes('@')) {\n        chatId = phoneNumber;\n        console.log(`📤 Sending message to chat ID ${phoneNumber}: ${message.substring(0, 50)}...`);\n      } else {\n        // Format phone number properly for individual contacts\n        let formattedNumber = phoneNumber.replace(/\\D/g, '');\n        \n        if (formattedNumber.startsWith('1')) {\n          formattedNumber = formattedNumber;\n        } else if (formattedNumber.length === 10) {\n          formattedNumber = '1' + formattedNumber;\n        }\n        \n        chatId = formattedNumber + '@c.us';\n        console.log(`📤 Sending message to ${formattedNumber}: ${message.substring(0, 50)}...`);\n      }\n      \n      const result = await this.client.sendMessage(chatId, message);\n      \n      console.log('✅ Message sent successfully');\n      return result;\n      \n    } catch (error: any) {\n      console.error('❌ Failed to send message:', error.message);\n      \n      // Check if error is due to disconnection and update status\n      if (error.message.includes('Cannot read properties of undefined') || \n          error.message.includes('getChat') ||\n          error.message.includes('Session closed') ||\n          error.message.includes('Protocol error')) {\n        console.log('🔌 Connection lost during message send - updating status');\n        this.isReady = false;\n        \n        // Broadcast disconnection status\n        this.broadcastToClients('disconnected', { \n          connected: false, \n          reason: 'CONNECTION_LOST',\n          requiresNewAuth: true\n        });\n        \n        throw new Error('WhatsApp connection lost. Please refresh the page and reconnect by scanning the QR code.');\n      }\n      \n      throw new Error(`Failed to send message: ${error.message}`);\n    }\n  }\n\n  async sendMediaMessage(phoneNumber: string, message: string, mediaPath: string, fileName: string): Promise<any> {\n    if (!this.client || !this.isReady) {\n      throw new Error('WhatsApp is not connected. Please scan the QR code to connect your WhatsApp account.');\n    }\n\n    try {\n      const MessageMedia = (await import('whatsapp-web.js')).MessageMedia;\n      const media = MessageMedia.fromFilePath(mediaPath);\n      \n      let chatId: string;\n      \n      // Check if it's already a WhatsApp ID (group or individual)\n      if (phoneNumber.includes('@')) {\n        chatId = phoneNumber;\n        console.log(`📤 Sending media message to chat ID ${phoneNumber}: ${fileName}`);\n      } else {\n        // Format phone number properly for individual contacts\n        let formattedNumber = phoneNumber.replace(/\\D/g, '');\n        if (formattedNumber.startsWith('1')) {\n          formattedNumber = formattedNumber;\n        } else if (formattedNumber.length === 10) {\n          formattedNumber = '1' + formattedNumber;\n        }\n        \n        chatId = formattedNumber + '@c.us';\n        console.log(`📤 Sending media message to ${formattedNumber}: ${fileName}`);\n      }\n      \n      const result = await this.client.sendMessage(chatId, media, { caption: message });\n      \n      console.log('✅ Media message sent successfully');\n      return { messageId: result.id?.id, fileName };\n      \n    } catch (error: any) {\n      console.error('❌ Failed to send media message:', error.message);\n      \n      // Check if error is due to disconnection and update status\n      if (error.message.includes('Cannot read properties of undefined') || \n          error.message.includes('getChat') ||\n          error.message.includes('Session closed') ||\n          error.message.includes('Protocol error')) {\n        console.log('🔌 Connection lost during media message send - updating status');\n        this.isReady = false;\n        \n        // Broadcast disconnection status\n        this.broadcastToClients('disconnected', { \n          connected: false, \n          reason: 'CONNECTION_LOST',\n          requiresNewAuth: true\n        });\n        \n        throw new Error('WhatsApp connection lost. Please refresh the page and reconnect by scanning the QR code.');\n      }\n      \n      throw new Error(`Failed to send media message: ${error.message}`);\n    }\n  }\n\n  async getChatHistory(chatId: string, limit: number = 50): Promise<{contact: any, messages: any[]}> {\n    if (!this.client || !this.isReady) {\n      throw new Error('WhatsApp client is not ready');\n    }\n\n    try {\n\n      const chat = await this.client.getChatById(chatId);\n      const messages = await chat.fetchMessages({ limit });\n      \n      // First, get all contacts for name resolution\n      let allContacts: any[] = [];\n      try {\n        allContacts = await this.client.getContacts();\n      } catch (error) {\n        console.log('Failed to get contacts for name resolution:', error);\n      }\n\n      const messageData = messages\n        .filter((msg: any) => {\n          // Filter out system messages, notifications, and messages that are just phone numbers\n          const isSystemMessage = msg.type === 'e2e_notification' || \n                                   msg.type === 'notification_template' ||\n                                   msg.type === 'call_log' ||\n                                   msg.type === 'protocol';\n          \n          const isPhoneNumberOnly = msg.body && /^[\\d@c.us]+$/.test(msg.body.replace(/\\s/g, ''));\n          const isEmpty = !msg.body || msg.body.trim() === '';\n          \n          // Enhanced media detection for filtering\n          const hasMediaContent = msg.hasMedia || \n                                ['image', 'video', 'audio', 'ptt', 'document', 'sticker'].includes(msg.type) ||\n                                msg._data?.type === 'media' ||\n                                msg._data?.mimetype ||\n                                msg._data?.isMedia;\n\n          // Remove debug logging to reduce console noise\n          \n          // Keep real chat messages, media messages (even with empty body), and system messages with meaningful content\n          // Media messages should be kept even if they have empty body\n          return !isSystemMessage && !isPhoneNumberOnly && (!isEmpty || hasMediaContent);\n        })\n        .map((msg: any) => {\n          // Enhanced contact name resolution for group messages\n          let authorName = null;\n          if (!msg.fromMe && msg.author) {\n            // Look for the contact in the pre-fetched contacts list\n            const matchingContact = allContacts.find((contact: any) => \n              contact.id._serialized === msg.author\n            );\n            \n            if (matchingContact) {\n              // Prioritize saved contact name over pushname\n              if (matchingContact.isMyContact && matchingContact.name && matchingContact.name !== matchingContact.id.user) {\n                authorName = matchingContact.name;\n              } else if (matchingContact.pushname && matchingContact.pushname !== matchingContact.id.user) {\n                authorName = matchingContact.pushname;\n              } else {\n                // Fallback to formatted phone number\n                authorName = this.formatPhoneNumber(msg.author);\n              }\n            } else {\n              // If no contact found, use notify name or format phone number\n              authorName = msg._data?.notifyName || this.formatPhoneNumber(msg.author);\n            }\n          }\n\n          // Better media detection - check multiple properties\n          const hasMedia = msg.hasMedia || \n                           ['image', 'video', 'audio', 'ptt', 'document', 'sticker'].includes(msg.type) ||\n                           msg._data?.type === 'media' ||\n                           msg._data?.mimetype ||\n                           msg._data?.isMedia;\n\n          // Media detection working properly\n\n          return {\n            id: msg.id?.id || Date.now().toString(),\n            body: msg.body || (hasMedia ? '[Media]' : ''),\n            timestamp: msg.timestamp || Date.now(),\n            fromMe: msg.fromMe || false,\n            type: msg.type || 'chat',\n            author: authorName,\n            hasMedia: hasMedia,\n            mediaUrl: hasMedia ? `/api/media/${msg.id?.id}` : undefined,\n            fileName: hasMedia && msg._data?.filename ? msg._data.filename : undefined\n          };\n        });\n\n      // Extract contact information from the chat\n      const contact = {\n        id: chat.id._serialized,\n        name: chat.name || chat.pushname || 'Unknown',\n        number: chat.id.user || chatId.split('@')[0],\n        isMyContact: false, // Will be determined by checking contacts\n        isWAContact: true,\n        profilePicUrl: null,\n        isGroup: chat.isGroup || false,\n        // Add group-specific properties\n        participants: chat.isGroup ? (chat.participants || []) : undefined,\n        onlyAdminsCanMessage: chat.isGroup ? (chat.groupMetadata?.restrict || false) : false,\n        isAdmin: chat.isGroup ? this.isUserGroupAdmin(chat) : false\n      };\n\n\n      return {\n        contact,\n        messages: messageData\n      };\n    } catch (error: any) {\n      console.error('❌ Failed to fetch chat history:', error.message);\n      throw error;\n    }\n  }\n\n  // Helper method to check if user is admin in a group\n  private isUserGroupAdmin(chat: any): boolean {\n    try {\n      if (!chat.isGroup || !chat.participants) return false;\n      \n      const myNumber = this.sessionInfo?.number;\n      if (!myNumber) return false;\n      \n      const myParticipant = chat.participants.find((p: any) => \n        p.id._serialized.includes(myNumber) || p.id.user === myNumber\n      );\n      \n      return myParticipant?.isAdmin || myParticipant?.isSuperAdmin || false;\n    } catch (error) {\n      console.log('Error checking admin status:', error);\n      return false;\n    }\n  }\n\n  // Download media from a message\n  async downloadMessageMedia(messageId: string): Promise<any> {\n    if (!this.client || !this.isReady) {\n      throw new Error('WhatsApp client is not ready');\n    }\n\n    try {\n      console.log(`📥 Downloading media for message ${messageId}`);\n      \n      // Find the message across all chats\n      const chats = await this.client.getChats();\n      let targetMessage = null;\n      \n      for (const chat of chats) {\n        const messages = await chat.fetchMessages({ limit: 100 });\n        targetMessage = messages.find((msg: any) => msg.id?.id === messageId);\n        if (targetMessage) break;\n      }\n      \n      if (!targetMessage) {\n        throw new Error('Message not found');\n      }\n      \n      if (!targetMessage.hasMedia) {\n        throw new Error('Message has no media');\n      }\n      \n      // Download the media\n      const media = await targetMessage.downloadMedia();\n      \n      if (!media) {\n        throw new Error('Failed to download media');\n      }\n      \n      console.log(`✅ Media downloaded successfully for message ${messageId}`);\n      \n      return {\n        data: Buffer.from(media.data, 'base64'),\n        mimetype: media.mimetype,\n        filename: media.filename || `media_${messageId}`\n      };\n      \n    } catch (error: any) {\n      console.error('❌ Failed to download media:', error.message);\n      throw error;\n    }\n  }\n\n  private async storeRealtimeMessage(message: any) {\n    try {\n      if (!message) return;\n      \n      console.log('💬 New real-time message received:', {\n        from: message.from,\n        to: message.to,\n        body: message.body?.substring(0, 50) + '...',\n        fromMe: message.fromMe,\n        type: message.type\n      });\n      \n      // Extract contact ID from message\n      let contactId = message.from || 'unknown';\n      \n      // Normalize contact ID\n      contactId = contactId.replace('@c.us', '').replace('@g.us', '');\n      \n      // Get or create message array for this contact\n      let messages = this.messageCache.get(contactId) || [];\n      \n      // Add new message\n      const messageData = {\n        id: message.id?.id || Date.now().toString(),\n        timestamp: message.timestamp || Date.now(),\n        body: message.body || '',\n        fromMe: message.fromMe || false,\n        type: message.type || 'chat',\n        author: message.author || null,\n        to: message.to || contactId,\n        hasMedia: message.hasMedia || false\n      };\n      \n      messages.push(messageData);\n      \n      // Keep only last 100 messages per contact\n      if (messages.length > 100) {\n        messages = messages.slice(-100);\n      }\n      \n      // Update cache\n      this.messageCache.set(contactId, messages);\n      \n      // Broadcast new message to all WebSocket clients for real-time updates\n      this.broadcastToClients('new_message', {\n        chatId: message.from, // Full chat ID (with @c.us or @g.us)\n        message: messageData,\n        contactName: message._data?.notifyName || message.from\n      });\n      \n\n      \n    } catch (error: any) {\n      console.error('Failed to store realtime message:', error.message);\n    }\n  }\n\n  // Fast data loading methods for chats, groups, and contacts\n  // Helper method to get chats without broadcasting (prevents recursion)\n  private async getChatsWithoutBroadcast(): Promise<any[]> {\n    if (!this.client || !this.isReady) {\n      throw new Error('WhatsApp client is not ready');\n    }\n\n    // Additional check to ensure client is actually connected\n    if (!this.client.info || !this.client.info.wid) {\n      throw new Error('WhatsApp client not fully connected');\n    }\n\n    try {\n      \n      // Add timeout to prevent hanging\n      const timeoutPromise = new Promise((_, reject) => {\n        setTimeout(() => reject(new Error('Timeout fetching chats')), 30000);\n      });\n      \n      const chatsPromise = this.client.getChats();\n      const chats = await Promise.race([chatsPromise, timeoutPromise]);\n      \n      // Filter out status@broadcast, other broadcast chats, and archived chats\n      const filteredChats = chats.filter((chat: any) => \n        !chat.id._serialized.includes('status@broadcast') && \n        !chat.id._serialized.includes('@broadcast') &&\n        !chat.archived // Hide archived chats from main list\n      );\n      \n      const chatData = filteredChats.map((chat: any) => ({\n        id: chat.id._serialized,\n        name: chat.name || chat.pushname || chat.id.user,\n        isGroup: chat.isGroup,\n        timestamp: chat.timestamp,\n        unreadCount: chat.unreadCount,\n        isArchived: chat.archived,\n        isPinned: chat.pinned,\n        lastMessage: chat.lastMessage ? {\n          body: chat.lastMessage.body,\n          timestamp: chat.lastMessage.timestamp,\n          fromMe: chat.lastMessage.fromMe\n        } : null,\n        profilePicUrl: null // Will be loaded separately for performance\n      }));\n\n      // Sort chats by latest activity (most recent first)\n      const sortedChats = chatData.sort((a: any, b: any) => {\n        // Use lastMessage timestamp if available, otherwise fallback to chat timestamp\n        const timestampA = Math.max(a.lastMessage?.timestamp || 0, a.timestamp || 0);\n        const timestampB = Math.max(b.lastMessage?.timestamp || 0, b.timestamp || 0);\n        \n        return timestampB - timestampA; // Latest at top\n      });\n\n      return sortedChats;\n    } catch (error: any) {\n      console.error('❌ Failed to fetch chats:', error.message);\n      console.log('Get chats error:', error);\n      throw error;\n    }\n  }\n\n  async getChats(): Promise<any[]> {\n    try {\n      // Use helper method and broadcast the result\n      const sortedChats = await this.getChatsWithoutBroadcast();\n      \n      // Broadcast to WebSocket clients for real-time updates\n      this.broadcastToClients('chats_updated', { chats: sortedChats });\n      \n      return sortedChats;\n    } catch (error: any) {\n      console.error('❌ Failed to fetch chats:', error.message);\n      throw error;\n    }\n  }\n\n  async getContacts(): Promise<any[]> {\n    if (!this.client || !this.isReady) {\n      throw new Error('WhatsApp client is not ready');\n    }\n\n    // Additional check to ensure client is actually connected\n    if (!this.client.info || !this.client.info.wid) {\n      throw new Error('WhatsApp client not fully connected');\n    }\n\n    try {\n      \n      // Add timeout to prevent hanging\n      const timeoutPromise = new Promise((_, reject) => {\n        setTimeout(() => reject(new Error('Timeout fetching contacts')), 30000);\n      });\n      \n      const contactsPromise = this.client.getContacts();\n      const contacts = await Promise.race([contactsPromise, timeoutPromise]);\n      \n\n      \n      const contactData = contacts.map((contact: any) => ({\n        id: contact.id._serialized,\n        name: contact.name || contact.pushname || contact.id.user,\n        number: contact.number || contact.id.user,\n        isMyContact: contact.isMyContact,\n        isUser: contact.isUser,\n        isWAContact: contact.isWAContact,\n        profilePicUrl: null, // Will be loaded separately for performance\n        status: null, // Will be loaded separately for performance\n        isGroup: false // Contacts are not groups\n      }));\n\n      // Log filtering statistics\n      const isWAContactCount = contactData.filter((c: any) => c.isWAContact).length;\n      const isMyContactCount = contactData.filter((c: any) => c.isMyContact).length;\n      const bothCount = contactData.filter((c: any) => c.isWAContact && c.isMyContact).length;\n      const hasNameCount = contactData.filter((c: any) => c.isWAContact && c.isMyContact && c.name).length;\n      const hasNumberCount = contactData.filter((c: any) => c.isWAContact && c.isMyContact && c.name && c.number).length;\n\n      // Helper function to validate phone numbers\n      const isValidPhoneNumber = (phoneNumber: string): boolean => {\n        if (!phoneNumber) return false;\n        \n        // Remove all non-digit characters for length checking\n        const cleanNumber = phoneNumber.replace(/[^0-9]/g, '');\n        \n        // Reject numbers with 15+ digits (likely invalid/spam numbers)\n        if (cleanNumber.length >= 15) {\n          return false;\n        }\n        \n        // Reject numbers that are too short (less than 7 digits)\n        if (cleanNumber.length < 7) {\n          return false;\n        }\n        \n        return true;\n      };\n\n      const filteredContacts = contactData.filter((contact: any) => {\n        // More inclusive filtering to show all saved WhatsApp contacts with valid phone numbers\n        return contact.isWAContact && \n               contact.isMyContact && \n               contact.name && \n               contact.number &&\n               !contact.id.includes('@g.us') && // Exclude group IDs\n               !contact.id.includes('status@broadcast') && // Exclude status broadcasts\n               isValidPhoneNumber(contact.number); // Exclude invalid phone numbers\n      });\n\n      // Calculate validation statistics\n      const beforeValidation = contactData.filter((c: any) => \n        c.isWAContact && c.isMyContact && c.name && c.number &&\n        !c.id.includes('@g.us') && !c.id.includes('status@broadcast')\n      ).length;\n      const invalidPhoneNumbers = beforeValidation - filteredContacts.length;\n\n\n\n      // Sort contacts alphabetically (A-Z) by name\n      const sortedContacts = filteredContacts.sort((a: any, b: any) => {\n        const nameA = (a.name || '').toLowerCase();\n        const nameB = (b.name || '').toLowerCase();\n        return nameA.localeCompare(nameB);\n      });\n\n\n      \n      // Broadcast to WebSocket clients for real-time updates\n      this.broadcastToClients('contacts_updated', sortedContacts);\n      \n      return sortedContacts;\n    } catch (error: any) {\n      console.error('❌ Failed to fetch contacts:', error.message);\n      throw error;\n    }\n  }\n\n  async getGroups(): Promise<any[]> {\n    if (!this.client || !this.isReady) {\n      throw new Error('WhatsApp client is not ready');\n    }\n\n    try {\n\n      const chats = await this.client.getChats();\n      const groups = chats.filter((chat: any) => \n        chat.isGroup && \n        !chat.id._serialized.includes('status@broadcast') && \n        !chat.id._serialized.includes('@broadcast') &&\n        chat.participants && \n        chat.participants.length > 0\n      );\n      \n      const groupData = await Promise.all(\n        groups.map(async (group: any) => {\n          try {\n            const participants = await group.participants || [];\n            \n            // Get current user's WhatsApp number to check admin status\n            const currentUserNumber = this.client?.info?.me?.user || this.client?.info?.wid?.user;\n            const currentUserParticipant = participants.find((p: any) => \n              p.id._serialized.includes(currentUserNumber)\n            );\n            \n            // Check if current user is admin in this group\n            const isAdmin = currentUserParticipant ? (currentUserParticipant.isAdmin || currentUserParticipant.isSuperAdmin) : false;\n            \n            // Check if group has admin-only messaging enabled using the announce property\n            let onlyAdminsCanMessage = false;\n            try {\n              // Method 1: Try to get chat object which might have group metadata\n              const chatObj = await this.client.getChatById(group.id._serialized);\n              if (chatObj && chatObj.isGroup && chatObj.groupMetadata) {\n                onlyAdminsCanMessage = chatObj.groupMetadata.announce || false;\n                console.log(`Group ${group.name}: announce=${chatObj.groupMetadata.announce}, onlyAdminsCanMessage=${onlyAdminsCanMessage}`);\n              } else {\n                // Method 2: Try direct access to group properties\n                onlyAdminsCanMessage = group.groupMetadata?.announce || group.announce || false;\n                console.log(`Group ${group.name}: Using fallback method, onlyAdminsCanMessage=${onlyAdminsCanMessage}`);\n              }\n            } catch (metadataError: any) {\n              console.log(`Could not fetch group metadata for ${group.name}: ${metadataError.message}`);\n              // Final fallback: check if group object has announce property directly\n              onlyAdminsCanMessage = group.groupMetadata?.announce || group.announce || false;\n              console.log(`Group ${group.name}: Using final fallback, onlyAdminsCanMessage=${onlyAdminsCanMessage}`);\n            }\n            \n            return {\n              id: group.id._serialized,\n              name: group.name,\n              description: group.description || '',\n              participantCount: participants.length,\n              participants: participants.map((p: any) => ({\n                id: p.id._serialized,\n                isAdmin: p.isAdmin,\n                isSuperAdmin: p.isSuperAdmin\n              })),\n              timestamp: group.timestamp,\n              unreadCount: group.unreadCount,\n              lastMessage: group.lastMessage ? {\n                body: group.lastMessage.body,\n                timestamp: group.lastMessage.timestamp,\n                fromMe: group.lastMessage.fromMe\n              } : null,\n              profilePicUrl: null, // Will be loaded separately for performance\n              isGroup: true, // Mark as group for proper message routing\n              number: null, // Groups don't have phone numbers\n              isAdmin: isAdmin, // Whether current user is admin in this group\n              onlyAdminsCanMessage: onlyAdminsCanMessage // Whether group restricts messaging to admins only\n            };\n          } catch (groupError: any) {\n            console.log(`Group processing error for ${group.name}:`, groupError.message);\n            return {\n              id: group.id._serialized,\n              name: group.name,\n              description: group.description || '',\n              participantCount: 0,\n              participants: [],\n              timestamp: group.timestamp,\n              unreadCount: group.unreadCount,\n              lastMessage: null,\n              profilePicUrl: null,\n              isGroup: true, // Mark as group for proper message routing\n              number: null, // Groups don't have phone numbers\n              isAdmin: false, // Default to false on error\n              onlyAdminsCanMessage: false // Default to false on error\n            };\n          }\n        })\n      );\n\n      // Sort groups by latest activity (most recent first)\n      const sortedGroups = groupData.sort((a: any, b: any) => {\n        // Use lastMessage timestamp if available, otherwise fallback to group timestamp\n        const timestampA = Math.max(a.lastMessage?.timestamp || 0, a.timestamp || 0);\n        const timestampB = Math.max(b.lastMessage?.timestamp || 0, b.timestamp || 0);\n        return timestampB - timestampA; // Latest at top\n      });\n\n\n      \n      // Broadcast to WebSocket clients for real-time updates\n      this.broadcastToClients('groups_updated', { groups: sortedGroups });\n      \n      return sortedGroups;\n    } catch (error: any) {\n      console.error('❌ Failed to fetch groups:', error.message);\n      throw error;\n    }\n  }\n\n  // Method to get specific group participants for detailed view\n  async getGroupParticipants(groupId: string): Promise<any[]> {\n    if (!this.client || !this.isReady) {\n      throw new Error('WhatsApp client is not ready');\n    }\n\n    try {\n\n      const chat = await this.client.getChatById(groupId);\n      \n      if (!chat.isGroup) {\n        throw new Error('Chat is not a group');\n      }\n\n      const participants = chat.participants || [];\n      const participantData = participants.map((participant: any) => ({\n        id: participant.id._serialized,\n        number: participant.id.user,\n        isAdmin: participant.isAdmin,\n        isSuperAdmin: participant.isSuperAdmin,\n        name: null // Will be resolved from contacts\n      }));\n\n      console.log(`✅ Retrieved ${participantData.length} participants`);\n      return participantData;\n    } catch (error: any) {\n      console.error('❌ Failed to fetch group participants:', error.message);\n      throw error;\n    }\n  }\n\n\n\n  // Helper method to format phone numbers nicely\n  private formatPhoneNumber(author: string): string {\n    if (typeof author === 'string' && author.includes('@')) {\n      const phoneNumber = author.split('@')[0];\n      // Format phone number nicely\n      if (phoneNumber.length > 7) {\n        return phoneNumber.replace(/^(\\d{1,3})(\\d{3,4})(\\d{3,4})(\\d{4})$/, '+$1 $2 $3 $4');\n      }\n      return phoneNumber;\n    }\n    return author || 'Unknown';\n  }\n\n  // Method to preload profile pictures for better UX (called separately to avoid blocking main data load)\n  async loadProfilePictures(ids: string[]): Promise<Record<string, string>> {\n    if (!this.client || !this.isReady) {\n      return {};\n    }\n\n    const profilePics: Record<string, string> = {};\n    \n    // Process in batches to avoid overwhelming the API\n    const batchSize = 10;\n    for (let i = 0; i < ids.length; i += batchSize) {\n      const batch = ids.slice(i, i + batchSize);\n      \n      await Promise.all(\n        batch.map(async (id) => {\n          try {\n            const profilePicUrl = await this.client.getProfilePicUrl(id);\n            if (profilePicUrl) {\n              profilePics[id] = profilePicUrl;\n            }\n          } catch (error) {\n            // Profile pic not available or private - skip silently\n          }\n        })\n      );\n      \n      // Small delay between batches\n      if (i + batchSize < ids.length) {\n        await new Promise(resolve => setTimeout(resolve, 100));\n      }\n    }\n\n    return profilePics;\n  }\n  // Comprehensive data synchronization method\n  private async performFullDataSync() {\n    if (!this.client || !this.isReady) {\n      return;\n    }\n    \n    // Additional verification that client is fully connected\n    let attempts = 0;\n    const maxAttempts = 10;\n    \n    while (attempts < maxAttempts) {\n      try {\n        if (this.client.info && this.client.info.wid) {\n          break; // Client is ready\n        }\n      } catch (e) {\n        // Client info not available yet\n      }\n      \n      attempts++;\n\n      await new Promise(resolve => setTimeout(resolve, 1000));\n    }\n    \n    try {\n      \n      // Load all data in sequence with retries for reliability\n      const syncTasks = [\n        this.syncChats(),\n        this.syncContacts(), \n        this.syncGroups()\n      ];\n      \n      await Promise.allSettled(syncTasks);\n      \n\n      \n    } catch (error: any) {\n      // Silent handling\n    }\n  }\n\n  private async syncChats() {\n    try {\n      const chats = await this.getChats();\n      return chats;\n    } catch (error: any) {\n      return [];\n    }\n  }\n\n  private async syncContacts() {\n    try {\n      const contacts = await this.getContacts();\n      return contacts;\n    } catch (error: any) {\n      return [];\n    }\n  }\n\n  private async syncGroups() {\n    try {\n      const groups = await this.getGroups();\n      return groups;\n    } catch (error: any) {\n      return [];\n    }\n  }\n\n  // Delete a chat completely (for personal chats only)\n  async deleteChat(contactId: string): Promise<{ success: boolean; message: string }> {\n    if (!this.client || !this.isReady) {\n      throw new Error('WhatsApp client is not ready');\n    }\n\n    try {\n      // Validate that this is not a group chat\n      if (contactId.includes('@g.us')) {\n        throw new Error('Cannot delete group chats');\n      }\n\n      // Get the chat first\n      const chat = await this.client.getChatById(contactId);\n      \n      // Check if chat has delete method available\n      if (typeof chat.delete !== 'function') {\n        console.log(`⚠️ Chat delete method not available for ${contactId}`);\n        throw new Error('Chat deletion is not supported for this chat type');\n      }\n      \n      console.log(`🗑️ Attempting to delete chat ${contactId}...`);\n      \n      // Try to delete the chat\n      try {\n        const deleteResult = await chat.delete();\n        console.log(`🔍 Delete result:`, deleteResult);\n        \n        if (deleteResult) {\n          // Wait a moment and verify deletion\n          await new Promise(resolve => setTimeout(resolve, 1000));\n          \n          // Check if chat still exists by trying to fetch it\n          try {\n            await this.client.getChatById(contactId);\n            console.log(`⚠️ Deletion failed - chat still exists`);\n            throw new Error('Chat deletion verification failed');\n          } catch (e: any) {\n            // If getChatById fails, the chat was successfully deleted\n            if (e.message.includes('not found') || e.message.includes('does not exist')) {\n              console.log(`✅ Chat deletion confirmed - chat no longer exists`);\n              \n              // Get updated chats list and broadcast it\n              const updatedChats = await this.getChatsWithoutBroadcast();\n              this.broadcastToClients('chats_updated', { chats: updatedChats });\n              \n              return { \n                success: true, \n                message: 'Chat deleted successfully' \n              };\n            } else {\n              throw new Error('Chat deletion verification failed');\n            }\n          }\n        } else {\n          throw new Error('Chat deletion returned false');\n        }\n      } catch (error: any) {\n        console.log(`❌ Direct deletion failed:`, error.message);\n        \n        // Fallback: Archive the chat if deletion doesn't work\n        try {\n          console.log(`📦 Fallback: Archiving chat ${contactId} instead of deleting...`);\n          await chat.archive();\n          \n          console.log(`✅ Chat ${contactId} archived successfully`);\n          \n          // Get updated chats list and broadcast it\n          const updatedChats = await this.getChatsWithoutBroadcast();\n          this.broadcastToClients('chats_updated', { chats: updatedChats });\n          \n          return { \n            success: true, \n            message: 'Chat archived successfully (WhatsApp Web limitation prevents permanent deletion)' \n          };\n        } catch (archiveError: any) {\n          console.error(`❌ Fallback archive also failed:`, archiveError.message);\n          throw new Error(`Unable to delete or archive chat: ${archiveError.message}`);\n        }\n      }\n    } catch (error: any) {\n      console.error(`❌ Failed to delete chat ${contactId}:`, error.message);\n      throw error;\n    }\n  }\n\n  // Clear chat history (for both personal and group chats)\n  async clearChatHistory(contactId: string): Promise<{ success: boolean; message: string }> {\n    if (!this.client || !this.isReady) {\n      throw new Error('WhatsApp client is not ready');\n    }\n\n    try {\n      // Get the chat and clear all messages\n      const chat = await this.client.getChatById(contactId);\n      await chat.clearMessages();\n\n      console.log(`✅ Chat history for ${contactId} cleared successfully`);\n      \n      // Get updated chats list and broadcast it\n      const updatedChats = await this.getChatsWithoutBroadcast();\n      this.broadcastToClients('chats_updated', { chats: updatedChats });\n      this.broadcastToClients('chat_history_cleared', { contactId });\n      \n      return { \n        success: true, \n        message: 'Chat history cleared successfully' \n      };\n    } catch (error: any) {\n      console.error(`❌ Failed to clear chat history for ${contactId}:`, error.message);\n      throw error;\n    }\n  }\n\n  // Public method to trigger data sync manually\n  async triggerDataSync() {\n    if (!this.isReady) {\n      throw new Error('WhatsApp client not ready for sync');\n    }\n    return this.performFullDataSync();\n  }\n}\n\nexport const whatsappService = new WhatsAppService();","size_bytes":69605},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    let errorMessage = res.statusText;\n    try {\n      const errorData = await res.json();\n      if (errorData.error) {\n        errorMessage = errorData.error;\n      } else if (errorData.message) {\n        errorMessage = errorData.message;\n      }\n    } catch {\n      // If JSON parsing fails, fall back to text\n      try {\n        errorMessage = await res.text() || res.statusText;\n      } catch {\n        errorMessage = res.statusText;\n      }\n    }\n    throw new Error(errorMessage);\n  }\n}\n\nexport async function apiRequest(\n  url: string,\n  method: string,\n  data?: unknown | undefined,\n): Promise<any> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return await res.json();\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1776},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/account-management.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useEffect } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { StatusBanner } from \"@/components/ui/status-banner\";\nimport { AuthenticationCard } from \"@/components/ui/authentication-card\";\nimport { UserProfileCard } from \"@/components/ui/user-profile-card\";\nimport { useLocation } from \"wouter\";\n\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { SessionInfo } from \"@shared/schema\";\n\nexport default function AccountManagement() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n\n  // Fetch session info - much slower polling to reduce requests\n  const { data: sessionInfo, isLoading: sessionLoading, error: sessionError } = useQuery({\n    queryKey: ['/api/session-info'],\n    refetchInterval: 10000, // Poll every 10 seconds\n    staleTime: 8000, // Cache for 8 seconds\n    retry: false, // Don't retry on 404 (no session)\n  });\n\n  // Fetch QR code only when needed - poll when no session\n  const { data: qrData, isLoading: qrLoading, refetch: refetchQR } = useQuery<{qr?: string | null}>({\n    queryKey: ['/api/get-qr'],\n    enabled: !sessionInfo, // Only enabled when no session\n    refetchInterval: !sessionInfo ? 5000 : false, // Poll every 5s when no session\n    staleTime: 3000, // Cache QR for 3 seconds\n  });\n\n  // Fetch system status - less frequent updates\n  const { data: systemStatus } = useQuery<{client: string; puppeteer: string; storage: string; lastCheck: string}>({\n    queryKey: ['/api/system-status'],\n    refetchInterval: 60000, // Update every 60 seconds\n    staleTime: 50000, // Cache for 50 seconds\n  });\n\n  // Logout mutation with automated session clearing and QR refresh\n  const logoutMutation = useMutation({\n    mutationFn: () => apiRequest('/api/logout', 'POST'),\n    onSuccess: () => {\n      // Automatically clear stored authentication and all session data\n      queryClient.clear();\n      sessionStorage.clear();\n      localStorage.clear();\n      \n      // Immediately invalidate and refetch to get new QR code\n      queryClient.invalidateQueries({ queryKey: ['/api/session-info'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/get-qr'] });\n      \n      // Force refresh QR code to ensure new one is generated\n      apiRequest('/api/refresh-qr', 'POST').then(() => {\n        // After QR refresh, refetch the new QR code\n        setTimeout(() => {\n          queryClient.refetchQueries({ queryKey: ['/api/get-qr'] });\n          queryClient.refetchQueries({ queryKey: ['/api/session-info'] });\n        }, 2000);\n      }).catch((refreshError) => {\n        console.error(\"QR refresh error:\", refreshError);\n        // Still try to refetch even if refresh fails\n        setTimeout(() => {\n          queryClient.refetchQueries({ queryKey: ['/api/get-qr'] });\n          queryClient.refetchQueries({ queryKey: ['/api/session-info'] });\n        }, 2000);\n      });\n      \n      toast({\n        title: \"Success\",\n        description: \"Successfully logged out from WhatsApp. New QR code is being generated...\",\n      });\n    },\n    onError: (error: any) => {\n      // Logout should always clear session even if there's an error\n      queryClient.clear();\n      sessionStorage.clear();\n      localStorage.clear();\n      \n      queryClient.invalidateQueries({ queryKey: ['/api/session-info'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/get-qr'] });\n      \n      // Force QR refresh even on error\n      apiRequest('/api/refresh-qr', 'POST').then(() => {\n        setTimeout(() => {\n          queryClient.refetchQueries({ queryKey: ['/api/get-qr'] });\n          queryClient.refetchQueries({ queryKey: ['/api/session-info'] });\n        }, 2000);\n      }).catch(() => {\n        // Force refetch even on refresh error\n        setTimeout(() => {\n          queryClient.refetchQueries({ queryKey: ['/api/get-qr'] });\n          queryClient.refetchQueries({ queryKey: ['/api/session-info'] });\n        }, 2000);\n      });\n      \n      toast({\n        title: \"Logged Out\",\n        description: \"Session cleared automatically. New QR code is being generated.\",\n      });\n    },\n  });\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  const handleRefreshQR = async () => {\n    try {\n      // Call the backend to force refresh QR\n      await apiRequest('/api/refresh-qr', 'POST');\n      \n      // Wait a moment for QR to generate, then refetch\n      setTimeout(() => {\n        refetchQR();\n        queryClient.invalidateQueries({ queryKey: ['/api/get-qr'] });\n      }, 1000);\n      \n      toast({\n        title: \"QR Code Refreshed\", \n        description: \"A new QR code is being generated\",\n      });\n    } catch (error) {\n      console.error('QR refresh error:', error);\n      // Still try to refetch in case it works\n      refetchQR();\n      toast({\n        title: \"QR Refresh Attempted\",\n        description: \"Attempting to generate new QR code\",\n      });\n    }\n  };\n\n  const handleRetryConnection = () => {\n    queryClient.invalidateQueries({ queryKey: ['/api/session-info'] });\n    queryClient.invalidateQueries({ queryKey: ['/api/get-qr'] });\n  };\n\n  // Store user name when connected but don't auto-redirect\n  useEffect(() => {\n    if (sessionInfo && (sessionInfo as any).name && (sessionInfo as any).name !== \"Fetching...\" && (sessionInfo as any).name !== \"WhatsApp User\") {\n      // Store last user name for re-login feature\n      localStorage.setItem('lastWhatsAppUser', (sessionInfo as any).name);\n      \n      // Don't auto-redirect - let user manually go to dashboard\n      // Users can manually click to go to dashboard when ready\n    }\n  }, [sessionInfo]);\n\n  return (\n    <div className=\"bg-background font-sans min-h-screen\">\n      {/* Header */}\n      <header className=\"bg-surface shadow-sm border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center\">\n              <svg className=\"w-8 h-8 text-green-500 mr-3\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                <path d=\"M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.890-5.335 11.893-11.893A11.821 11.821 0 0020.893 3.506z\"/>\n              </svg>\n              <h1 className=\"text-xl font-semibold text-foreground\">WhatsApp Web Automation</h1>\n            </div>\n            <nav className=\"flex items-center space-x-4\">\n              <Button variant=\"ghost\" size=\"sm\">\n                <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z\" />\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n                </svg>\n              </Button>\n            </nav>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Full Screen Authentication Card */}\n        <div className=\"w-full\">\n          <AuthenticationCard\n            sessionInfo={sessionInfo}\n            qrData={qrData}\n            isLoading={sessionLoading || qrLoading}\n            isLogoutPending={logoutMutation.isPending}\n            onLogout={handleLogout}\n            onRefreshQR={handleRefreshQR}\n            onRetryConnection={handleRetryConnection}\n            lastUserName={localStorage.getItem('lastWhatsAppUser') || undefined}\n          />\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":9276},"client/src/pages/chat.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useRoute, useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Send, \n  ArrowLeft, \n  Paperclip, \n  X, \n  Upload, \n  FileText, \n  Image, \n  Video, \n  Music, \n  File,\n  Phone,\n  Users\n} from \"lucide-react\";\n\ninterface Contact {\n  id: string;\n  name: string;\n  number: string;\n  isMyContact: boolean;\n  isWAContact: boolean;\n  profilePicUrl: string | null;\n  isGroup: boolean;\n}\n\ninterface Message {\n  id: string;\n  body: string;\n  fromMe: boolean;\n  timestamp: number;\n  type: string;\n  hasMedia: boolean;\n  mediaUrl?: string;\n}\n\ninterface ChatHistory {\n  contact: Contact;\n  messages: Message[];\n}\n\nexport default function ChatPage() {\n  const [match, params] = useRoute(\"/chat/:contactId\");\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [message, setMessage] = useState(\"\");\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [isDragOver, setIsDragOver] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const contactId = params?.contactId;\n\n  // Fetch contact details from multiple sources\n  const { data: contacts = [] } = useQuery<Contact[]>({\n    queryKey: ['/api/contacts'],\n  });\n  \n  const { data: groups = [] } = useQuery<Contact[]>({\n    queryKey: ['/api/groups'],\n  });\n\n  const contact = contacts.find(c => c.id === contactId) || groups.find(g => g.id === contactId);\n\n  // Fetch chat history from WhatsApp Web API\n  const { data: chatHistory, isLoading: chatLoading } = useQuery<ChatHistory>({\n    queryKey: ['/api/chat-history', contactId],\n    enabled: !!contactId,\n    refetchInterval: 5000, // Refresh every 5 seconds for real-time updates\n    staleTime: 3000,\n  });\n\n  // Listen for real-time messages via WebSocket\n  useEffect(() => {\n    if (!contactId) return;\n\n    const handleNewMessage = (message: any) => {\n      if (message.type === 'new_message' && message.data.chatId === contactId) {\n        // Invalidate and refetch chat history when new message arrives for this chat\n        queryClient.invalidateQueries({ queryKey: ['/api/chat-history', contactId] });\n        \n        console.log('🔄 New message received for current chat, refreshing...');\n      }\n    };\n\n    // Import WebSocket manager dynamically to avoid issues\n    import('../lib/websocket').then(({ websocketManager }) => {\n      websocketManager.addEventHandler(handleNewMessage);\n    });\n\n    // Cleanup function\n    return () => {\n      import('../lib/websocket').then(({ websocketManager }) => {\n        websocketManager.removeEventHandler(handleNewMessage);\n      });\n    };\n  }, [contactId, queryClient]);\n\n  // Send text message mutation\n  const sendMessageMutation = useMutation({\n    mutationFn: async (data: { phoneNumber: string; message: string }) => {\n      return fetch('/api/send-message', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          accountId: 'primary',\n          phoneNumber: data.phoneNumber,\n          message: data.message\n        })\n      }).then(async res => {\n        const responseData = await res.json();\n        if (!res.ok) {\n          throw new Error(responseData.error || 'Failed to send message');\n        }\n        return responseData;\n      });\n    },\n    onSuccess: () => {\n      setMessage(\"\");\n      toast({\n        title: \"Message Sent\",\n        description: \"Your message has been sent successfully\",\n      });\n      // Refresh chat history\n      queryClient.invalidateQueries({ queryKey: ['/api/chat-history', contactId] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Send Message\",\n        description: error.message || \"Please try again\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Send media message mutation\n  const sendMediaMutation = useMutation({\n    mutationFn: async (data: { phoneNumber: string; message: string; file: File }) => {\n      const formData = new FormData();\n      formData.append('accountId', 'primary');\n      formData.append('phoneNumber', data.phoneNumber);\n      formData.append('message', data.message);\n      formData.append('media', data.file);\n\n      return fetch('/api/send-media-message', {\n        method: 'POST',\n        body: formData\n      }).then(async res => {\n        const data = await res.json();\n        if (!res.ok) {\n          throw new Error(data.error || 'Failed to send media message');\n        }\n        return data;\n      });\n    },\n    onSuccess: () => {\n      setMessage(\"\");\n      setSelectedFile(null);\n      toast({\n        title: \"Media Sent\",\n        description: \"Your media has been sent successfully\",\n      });\n      // Refresh chat history\n      queryClient.invalidateQueries({ queryKey: ['/api/chat-history', contactId] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Send Media\",\n        description: error.message || \"Please try again\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n\n\n  // Auto-scroll to bottom when new messages arrive\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [chatHistory?.messages]);\n\n  if (!match || !contactId) {\n    setLocation(\"/dashboard\");\n    return null;\n  }\n\n  if (!contact) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-blue-50 p-4\">\n        <div className=\"max-w-4xl mx-auto\">\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <h3 className=\"text-lg font-semibold mb-2\">Contact Not Found</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                The requested contact could not be found.\n              </p>\n              <Button onClick={() => setLocation(\"/dashboard\")}>\n                <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                Back to Dashboard\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  const handleSendMessage = () => {\n    if (!message.trim() && !selectedFile) return;\n\n    // For groups, use the full group ID; for individuals, use their phone number\n    const phoneNumber = contact.isGroup ? contact.id : (contact.number || contact.id.split('@')[0]);\n    \n    console.log('🐛 Debug - Contact info:', {\n      name: contact.name,\n      id: contact.id,\n      isGroup: contact.isGroup,\n      number: contact.number,\n      calculatedPhoneNumber: phoneNumber\n    });\n\n    if (selectedFile) {\n      sendMediaMutation.mutate({\n        phoneNumber,\n        message: message.trim(),\n        file: selectedFile\n      });\n    } else {\n      sendMessageMutation.mutate({\n        phoneNumber,\n        message: message.trim()\n      });\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      setSelectedFile(file);\n    }\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(false);\n    const file = e.dataTransfer.files[0];\n    if (file) {\n      setSelectedFile(file);\n    }\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(true);\n  };\n\n  const handleDragLeave = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(false);\n  };\n\n  const getFileIcon = (file: File) => {\n    const fileType = file.type.toLowerCase();\n    const fileName = file.name.toLowerCase();\n\n    if (fileType.startsWith('image/')) return <Image className=\"h-4 w-4\" />;\n    if (fileType.startsWith('video/')) return <Video className=\"h-4 w-4\" />;\n    if (fileType.startsWith('audio/')) return <Music className=\"h-4 w-4\" />;\n    if (fileType.includes('pdf') || fileName.endsWith('.pdf')) return <FileText className=\"h-4 w-4\" />;\n    return <File className=\"h-4 w-4\" />;\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-blue-50\">\n      <div className=\"max-w-4xl mx-auto h-screen flex flex-col\">\n        {/* Chat Header */}\n        <Card className=\"rounded-none border-x-0 border-t-0\">\n          <CardHeader className=\"py-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\"\n                  onClick={() => {\n                    if (contact?.isGroup) {\n                      setLocation(\"/dashboard?module=groups\");\n                    } else {\n                      setLocation(\"/dashboard?module=chats\");\n                    }\n                  }}\n                >\n                  <ArrowLeft className=\"h-4 w-4\" />\n                </Button>\n                <div className={`w-10 h-10 rounded-full flex items-center justify-center ${\n                  contact.isGroup ? 'bg-green-100' : 'bg-blue-100'\n                }`}>\n                  {contact.isGroup ? (\n                    <Users className=\"h-5 w-5 text-green-600\" />\n                  ) : (\n                    <Phone className=\"h-5 w-5 text-blue-600\" />\n                  )}\n                </div>\n                <div>\n                  <CardTitle className=\"text-lg\">{contact.name}</CardTitle>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {/* Never display IDs - show meaningful information instead */}\n                    {contact.isGroup \n                      ? `${(contact as any).participants?.length || 0} participants`\n                      : contact.number ? contact.number : \"WhatsApp Contact\"\n                    }\n                  </p>\n                </div>\n              </div>\n\n            </div>\n          </CardHeader>\n        </Card>\n\n        {/* Chat Messages */}\n        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n          {chatLoading ? (\n            <div className=\"text-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n              <p>Loading chat history...</p>\n            </div>\n          ) : chatHistory?.messages.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <p>No messages yet. Start the conversation!</p>\n            </div>\n          ) : (\n            chatHistory?.messages.map((msg) => (\n              <div\n                key={msg.id}\n                className={`flex ${msg.fromMe ? 'justify-end' : 'justify-start'}`}\n              >\n                <div\n                  className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${\n                    msg.fromMe\n                      ? 'bg-green-500 text-white'\n                      : 'bg-white border shadow-sm'\n                  }`}\n                >\n                  {/* Show sender name for group messages that are not from me */}\n                  {contact?.isGroup && !msg.fromMe && (msg as any).author && (\n                    <p className=\"text-xs font-semibold mb-1 text-gray-600 dark:text-gray-300\">\n                      {/* Display username instead of ID - extract name from author info */}\n                      {(() => {\n                        const author = (msg as any).author;\n                        // If author is a phone number like \"916351079783@c.us\", extract the number part\n                        if (typeof author === 'string' && author.includes('@')) {\n                          const phoneNumber = author.split('@')[0];\n                          // Try to find the contact name from the participant or use the formatted phone number\n                          const contact = (msg as any).participant;\n                          if (contact && typeof contact === 'object' && contact.name) {\n                            return contact.name;\n                          }\n                          // Format phone number nicely if no name available\n                          return phoneNumber.replace(/^(\\d{1,3})/, '+$1 ').replace(/(\\d{3,4})(\\d{3,4})(\\d{4})$/, '$1 $2 $3');\n                        }\n                        return author;\n                      })()}\n                    </p>\n                  )}\n                  \n                  {/* Handle media messages */}\n                  {msg.hasMedia ? (\n                    <div className=\"space-y-2\">\n                      {/* Display media based on type */}\n                      {msg.type === 'image' && msg.mediaUrl ? (\n                        <div className=\"relative\">\n                          <img \n                            src={msg.mediaUrl} \n                            alt=\"Image\" \n                            className=\"max-w-full rounded-lg shadow-sm cursor-pointer hover:opacity-90 transition-opacity\"\n                            loading=\"lazy\"\n                            onClick={() => window.open(msg.mediaUrl, '_blank')}\n                          />\n                        </div>\n                      ) : msg.type === 'video' && msg.mediaUrl ? (\n                        <video \n                          src={msg.mediaUrl} \n                          controls \n                          className=\"max-w-full rounded-lg shadow-sm\"\n                          preload=\"metadata\"\n                        />\n                      ) : msg.type === 'audio' || msg.type === 'ptt' ? (\n                        <div className=\"flex items-center space-x-3 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                          <Music className=\"h-5 w-5 text-blue-500\" />\n                          {msg.mediaUrl ? (\n                            <audio src={msg.mediaUrl} controls className=\"flex-1\" />\n                          ) : (\n                            <span className=\"text-sm font-medium\">Voice Message</span>\n                          )}\n                        </div>\n                      ) : msg.type === 'document' ? (\n                        <div className=\"flex items-center space-x-3 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors\">\n                          <FileText className=\"h-5 w-5 text-red-500\" />\n                          <div className=\"flex-1\">\n                            <p className=\"text-sm font-medium\">{(msg as any).fileName || 'Document'}</p>\n                            <p className=\"text-xs text-muted-foreground\">Click to download</p>\n                          </div>\n                        </div>\n                      ) : (\n                        <div className=\"flex items-center space-x-3 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                          <File className=\"h-5 w-5 text-gray-500\" />\n                          <span className=\"text-sm font-medium\">Media File</span>\n                        </div>\n                      )}\n                      \n                      {/* Show caption if present */}\n                      {msg.body && msg.body !== '[Media]' && (\n                        <p className=\"text-sm mt-2 break-words overflow-wrap-anywhere\">{msg.body}</p>\n                      )}\n                    </div>\n                  ) : (\n                    <p className=\"text-sm whitespace-pre-wrap break-words overflow-wrap-anywhere\">{msg.body}</p>\n                  )}\n                  \n                  <p className={`text-xs mt-1 ${\n                    msg.fromMe ? 'text-green-100' : 'text-muted-foreground'\n                  }`}>\n                    {new Date(msg.timestamp * 1000).toLocaleDateString('en-GB')} {new Date(msg.timestamp * 1000).toLocaleTimeString()}\n                  </p>\n                </div>\n              </div>\n            ))\n          )}\n          <div ref={messagesEndRef} />\n        </div>\n\n        {/* File Upload Area */}\n        {selectedFile && (\n          <Card className=\"m-4 mb-0\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  {getFileIcon(selectedFile)}\n                  <div>\n                    <p className=\"font-medium\">{selectedFile.name}</p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {formatFileSize(selectedFile.size)}\n                    </p>\n                  </div>\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setSelectedFile(null)}\n                >\n                  <X className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Message Input */}\n        <Card className=\"rounded-none border-x-0 border-b-0\">\n          <CardContent className=\"p-4\">\n            <div \n              className={`flex items-end space-x-2 p-2 border-2 border-dashed rounded-lg transition-colors ${\n                isDragOver ? 'border-primary bg-primary/5' : 'border-muted'\n              }`}\n              onDrop={handleDrop}\n              onDragOver={handleDragOver}\n              onDragLeave={handleDragLeave}\n            >\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => fileInputRef.current?.click()}\n                className=\"shrink-0\"\n              >\n                <Paperclip className=\"h-4 w-4\" />\n              </Button>\n              \n              <div className=\"flex-1\">\n                <Input\n                  value={message}\n                  onChange={(e) => setMessage(e.target.value)}\n                  onKeyPress={handleKeyPress}\n                  placeholder={contact.isGroup && (contact as any).onlyAdminsCanMessage && !(contact as any).isAdmin ? \"Only admins can send messages\" : \"Type a message...\"}\n                  className=\"border-0 focus-visible:ring-0 resize-none\"\n                  disabled={contact.isGroup && (contact as any).onlyAdminsCanMessage && !(contact as any).isAdmin}\n                />\n              </div>\n              \n              <Button\n                onClick={handleSendMessage}\n                disabled={(!message.trim() && !selectedFile) || sendMessageMutation.isPending || sendMediaMutation.isPending || (contact.isGroup && (contact as any).onlyAdminsCanMessage && !(contact as any).isAdmin)}\n                size=\"sm\"\n              >\n                {(sendMessageMutation.isPending || sendMediaMutation.isPending) ? (\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\" />\n                ) : (\n                  <Send className=\"h-4 w-4\" />\n                )}\n              </Button>\n            </div>\n            \n            <input\n              ref={fileInputRef}\n              type=\"file\"\n              onChange={handleFileSelect}\n              className=\"hidden\"\n              accept=\"image/*,video/*,audio/*,.pdf,.doc,.docx,.xls,.xlsx,.ppt,.pptx,.txt,.zip\"\n            />\n            \n            {isDragOver && (\n              <div className=\"text-center text-sm text-muted-foreground mt-2\">\n                Drop your file here to attach\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":20080},"client/src/pages/dashboard.tsx":{"content":"import { useState, useCallback, useEffect, useRef } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { websocketManager, type WebSocketMessage } from \"@/lib/websocket\";\nimport { Send, MessageSquare, Users, Plus, Smartphone, Paperclip, X, Upload, FileText, Image, Video, Music, File, Download, Search, Clock, Phone, Trash2, BarChart3, UserCheck, ChevronDown, Loader2, User, Copy, Play, Pause, RotateCcw, LogOut } from \"lucide-react\";\n\nimport { useLocation } from \"wouter\";\n\ninterface Chat {\n  id: string;\n  name: string;\n  isGroup: boolean;\n  unreadCount: number;\n  lastMessage: {\n    body: string;\n    timestamp: number;\n    fromMe: boolean;\n  } | null;\n  timestamp: number;\n}\n\ninterface Contact {\n  id: string;\n  name: string;\n  number: string;\n  isMyContact: boolean;\n  isWAContact: boolean;\n  profilePicUrl: string | null;\n  isGroup: boolean;\n}\n\ninterface Group {\n  id: string;\n  name: string;\n  isGroup: boolean;\n  unreadCount: number;\n  lastMessage: {\n    body: string;\n    timestamp: number;\n    fromMe: boolean;\n  } | null;\n  timestamp: number;\n  participants: any[];\n  isAdmin?: boolean;\n  onlyAdminsCanMessage?: boolean;\n}\n\ninterface ContactGroup {\n  id: string;\n  name: string;\n  description: string | null;\n  totalContacts: number;\n  validContacts: number;\n  invalidContacts: number;\n  duplicateContacts: number;\n  createdAt: string;\n}\n\ninterface BulkCampaign {\n  id: string;\n  name: string;\n  contactGroupId: string;\n  message: string;\n  status: string;\n  sentCount: number;\n  failedCount: number;\n  totalTargets: number;\n  createdAt: string;\n}\n\n// Country codes list\nconst countryCodes = [\n  { code: \"+1\", country: \"US/Canada\", flag: \"🇺🇸\" },\n  { code: \"+91\", country: \"India\", flag: \"🇮🇳\" },\n  { code: \"+44\", country: \"UK\", flag: \"🇬🇧\" },\n  { code: \"+49\", country: \"Germany\", flag: \"🇩🇪\" },\n  { code: \"+33\", country: \"France\", flag: \"🇫🇷\" },\n  { code: \"+61\", country: \"Australia\", flag: \"🇦🇺\" },\n  { code: \"+81\", country: \"Japan\", flag: \"🇯🇵\" },\n  { code: \"+86\", country: \"China\", flag: \"🇨🇳\" },\n  { code: \"+7\", country: \"Russia\", flag: \"🇷🇺\" },\n  { code: \"+55\", country: \"Brazil\", flag: \"🇧🇷\" },\n  { code: \"+52\", country: \"Mexico\", flag: \"🇲🇽\" },\n  { code: \"+34\", country: \"Spain\", flag: \"🇪🇸\" },\n  { code: \"+39\", country: \"Italy\", flag: \"🇮🇹\" },\n  { code: \"+31\", country: \"Netherlands\", flag: \"🇳🇱\" },\n  { code: \"+41\", country: \"Switzerland\", flag: \"🇨🇭\" },\n  { code: \"+46\", country: \"Sweden\", flag: \"🇸🇪\" },\n  { code: \"+47\", country: \"Norway\", flag: \"🇳🇴\" },\n  { code: \"+45\", country: \"Denmark\", flag: \"🇩🇰\" },\n  { code: \"+358\", country: \"Finland\", flag: \"🇫🇮\" },\n  { code: \"+82\", country: \"South Korea\", flag: \"🇰🇷\" },\n];\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n  \n  // Handle URL parameters for module selection\n  const urlParams = new URLSearchParams(window.location.search);\n  const moduleFromUrl = urlParams.get('module');\n  \n  // Navigation states\n  const [selectedFeature, setSelectedFeature] = useState<'whatsapp' | 'rcs'>('whatsapp');\n  const [selectedModule, setSelectedModule] = useState(moduleFromUrl || 'account');\n  \n  // Account panel state\n  const [showAccountView, setShowAccountView] = useState(true);\n  \n  // Form states\n  const [countryCode, setCountryCode] = useState(\"+91\");\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [isDragOver, setIsDragOver] = useState(false);\n  const [showQRCode, setShowQRCode] = useState(true); // Start with true since user is not connected\n  \n  // Contact Groups state\n  const [showCreateGroupDialog, setShowCreateGroupDialog] = useState(false);\n  const [showBulkMessageDialog, setShowBulkMessageDialog] = useState(false);\n  const [newGroupName, setNewGroupName] = useState(\"\");\n  const [newGroupDescription, setNewGroupDescription] = useState(\"\");\n  const [selectedContactGroup, setSelectedContactGroup] = useState(\"\");\n  const [bulkMessage, setBulkMessage] = useState(\"\");\n  const [importingGroupId, setImportingGroupId] = useState<string | null>(null);\n  const wsRef = useRef<WebSocket | null>(null);\n  \n  // Enhanced campaign states\n  const [newCampaignName, setNewCampaignName] = useState('');\n  const [targetType, setTargetType] = useState('contact_group');\n  const [selectedWhatsAppGroup, setSelectedWhatsAppGroup] = useState('');\n  const [scheduleType, setScheduleType] = useState('immediate');\n  const [timePost, setTimePost] = useState('');\n  const [minInterval, setMinInterval] = useState(1);\n  const [maxInterval, setMaxInterval] = useState(10);\n  const [selectedMedia, setSelectedMedia] = useState<File | null>(null);\n  const [scheduleHours, setScheduleHours] = useState<number[]>([]);\n  \n  // Contact selection dropdown state\n  const [showContactsDropdown, setShowContactsDropdown] = useState(false);\n  const [contactSearchTerm, setContactSearchTerm] = useState(\"\");\n  const contactsDropdownRef = useRef<HTMLDivElement>(null);\n  \n  // Contact selection states for adding to groups\n  const [selectedContacts, setSelectedContacts] = useState<Set<string>>(new Set());\n  const [showAddToGroupsDialog, setShowAddToGroupsDialog] = useState(false);\n  const [selectedGroupsForAdd, setSelectedGroupsForAdd] = useState<Set<string>>(new Set());\n  const [contactGroupMemberships, setContactGroupMemberships] = useState<Map<string, ContactGroup[]>>(new Map());\n  \n  // Chat deletion state\n  const [deletingChatId, setDeletingChatId] = useState<string | null>(null);\n  \n  // Close contacts dropdown when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (contactsDropdownRef.current && !contactsDropdownRef.current.contains(event.target as Node)) {\n        setShowContactsDropdown(false);\n        setContactSearchTerm(\"\");\n      }\n    };\n    \n    if (showContactsDropdown) {\n      document.addEventListener('mousedown', handleClickOutside);\n    }\n    \n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [showContactsDropdown]);\n  \n  // Update field values for placeholder visibility\n  const fieldValues = {\n    phoneNumber,\n    message,\n    newGroupName,\n    newGroupDescription,\n    bulkMessage\n  };\n\n  // Fetch current session info\n  const { data: sessionInfo } = useQuery<{\n    name: string;\n    loginTime: string;\n  }>({\n    queryKey: ['/api/session-info'],\n    refetchInterval: 10000, // Check every 10 seconds\n  });\n\n  // Fetch QR code when needed\n  const { data: qrData, refetch: refetchQR } = useQuery<{qr?: string | null}>({\n    queryKey: ['/api/get-qr'],\n    enabled: !sessionInfo, // Fetch when no session\n    refetchInterval: !sessionInfo ? 5000 : false,\n    retry: 3,\n  });\n\n  // Fetch contact groups\n  const { data: contactGroups = [], isLoading: contactGroupsLoading } = useQuery<ContactGroup[]>({\n    queryKey: ['/api/contact-groups'],\n    refetchInterval: 30000,\n  });\n\n  // Fetch chats with real-time updates\n  const { data: chats = [], isLoading: chatsLoading } = useQuery<Chat[]>({\n    queryKey: ['/api/chats'],\n    enabled: !!sessionInfo,\n    refetchInterval: false, // Disable automatic refetch since we use WebSocket updates\n    staleTime: Infinity, // Data is always fresh from WebSocket\n  });\n\n  // Fetch contacts with real-time updates\n  const { data: contacts = [], isLoading: contactsLoading } = useQuery<Contact[]>({\n    queryKey: ['/api/contacts'],\n    enabled: !!sessionInfo,\n    refetchInterval: false, // Disable automatic refetch since we use WebSocket updates\n    staleTime: Infinity, // Data is always fresh from WebSocket\n  });\n\n  // Fetch groups with real-time updates\n  const { data: groups = [], isLoading: groupsLoading } = useQuery<Group[]>({\n    queryKey: ['/api/groups'],\n    enabled: !!sessionInfo,\n    refetchInterval: false, // Disable automatic refetch since we use WebSocket updates\n    staleTime: Infinity, // Data is always fresh from WebSocket\n  });\n\n  // Fetch bulk campaigns with smart refresh based on active campaigns\n  const { data: bulkCampaigns = [], isLoading: campaignsLoading } = useQuery<BulkCampaign[]>({\n    queryKey: ['/api/bulk-campaigns'],\n    refetchInterval: () => {\n      // Refresh every 30 seconds for bulk campaigns\n      return 30000;\n    },\n    refetchIntervalInBackground: true, // Keep refreshing even when tab is not focused\n  });\n\n  // Helper function to determine if a phone number is valid (more inclusive)\n  const isValidPhoneNumber = (phoneNumber: string): boolean => {\n    // Remove all non-digit characters\n    const cleanNumber = phoneNumber.replace(/[^0-9]/g, '');\n    \n    // More inclusive validation - just check basic phone number patterns\n    // Valid phone numbers should have at least 7 digits and not be extremely long\n    if (cleanNumber.length < 7 || cleanNumber.length > 15) {\n      return false;\n    }\n    \n    // Exclude obvious group IDs or invalid patterns\n    // Group IDs typically have specific patterns or are very long\n    if (cleanNumber.length > 15) {\n      return false;\n    }\n    \n    // Allow most numbers that look like phone numbers\n    // This is more inclusive to capture international variations\n    return true;\n  };\n\n  // Helper function to keep all contacts with valid phone numbers (no deduplication by name)\n  const deduplicateContacts = (contactsList: Contact[]): Contact[] => {\n    // Instead of deduplicating by name, only remove exact duplicates (same ID)\n    const uniqueContacts = new Map<string, Contact>();\n    \n    contactsList.forEach(contact => {\n      // Only add if not already present (based on unique ID)\n      if (!uniqueContacts.has(contact.id)) {\n        uniqueContacts.set(contact.id, contact);\n      }\n    });\n    \n    // Return all unique contacts, preserving multiple numbers for same person\n    // Remove frontend filtering - backend already filters appropriately\n    return Array.from(uniqueContacts.values());\n  };\n\n  // Helper function to filter and format contacts for dropdown\n  const filteredContacts = deduplicateContacts(contacts).filter((contact: Contact) => \n    contact.isMyContact && // Only show saved contacts\n    (contact.name.toLowerCase().includes(contactSearchTerm.toLowerCase()) ||\n     contact.number.includes(contactSearchTerm))\n  );\n  \n  // Helper functions for contact selection in contacts module\n  const handleContactCheckboxToggle = (contactId: string) => {\n    setSelectedContacts(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(contactId)) {\n        newSet.delete(contactId);\n      } else {\n        newSet.add(contactId);\n      }\n      return newSet;\n    });\n  };\n\n  const handleSelectAllContacts = () => {\n    const filteredContactIds = filteredContacts.map(contact => contact.id);\n    \n    if (selectedContacts.size === filteredContactIds.length) {\n      // All are selected, unselect all\n      setSelectedContacts(new Set());\n    } else {\n      // Not all are selected, select all\n      setSelectedContacts(new Set(filteredContactIds));\n    }\n  };\n\n  const handleAddToContactGroups = () => {\n    setShowAddToGroupsDialog(true);\n    setSelectedGroupsForAdd(new Set());\n  };\n\n  // Helper function to handle contact selection for messaging\n  const handleContactSelect = (contact: Contact) => {\n    // Extract the phone number without country code formatting\n    const phoneNumber = contact.number.replace(/\\D/g, ''); // Remove all non-digits\n    \n    // Try to determine country code from the number\n    let extractedCountryCode = \"+91\"; // Default\n    let extractedPhoneNumber = phoneNumber;\n    \n    // Check for common country codes\n    if (phoneNumber.startsWith('91') && phoneNumber.length === 12) {\n      extractedCountryCode = \"+91\";\n      extractedPhoneNumber = phoneNumber.substring(2);\n    } else if (phoneNumber.startsWith('1') && phoneNumber.length === 11) {\n      extractedCountryCode = \"+1\";\n      extractedPhoneNumber = phoneNumber.substring(1);\n    } else if (phoneNumber.startsWith('44') && phoneNumber.length >= 11) {\n      extractedCountryCode = \"+44\";\n      extractedPhoneNumber = phoneNumber.substring(2);\n    }\n    // Add more country code detection as needed\n    \n    setCountryCode(extractedCountryCode);\n    setPhoneNumber(extractedPhoneNumber);\n    setShowContactsDropdown(false);\n    setContactSearchTerm(\"\");\n  };\n\n  // WebSocket connection for real-time updates using centralized manager\n  useEffect(() => {\n    const handleWebSocketMessage = (message: WebSocketMessage) => {\n      switch (message.type) {\n        case 'qr':\n          // Show QR section and invalidate QR-related queries to fetch new QR\n          setShowQRCode(true);\n          queryClient.invalidateQueries({ queryKey: ['/api/get-qr'] });\n          // Also trigger manual refetch to ensure QR displays immediately\n          setTimeout(() => {\n            refetchQR();\n          }, 1000);\n          break;\n        case 'connected':\n          // Invalidate session info when connected and refresh data\n          queryClient.invalidateQueries({ queryKey: ['/api/session-info'] });\n          queryClient.invalidateQueries({ queryKey: ['/api/chats'] });\n          queryClient.invalidateQueries({ queryKey: ['/api/contacts'] });\n          queryClient.invalidateQueries({ queryKey: ['/api/groups'] });\n          break;\n        case 'connection_status':\n          // Handle robust real-time connection status updates (like WhatsApp Web)\n          if (message.data?.isRealTime) {\n            const isConnected = message.data.connected;\n            const state = message.data.state;\n            \n            // Update session info query with real-time status\n            if (isConnected && message.data.sessionInfo) {\n              queryClient.setQueryData(['/api/session-info'], message.data.sessionInfo);\n              \n              // Refresh data when phone reconnects\n              queryClient.invalidateQueries({ queryKey: ['/api/chats'] });\n              queryClient.invalidateQueries({ queryKey: ['/api/contacts'] });\n              queryClient.invalidateQueries({ queryKey: ['/api/groups'] });\n            } else if (!isConnected) {\n              // Clear session data when phone disconnects\n              queryClient.setQueryData(['/api/session-info'], null);\n              \n              // Show QR code if session needs re-authentication\n              if (state === 'UNPAIRED' || state === 'TIMEOUT') {\n                queryClient.invalidateQueries({ queryKey: ['/api/get-qr'] });\n              }\n            }\n            \n            console.log(`📱 Real-time status: ${isConnected ? 'Phone Connected' : 'Phone Disconnected'} (${state})`);\n          }\n          break;\n        case 'disconnected':\n        case 'logout':\n          // Invalidate all session-related queries\n          queryClient.invalidateQueries({ queryKey: ['/api/session-info'] });\n          queryClient.invalidateQueries({ queryKey: ['/api/get-qr'] });\n          break;\n        case 'chats_updated':\n          // Update chats cache with real-time data or invalidate for fresh fetch\n          if (message.data?.chats) {\n            queryClient.setQueryData(['/api/chats'], message.data.chats);\n          } else {\n            // If no data provided, invalidate cache to trigger fresh fetch\n            queryClient.invalidateQueries({ queryKey: ['/api/chats'] });\n          }\n          break;\n        case 'contacts_updated':\n          // Update contacts cache with real-time data\n          if (message.data?.contacts) {\n            queryClient.setQueryData(['/api/contacts'], message.data.contacts);\n          }\n          break;\n        case 'groups_updated':\n          // Update groups cache with real-time data\n          if (message.data?.groups) {\n            queryClient.setQueryData(['/api/groups'], message.data.groups);\n          }\n          break;\n        case 'new_message':\n          // Refresh chat list when new message arrives to update last message and unread count\n          queryClient.invalidateQueries({ queryKey: ['/api/chats'] });\n          console.log('🔄 New message received, refreshing chat list...');\n          break;\n        default:\n          // Handle unknown message types gracefully\n          if (message.type === 'chat_history_cleared') {\n            queryClient.invalidateQueries({ queryKey: ['/api/chats'] });\n            console.log('🗑️ Chat history cleared, refreshing chat list...');\n          }\n          break;\n      }\n    };\n\n    // Register event handler\n    websocketManager.addEventHandler(handleWebSocketMessage);\n    \n    // Cleanup on unmount\n    return () => {\n      websocketManager.removeEventHandler(handleWebSocketMessage);\n    };\n  }, [queryClient]);\n\n  // Send message mutation\n  const sendMessageMutation = useMutation({\n    mutationFn: (data: { phoneNumber: string; message: string; file?: File }) => {\n      if (data.file) {\n        // Send media message\n        const formData = new FormData();\n        formData.append('phoneNumber', data.phoneNumber);\n        formData.append('message', data.message);\n        formData.append('media', data.file);\n        \n        return fetch('/api/send-media-message', {\n          method: 'POST',\n          body: formData,\n        }).then(res => {\n          if (!res.ok) throw new Error('Failed to send media message');\n          return res.json();\n        });\n      } else {\n        // Send text message\n        return apiRequest(\"/api/send-message\", \"POST\", data);\n      }\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Message Sent\",\n        description: selectedFile ? \"Your media message has been sent successfully!\" : \"Your message has been sent successfully!\",\n      });\n      setPhoneNumber(\"\");\n      setMessage(\"\");\n      setSelectedFile(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Send\",\n        description: error.message || \"Failed to send message\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSendMessage = () => {\n    if (!sessionInfo) {\n      toast({\n        title: \"Not Connected\",\n        description: \"Please connect to WhatsApp first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!phoneNumber.trim()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please enter phone number\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!message.trim() && !selectedFile) {\n      toast({\n        title: \"Missing Content\",\n        description: \"Please enter a message or select a file to send\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Combine country code with phone number\n    const fullPhoneNumber = phoneNumber.startsWith('+') ? phoneNumber.trim() : `${countryCode}${phoneNumber.trim()}`;\n    \n    sendMessageMutation.mutate({\n      phoneNumber: fullPhoneNumber,\n      message: message.trim(),\n      file: selectedFile || undefined,\n    });\n  };\n\n  const handleFileSelect = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      setSelectedFile(file);\n    }\n  }, []);\n\n  const removeSelectedFile = useCallback(() => {\n    setSelectedFile(null);\n  }, []);\n\n  const handleDragOver = useCallback((event: React.DragEvent) => {\n    event.preventDefault();\n    setIsDragOver(true);\n  }, []);\n\n  const handleDragLeave = useCallback((event: React.DragEvent) => {\n    event.preventDefault();\n    setIsDragOver(false);\n  }, []);\n\n  const handleDrop = useCallback((event: React.DragEvent) => {\n    event.preventDefault();\n    setIsDragOver(false);\n    const file = event.dataTransfer.files[0];\n    if (file) {\n      setSelectedFile(file);\n    }\n  }, []);\n\n  // Create Contact Group mutation\n  const createContactGroupMutation = useMutation({\n    mutationFn: (data: { name: string; description: string }) =>\n      apiRequest(\"/api/contact-groups\", \"POST\", data),\n    onSuccess: () => {\n      toast({\n        title: \"Contact Group Created\",\n        description: \"Your contact group has been created successfully!\",\n      });\n      setShowCreateGroupDialog(false);\n      setNewGroupName(\"\");\n      setNewGroupDescription(\"\");\n      queryClient.invalidateQueries({ queryKey: ['/api/contact-groups'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Create\",\n        description: error.message || \"Failed to create contact group\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete Contact Group mutation\n  const deleteContactGroupMutation = useMutation({\n    mutationFn: (groupId: string) => apiRequest(`/api/contact-groups/${groupId}`, \"DELETE\"),\n    onSuccess: () => {\n      toast({\n        title: \"Contact Group Deleted\",\n        description: \"Contact group has been deleted successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/contact-groups'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Delete\",\n        description: error.message || \"Failed to delete contact group\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Send Bulk Campaign mutation\n  const sendBulkCampaignMutation = useMutation({\n    mutationFn: (campaignId: string) =>\n      apiRequest(`/api/bulk-campaigns/${campaignId}/send`, \"POST\"),\n    onSuccess: () => {\n      toast({\n        title: \"Campaign Sent\",\n        description: \"Your bulk messaging campaign has been sent successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/bulk-campaigns'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Send Campaign\",\n        description: error.message || \"Failed to send bulk messaging campaign\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Send messages directly to a contact group\n  const sendContactGroupMutation = useMutation({\n    mutationFn: (data: { groupId: string; message: string }) =>\n      apiRequest(`/api/contact-groups/${data.groupId}/send`, \"POST\", { message: data.message }),\n    onSuccess: () => {\n      toast({\n        title: \"Messages Sent\",\n        description: \"Bulk messages sent successfully!\",\n      });\n      setShowBulkMessageDialog(false);\n      setBulkMessage(\"\");\n      setSelectedContactGroup(\"\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Send Messages\",\n        description: error.message || \"Failed to send messages\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Enhanced campaign creation mutation\n  const createBulkCampaignMutation = useMutation({\n    mutationFn: async (formData: FormData) => {\n      const response = await fetch('/api/campaigns/create', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to create campaign');\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Campaign Created\",\n        description: \"Campaign has been created successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bulk-campaigns\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Create Campaign\",\n        description: error.message || \"Failed to create campaign.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n\n\n  // Media file handler\n  const handleMediaSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      setSelectedMedia(file);\n    }\n  };\n\n  // Enhanced campaign creation handler\n  const handleCreateEnhancedCampaign = async () => {\n    if (!newCampaignName.trim() || !bulkMessage.trim()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please provide campaign name and message.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (targetType === 'contact_group' && !selectedContactGroup) {\n      toast({\n        title: \"Missing Target\",\n        description: \"Please select a contact group.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (targetType === 'whatsapp_group' && !selectedWhatsAppGroup) {\n      toast({\n        title: \"Missing Target\",\n        description: \"Please select a WhatsApp group.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('name', newCampaignName);\n    formData.append('message', bulkMessage);\n    formData.append('targetType', targetType);\n    formData.append('scheduleType', scheduleType);\n    formData.append('minInterval', minInterval.toString());\n    formData.append('maxInterval', maxInterval.toString());\n\n    if (targetType === 'contact_group') {\n      formData.append('contactGroupId', selectedContactGroup);\n    } else if (targetType === 'whatsapp_group') {\n      formData.append('whatsappGroupId', selectedWhatsAppGroup);\n    }\n\n    if (scheduleType === 'scheduled' && timePost) {\n      formData.append('timePost', timePost);\n    }\n    \n    if (scheduleHours.length > 0) {\n      formData.append('scheduleHours', JSON.stringify(scheduleHours));\n    }\n\n    if (selectedMedia) {\n      formData.append('media', selectedMedia);\n    }\n\n    try {\n      await createBulkCampaignMutation.mutateAsync(formData);\n      \n      // Reset form\n      setNewCampaignName('');\n      setBulkMessage('');\n      setSelectedContactGroup('');\n      setSelectedWhatsAppGroup('');\n      setTargetType('contact_group');\n      setScheduleType('immediate');\n      setTimePost('');\n      setMinInterval(1);\n      setMaxInterval(10);\n      setSelectedMedia(null);\n      setScheduleHours([]);\n      setShowBulkMessageDialog(false);\n    } catch (error) {\n      // Error handled by mutation\n    }\n  };\n\n  // Campaign control functions\n  const executeCampaign = async (campaignId: string) => {\n    try {\n      await apiRequest(`/api/campaigns/${campaignId}/execute`, \"POST\");\n      toast({\n        title: \"Campaign Started\",\n        description: \"Campaign execution has begun.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bulk-campaigns\"] });\n    } catch (error: any) {\n      toast({\n        title: \"Failed to Start Campaign\",\n        description: error.message || \"Failed to start campaign.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const pauseCampaign = async (campaignId: string) => {\n    try {\n      await apiRequest(`/api/campaigns/${campaignId}/pause`, \"POST\");\n      toast({\n        title: \"Campaign Paused\",\n        description: \"Campaign has been paused.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bulk-campaigns\"] });\n    } catch (error: any) {\n      toast({\n        title: \"Failed to Pause Campaign\",\n        description: error.message || \"Failed to pause campaign.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const resumeCampaign = async (campaignId: string) => {\n    try {\n      await apiRequest(`/api/campaigns/${campaignId}/resume`, \"POST\");\n      toast({\n        title: \"Campaign Resumed\",\n        description: \"Campaign has been resumed.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bulk-campaigns\"] });\n    } catch (error: any) {\n      toast({\n        title: \"Failed to Resume Campaign\",\n        description: error.message || \"Failed to resume campaign.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Restart campaign function\n  const restartCampaign = async (campaignId: string) => {\n    try {\n      await apiRequest(`/api/campaigns/${campaignId}/restart`, \"POST\");\n      toast({\n        title: \"Campaign Restarted\",\n        description: \"Campaign has been restarted successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bulk-campaigns\"] });\n    } catch (error: any) {\n      toast({\n        title: \"Failed to Restart Campaign\",\n        description: error.message || \"Failed to restart campaign.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Delete campaign function\n  const deleteCampaign = async (campaignId: string) => {\n    try {\n      await apiRequest(`/api/campaigns/${campaignId}`, \"DELETE\");\n      toast({\n        title: \"Campaign Deleted\",\n        description: \"Campaign has been deleted successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bulk-campaigns\"] });\n    } catch (error: any) {\n      toast({\n        title: \"Failed to Delete Campaign\",\n        description: error.message || \"Failed to delete campaign.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Clone campaign function\n  const cloneCampaign = (campaign: BulkCampaign) => {\n    // Pre-fill the form with campaign data\n    setNewCampaignName(`${campaign.name} (Copy)`);\n    setBulkMessage(campaign.message);\n    if (campaign.contactGroupId) {\n      setSelectedContactGroup(campaign.contactGroupId);\n      setTargetType('contact_group');\n    }\n    setScheduleType('immediate');\n    setTimePost('');\n    setMinInterval(1);\n    setMaxInterval(10);\n    setSelectedMedia(null);\n    \n    // Open the dialog\n    setShowBulkMessageDialog(true);\n    \n    toast({\n      title: \"Campaign Cloned\",\n      description: \"Campaign data has been loaded for editing. Review and create when ready.\",\n    });\n  };\n\n  // Import CSV mutation\n  const importCsvMutation = useMutation({\n    mutationFn: async ({ groupId, file }: { groupId: string; file: File }) => {\n      setImportingGroupId(groupId); // Set the specific group being imported\n      const formData = new FormData();\n      formData.append('csv', file);\n      const response = await fetch(`/api/contact-groups/${groupId}/import-csv`, {\n        method: 'POST',\n        body: formData,\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to import CSV');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      toast({\n        title: \"CSV Imported Successfully\",\n        description: `Imported ${data.validContacts} valid contacts, ${data.invalidContacts} invalid, ${data.duplicateContacts} duplicates`,\n      });\n      setImportingGroupId(null); // Clear importing state\n      // Invalidate all related queries including the specific group\n      queryClient.invalidateQueries({ queryKey: ['/api/contact-groups'] });\n      queryClient.invalidateQueries({ queryKey: [`/api/contact-groups/${variables.groupId}`] });\n      queryClient.invalidateQueries({ queryKey: [`/api/contact-groups/${variables.groupId}/members`] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Import CSV\",\n        description: error.message || \"Failed to import CSV file\",\n        variant: \"destructive\",\n      });\n      setImportingGroupId(null); // Clear importing state on error\n    },\n  });\n\n  // Handle CSV file upload\n  const handleCSVUpload = (groupId: string, file: File) => {\n    importCsvMutation.mutate({ groupId, file });\n  };\n\n  // Mutation for adding contacts to groups\n  const addToGroupsMutation = useMutation({\n    mutationFn: async ({ contactIds, groupIds }: { contactIds: string[]; groupIds: string[] }) => {\n      return apiRequest('/api/contacts/add-to-groups', \"POST\", { contactIds, groupIds });\n    },\n    onSuccess: (data: any) => {\n      toast({\n        title: \"Contacts Added\",\n        description: `Successfully added ${selectedContacts.size} contact${selectedContacts.size !== 1 ? 's' : ''} to ${selectedGroupsForAdd.size} group${selectedGroupsForAdd.size !== 1 ? 's' : ''}.`,\n      });\n      setSelectedContacts(new Set());\n      setSelectedGroupsForAdd(new Set());\n      setShowAddToGroupsDialog(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/contact-groups\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/contacts/bulk-group-memberships\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error Adding Contacts\",\n        description: error.message || \"Failed to add contacts to groups.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Handler for adding contacts to groups\n  const handleAddContactsToGroups = () => {\n    const contactIds = Array.from(selectedContacts);\n    const groupIds = Array.from(selectedGroupsForAdd);\n    addToGroupsMutation.mutate({ contactIds, groupIds });\n  };\n\n  // Mutation for removing contact from a group\n  const removeFromGroupMutation = useMutation({\n    mutationFn: async ({ contactId, groupId }: { contactId: string; groupId: string }) => {\n      return apiRequest(`/api/contacts/${contactId}/remove-from-group/${groupId}`, \"DELETE\");\n    },\n    onSuccess: (data: any, variables) => {\n      toast({\n        title: \"Contact Removed\",\n        description: `Contact removed from group successfully.`,\n      });\n      // Update local state to remove the group from contact's membership\n      setContactGroupMemberships(prev => {\n        const newMap = new Map(prev);\n        const currentGroups = newMap.get(variables.contactId) || [];\n        const updatedGroups = currentGroups.filter(group => group.id !== variables.groupId);\n        if (updatedGroups.length > 0) {\n          newMap.set(variables.contactId, updatedGroups);\n        } else {\n          newMap.delete(variables.contactId);\n        }\n        return newMap;\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/contact-groups\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/contacts/bulk-group-memberships\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error Removing Contact\",\n        description: error.message || \"Failed to remove contact from group.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Load contact group memberships using bulk endpoint\n  const { data: bulkMemberships } = useQuery<Record<string, ContactGroup[]>>({\n    queryKey: ['/api/contacts/bulk-group-memberships'],\n    enabled: !contactsLoading && contacts && contacts.length > 0,\n    staleTime: 30000, // Cache for 30 seconds\n  });\n\n  // Process bulk memberships when data is available\n  useEffect(() => {\n    if (bulkMemberships && contacts && contacts.length > 0) {\n      const membershipsMap = new Map<string, ContactGroup[]>();\n      \n      // Only process contacts that are \"My Contacts\"\n      const myContacts = deduplicateContacts(contacts).filter(contact => contact.isMyContact);\n      \n      for (const contact of myContacts) {\n        // Clean the contact number for matching (same logic as backend)\n        let cleanNumber = contact.number.replace(/[^0-9+]/g, '');\n        if (cleanNumber && !cleanNumber.startsWith('+') && cleanNumber.length === 10) {\n          cleanNumber = '+91' + cleanNumber;\n        }\n        \n        // Check if this contact has group memberships\n        const groups = bulkMemberships[cleanNumber] || [];\n        if (groups.length > 0) {\n          membershipsMap.set(contact.id, groups);\n        }\n      }\n      \n      setContactGroupMemberships(membershipsMap);\n    }\n  }, [bulkMemberships, contacts, contactsLoading]);\n\n  // Export all groups CSV\n  const exportAllGroupsCSV = async () => {\n    try {\n      const response = await fetch('/api/groups/export-all-csv');\n      if (!response.ok) throw new Error('Failed to export CSV files');\n      \n      const data = await response.json();\n      \n      if (!data.success || !data.files) {\n        throw new Error('Invalid response format');\n      }\n      \n      // Download each CSV file separately\n      Object.entries(data.files).forEach(([filename, content]) => {\n        const blob = new Blob([content as string], { type: 'text/csv;charset=utf-8;' });\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = filename;\n        document.body.appendChild(a);\n        a.click();\n        window.URL.revokeObjectURL(url);\n        document.body.removeChild(a);\n      });\n      \n      toast({\n        title: \"CSVs Exported\",\n        description: `Successfully exported ${data.totalGroups} group CSV files!`,\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Export Failed\",\n        description: error.message || \"Failed to export CSV files\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Logout mutation\n  const logoutMutation = useMutation({\n    mutationFn: () => apiRequest('/api/logout', 'POST'),\n    onSuccess: () => {\n      // Show QR code immediately and refresh data\n      setShowQRCode(true);\n      \n      // Navigate to account view to show QR code\n      setSelectedModule('account');\n      setShowAccountView(true);\n      \n      // Clear session data from cache\n      queryClient.setQueryData(['/api/session-info'], null);\n      \n      // Force refresh QR and other data\n      queryClient.invalidateQueries({ queryKey: ['/api/get-qr'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/session-info'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/chats'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/contacts'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/groups'] });\n      \n      // Manually trigger QR fetch after a short delay\n      setTimeout(() => {\n        refetchQR();\n      }, 2000);\n      \n      toast({\n        title: \"Logged Out\",\n        description: \"Successfully logged out from WhatsApp. Scan QR to reconnect.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Logout Failed\",\n        description: error.message || \"Failed to logout. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Auto refresh data every 60 seconds (automated resync)\n  useEffect(() => {\n    if (!sessionInfo) return;\n    \n    const autoRefreshInterval = setInterval(() => {\n      // Silently refresh data in background\n      queryClient.invalidateQueries({ queryKey: ['/api/chats'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/contacts'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/groups'] });\n    }, 60000); // Every 60 seconds\n\n    return () => clearInterval(autoRefreshInterval);\n  }, [sessionInfo, queryClient]);\n\n  // Show QR code when no session, hide when authenticated\n  useEffect(() => {\n    if (sessionInfo && showQRCode) {\n      setShowQRCode(false);\n    } else if (!sessionInfo) {\n      // Auto-show QR when not connected\n      setShowQRCode(true);\n    }\n  }, [sessionInfo, showQRCode]);\n\n  const exportContactsCSV = async () => {\n    try {\n      const response = await fetch('/api/contacts/download');\n      if (!response.ok) throw new Error('Failed to export CSV');\n\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = 'whatsapp_contacts.csv';\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n\n      toast({\n        title: 'CSV Exported',\n        description: 'Contacts have been exported successfully!',\n      });\n    } catch (error: any) {\n      toast({\n        title: 'Export Failed',\n        description: error.message || 'Failed to export CSV',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const handleCreateGroup = () => {\n    if (!newGroupName.trim()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please enter a group name\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    createContactGroupMutation.mutate({\n      name: newGroupName.trim(),\n      description: newGroupDescription.trim() || \"\",\n    });\n  };\n\n  const handleSendBulkMessage = () => {\n    if (!selectedContactGroup || !bulkMessage.trim()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    sendContactGroupMutation.mutate({\n      groupId: selectedContactGroup,\n      message: bulkMessage.trim(),\n    });\n  };\n\n  return (\n    <>\n      <div className=\"h-screen flex bg-gray-50 dark:bg-gray-900\">\n      {/* Left Sidebar - Features */}\n      <div className=\"w-64 bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700 flex flex-col\">\n        {/* Header */}\n        <div className=\"p-4 border-b border-gray-200 dark:border-gray-700\">\n          <div \n            className=\"flex items-center p-3 hover:bg-gray-50 dark:hover:bg-gray-700/50 rounded-lg transition-colors cursor-pointer\"\n            onClick={() => {\n              setShowAccountView(true);\n              setSelectedModule('account');\n            }}\n            data-testid=\"button-account-panel\"\n          >\n            <div className=\"w-8 h-8 bg-blue-500 rounded-lg flex items-center justify-center flex-shrink-0\">\n              {sessionInfo?.name ? (\n                <span className=\"text-white font-bold text-sm\">\n                  {sessionInfo.name.charAt(0).toUpperCase()}\n                </span>\n              ) : (\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n              )}\n            </div>\n            <div className=\"flex-1 text-center ml-3\">\n              {sessionInfo ? (\n                <div className=\"bg-blue-500 text-white px-3 py-1.5 rounded-lg text-sm font-medium max-w-full\">\n                  <div className=\"flex items-center justify-center\">\n                    <div className=\"w-2 h-2 rounded-full bg-white mr-2 flex-shrink-0\"></div>\n                    <span className=\"truncate break-words\">{sessionInfo.name}</span>\n                  </div>\n                </div>\n              ) : (\n                <Badge variant=\"secondary\" className=\"text-sm px-3 py-1\">\n                  <div className=\"w-2 h-2 rounded-full mr-2 bg-gray-400\"></div>\n                  <span className=\"whitespace-nowrap\">Not Connected</span>\n                </Badge>\n              )}\n            </div>\n          </div>\n          \n\n        </div>\n        \n\n\n        {/* Features List - Always show */}\n        <div className=\"px-3 py-4 space-y-2\">\n          {/* WhatsApp Feature */}\n          <div \n            className={`flex items-center p-3 rounded-lg cursor-pointer transition-colors ${\n              selectedFeature === 'whatsapp' \n                ? 'bg-blue-50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400' \n                : 'hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-300'\n            }`}\n            onClick={() => setSelectedFeature('whatsapp')}\n            data-testid=\"button-whatsapp\"\n          >\n            <div className=\"w-8 h-8 rounded-lg bg-green-100 dark:bg-green-900/20 flex items-center justify-center flex-shrink-0\">\n              <MessageSquare className=\"h-4 w-4 text-green-600 dark:text-green-400\" />\n            </div>\n            <span className=\"font-medium ml-3\">WhatsApp</span>\n          </div>\n\n          {/* RCS Feature */}\n          <div \n            className={`flex items-center p-3 rounded-lg cursor-pointer transition-colors ${\n              selectedFeature === 'rcs' \n                ? 'bg-blue-50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400' \n                : 'hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-300'\n            }`}\n            onClick={() => setSelectedFeature('rcs')}\n            data-testid=\"button-rcs\"\n          >\n            <div className=\"w-8 h-8 rounded-lg bg-purple-100 dark:bg-purple-900/20 flex items-center justify-center flex-shrink-0\">\n              <Smartphone className=\"h-4 w-4 text-purple-600 dark:text-purple-400\" />\n            </div>\n            <span className=\"font-medium ml-3\">RCS</span>\n          </div>\n        </div>\n        \n        {/* Additional modules/options can be added here when needed */}\n      </div>\n\n      {/* Middle Sidebar - Modules */}\n      {selectedFeature === 'whatsapp' && (\n        <div className=\"w-80 bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700\">\n          {/* Module Header */}\n          <div className=\"p-4 border-b border-gray-200 dark:border-gray-700\">\n            <h3 className=\"font-semibold text-gray-900 dark:text-white\">WhatsApp</h3>\n          </div>\n          \n          {/* Modules List */}\n          <div className=\"p-4 space-y-4\">\n            {/* Templates Section */}\n            <div className=\"space-y-2\">\n              <h4 className=\"text-sm font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">TEMPLATES</h4>\n              \n              <div \n                className={`flex items-center space-x-3 p-3 rounded-lg cursor-pointer transition-colors ${\n                  selectedModule === 'button-template' \n                    ? 'bg-blue-50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400' \n                    : 'hover:bg-gray-100 dark:hover:bg-gray-700'\n                }`}\n                onClick={() => setSelectedModule('button-template')}\n              >\n                <div className=\"w-8 h-8 rounded-lg bg-pink-100 dark:bg-pink-900/20 flex items-center justify-center\">\n                  <span className=\"text-pink-600 dark:text-pink-400 text-sm\">📱</span>\n                </div>\n                <div>\n                  <div className=\"font-medium text-sm\">Button template</div>\n                  <div className=\"text-xs text-gray-500\">Create interactive button messages</div>\n                </div>\n              </div>\n\n              <div \n                className={`flex items-center space-x-3 p-3 rounded-lg cursor-pointer transition-colors ${\n                  selectedModule === 'poll-template' \n                    ? 'bg-blue-50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400' \n                    : 'hover:bg-gray-100 dark:hover:bg-gray-700'\n                }`}\n                onClick={() => setSelectedModule('poll-template')}\n              >\n                <div className=\"w-8 h-8 rounded-lg bg-blue-100 dark:bg-blue-900/20 flex items-center justify-center\">\n                  <span className=\"text-blue-600 dark:text-blue-400 text-sm\">📊</span>\n                </div>\n                <div>\n                  <div className=\"font-medium text-sm\">Poll template</div>\n                  <div className=\"text-xs text-gray-500\">Create Poll messages</div>\n                </div>\n              </div>\n\n              <div \n                className={`flex items-center space-x-3 p-3 rounded-lg cursor-pointer transition-colors ${\n                  selectedModule === 'list-template' \n                    ? 'bg-blue-50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400' \n                    : 'hover:bg-gray-100 dark:hover:bg-gray-700'\n                }`}\n                onClick={() => setSelectedModule('list-template')}\n              >\n                <div className=\"w-8 h-8 rounded-lg bg-orange-100 dark:bg-orange-900/20 flex items-center justify-center\">\n                  <span className=\"text-orange-600 dark:text-orange-400 text-sm\">📝</span>\n                </div>\n                <div>\n                  <div className=\"font-medium text-sm\">List message template</div>\n                  <div className=\"text-xs text-gray-500\">Create list of items/options</div>\n                </div>\n              </div>\n            </div>\n\n            {/* Contact Section */}\n            <div className=\"space-y-2\">\n              <h4 className=\"text-sm font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">CONTACT</h4>\n              \n              <div \n                className={`flex items-center space-x-3 p-3 rounded-lg cursor-pointer transition-colors ${\n                  selectedModule === 'contacts' \n                    ? 'bg-blue-50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400' \n                    : 'hover:bg-gray-100 dark:hover:bg-gray-700'\n                }`}\n                onClick={() => setSelectedModule('contacts')}\n              >\n                <div className=\"w-8 h-8 rounded-lg bg-blue-100 dark:bg-blue-900/20 flex items-center justify-center\">\n                  <Users className=\"h-4 w-4 text-blue-600 dark:text-blue-400\" />\n                </div>\n                <div>\n                  <div className=\"font-medium text-sm\">Contacts</div>\n                  <div className=\"text-xs text-gray-500\">Create, edit your contacts</div>\n                </div>\n              </div>\n            </div>\n\n            {/* Existing Modules */}\n            <div className=\"space-y-2\">\n              <h4 className=\"text-sm font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">MESSAGING</h4>\n              \n              <div \n                className={`flex items-center space-x-3 p-3 rounded-lg cursor-pointer transition-colors ${\n                  selectedModule === 'send-message' \n                    ? 'bg-blue-50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400' \n                    : 'hover:bg-gray-100 dark:hover:bg-gray-700'\n                }`}\n                onClick={() => setSelectedModule('send-message')}\n              >\n                <div className=\"w-8 h-8 rounded-lg bg-green-100 dark:bg-green-900/20 flex items-center justify-center\">\n                  <Send className=\"h-4 w-4 text-green-600 dark:text-green-400\" />\n                </div>\n                <div className=\"font-medium text-sm\">Send Message</div>\n              </div>\n\n              <div \n                className={`flex items-center space-x-3 p-3 rounded-lg cursor-pointer transition-colors ${\n                  selectedModule === 'chats' \n                    ? 'bg-blue-50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400' \n                    : 'hover:bg-gray-100 dark:hover:bg-gray-700'\n                }`}\n                onClick={() => setSelectedModule('chats')}\n              >\n                <div className=\"w-8 h-8 rounded-lg bg-blue-100 dark:bg-blue-900/20 flex items-center justify-center\">\n                  <MessageSquare className=\"h-4 w-4 text-blue-600 dark:text-blue-400\" />\n                </div>\n                <div className=\"font-medium text-sm\">Chats</div>\n              </div>\n\n              <div \n                className={`flex items-center space-x-3 p-3 rounded-lg cursor-pointer transition-colors ${\n                  selectedModule === 'groups' \n                    ? 'bg-blue-50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400' \n                    : 'hover:bg-gray-100 dark:hover:bg-gray-700'\n                }`}\n                onClick={() => setSelectedModule('groups')}\n              >\n                <div className=\"w-8 h-8 rounded-lg bg-green-100 dark:bg-green-900/20 flex items-center justify-center\">\n                  <Users className=\"h-4 w-4 text-green-600 dark:text-green-400\" />\n                </div>\n                <div className=\"font-medium text-sm\">Groups</div>\n              </div>\n\n              <div \n                className={`flex items-center space-x-3 p-3 rounded-lg cursor-pointer transition-colors ${\n                  selectedModule === 'contact-groups' \n                    ? 'bg-blue-50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400' \n                    : 'hover:bg-gray-100 dark:hover:bg-gray-700'\n                }`}\n                onClick={() => setSelectedModule('contact-groups')}\n              >\n                <div className=\"w-8 h-8 rounded-lg bg-purple-100 dark:bg-purple-900/20 flex items-center justify-center\">\n                  <Users className=\"h-4 w-4 text-purple-600 dark:text-purple-400\" />\n                </div>\n                <div className=\"font-medium text-sm\">Contact Groups</div>\n              </div>\n\n              <div \n                className={`flex items-center space-x-3 p-3 rounded-lg cursor-pointer transition-colors ${\n                  selectedModule === 'bulk-messaging' \n                    ? 'bg-blue-50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400' \n                    : 'hover:bg-gray-100 dark:hover:bg-gray-700'\n                }`}\n                onClick={() => setSelectedModule('bulk-messaging')}\n              >\n                <div className=\"w-8 h-8 rounded-lg bg-yellow-100 dark:bg-yellow-900/20 flex items-center justify-center\">\n                  <Send className=\"h-4 w-4 text-yellow-600 dark:text-yellow-400\" />\n                </div>\n                <div className=\"font-medium text-sm\">Bulk Messaging</div>\n              </div>\n\n\n\n              {/* Reports Section */}\n              <h4 className=\"text-sm font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider mt-6 mb-2\">REPORTS</h4>\n              \n              <div \n                className={`flex items-center space-x-3 p-3 rounded-lg cursor-pointer transition-colors ${\n                  selectedModule === 'reports' \n                    ? 'bg-blue-50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400' \n                    : 'hover:bg-gray-100 dark:hover:bg-gray-700'\n                }`}\n                onClick={() => setSelectedModule('reports')}\n              >\n                <div className=\"w-8 h-8 rounded-lg bg-orange-100 dark:bg-orange-900/20 flex items-center justify-center\">\n                  <BarChart3 className=\"h-4 w-4 text-orange-600 dark:text-orange-400\" />\n                </div>\n                <div className=\"font-medium text-sm\">Reports</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n\n\n      {/* RCS Module */}\n      {selectedFeature === 'rcs' && (\n        <div className=\"w-80 bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700 overflow-y-auto\">\n          <div className=\"p-6\">\n            <h3 className=\"font-semibold text-gray-900 dark:text-white\">RCS</h3>\n            <p className=\"text-sm text-gray-500 dark:text-gray-400 mt-1\">\n              Rich Communication Services\n            </p>\n          </div>\n        </div>\n      )}\n\n      {/* Main Content Area */}\n      <div className=\"flex-1 overflow-hidden bg-gray-50 dark:bg-gray-900 flex flex-col\">\n        {selectedFeature === 'whatsapp' ? (\n          <div className=\"flex-1 flex flex-col overflow-hidden\">\n            {/* Account View Module */}\n            {selectedModule === 'account' && (\n              <div className=\"p-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <User className=\"h-5 w-5\" />\n                      <span>WhatsApp Account</span>\n                    </CardTitle>\n                    <CardDescription>\n                      Manage your WhatsApp connection and account settings\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-6\">\n                    {sessionInfo ? (\n                      /* Connected Account View */\n                      <div className=\"space-y-6\">\n                        {/* Account Info */}\n                        <div className=\"flex items-center justify-between p-6 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-200 dark:border-green-800\">\n                          <div className=\"flex items-center space-x-4\">\n                            <div className=\"w-16 h-16 bg-green-500 rounded-full flex items-center justify-center text-white text-2xl font-bold\">\n                              {sessionInfo.name.charAt(0).toUpperCase()}\n                            </div>\n                            <div className=\"flex-1\">\n                              <h3 className=\"text-xl font-semibold text-green-900 dark:text-green-100\">\n                                {sessionInfo.name}\n                              </h3>\n                              <div className=\"flex items-center text-green-700 dark:text-green-300 mt-1\">\n                                <div className=\"w-2 h-2 rounded-full bg-green-500 mr-2\"></div>\n                                <span className=\"text-sm\">Connected</span>\n                              </div>\n                              {sessionInfo.loginTime && (\n                                <p className=\"text-sm text-green-600 dark:text-green-400 mt-1\">\n                                  Connected: {new Date(sessionInfo.loginTime).toLocaleString()}\n                                </p>\n                              )}\n                            </div>\n                          </div>\n                          <Button \n                            variant=\"destructive\" \n                            size=\"sm\"\n                            onClick={() => logoutMutation.mutate()}\n                            disabled={logoutMutation.isPending}\n                            className=\"flex items-center space-x-2\"\n                            data-testid=\"button-logout-main\"\n                          >\n                            {logoutMutation.isPending ? (\n                              <>\n                                <Loader2 className=\"h-4 w-4 animate-spin\" />\n                                <span>Logging out...</span>\n                              </>\n                            ) : (\n                              <>\n                                <LogOut className=\"h-4 w-4\" />\n                                <span>Logout</span>\n                              </>\n                            )}\n                          </Button>\n                        </div>\n                      </div>\n                    ) : (\n                      /* QR Code View for Connection */\n                      <div className=\"space-y-6\">\n                        <div className=\"text-center\">\n                          <h3 className=\"text-lg font-semibold mb-2\">Connect Your WhatsApp</h3>\n                          <p className=\"text-muted-foreground mb-6\">\n                            Scan the QR code below with your WhatsApp mobile app to connect your account.\n                          </p>\n                        </div>\n\n                        {/* QR Code Display */}\n                        <div className=\"flex justify-center\">\n                          {qrData?.qr ? (\n                            <div className=\"bg-white p-8 rounded-2xl shadow-xl border\">\n                              <img\n                                src={qrData.qr.startsWith('data:') ? qrData.qr : `data:image/png;base64,${qrData.qr}`}\n                                alt=\"QR Code for WhatsApp Authentication\"\n                                className=\"w-80 h-80 mx-auto rounded-xl\"\n                                loading=\"lazy\"\n                              />\n                            </div>\n                          ) : (\n                            <div className=\"bg-white p-8 rounded-2xl shadow-xl border flex justify-center items-center w-96 h-96\">\n                              <div className=\"text-center\">\n                                <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n                                <p className=\"text-lg text-muted-foreground font-medium\">Generating QR Code...</p>\n                              </div>\n                            </div>\n                          )}\n                        </div>\n\n                        {/* Connection Status */}\n                        <div className=\"flex items-center justify-center space-x-2\">\n                          <div className=\"w-3 h-3 bg-green-500 rounded-full animate-pulse\"></div>\n                          <span className=\"text-lg text-muted-foreground font-medium\">QR Code Active</span>\n                        </div>\n\n\n\n                        {/* Instructions */}\n                        <div className=\"bg-blue-50 dark:bg-blue-900/20 p-6 rounded-lg border border-blue-200 dark:border-blue-800\">\n                          <h4 className=\"font-semibold text-blue-900 dark:text-blue-100 mb-3\">How to connect:</h4>\n                          <ol className=\"space-y-2 text-sm text-blue-800 dark:text-blue-200\">\n                            <li className=\"flex items-start\">\n                              <span className=\"font-medium mr-2\">1.</span>\n                              Open WhatsApp on your phone\n                            </li>\n                            <li className=\"flex items-start\">\n                              <span className=\"font-medium mr-2\">2.</span>\n                              Tap Menu (⋮) or Settings and select Linked Devices\n                            </li>\n                            <li className=\"flex items-start\">\n                              <span className=\"font-medium mr-2\">3.</span>\n                              Tap \"Link a Device\" and scan this QR code\n                            </li>\n                          </ol>\n                        </div>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n\n            {/* Send Message Module */}\n            {selectedModule === 'send-message' && (\n              <div className=\"p-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <MessageSquare className=\"h-5 w-5\" />\n                      <span>Send Single Message</span>\n                    </CardTitle>\n                    <CardDescription>\n                      Send a message to any WhatsApp number using your connected WhatsApp\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-6\">\n                    {/* Phone Number with Country Code */}\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"phone-number\">Recipient Phone Number</Label>\n                      <div className=\"flex space-x-2\">\n                        <Select value={countryCode} onValueChange={setCountryCode}>\n                          <SelectTrigger className=\"w-32\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {countryCodes.map((country) => (\n                              <SelectItem key={country.code} value={country.code}>\n                                {country.flag} {country.code}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <div className=\"flex-1 relative\" ref={contactsDropdownRef}>\n                          <Input\n                            id=\"phone-number\"\n                            type=\"tel\"\n                            value={phoneNumber}\n                            onChange={(e) => setPhoneNumber(e.target.value.replace(/[^0-9]/g, ''))}\n                            className=\"w-full pr-12\"\n                          />\n                          <Label \n                            htmlFor=\"phone-number\" \n                            className={`absolute left-3 pointer-events-none transition-all duration-200 ${\n                              fieldValues.phoneNumber\n                                ? \"hidden\"\n                                : \"top-3 text-sm text-gray-500 dark:text-gray-400\"\n                            }`}\n                          >\n                            1234567890\n                          </Label>\n                          \n                          {/* Contacts Button */}\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"absolute right-2 top-1/2 -translate-y-1/2 h-8 w-8 p-0 hover:bg-gray-100 dark:hover:bg-gray-700\"\n                            onClick={() => setShowContactsDropdown(!showContactsDropdown)}\n                            disabled={!sessionInfo || contacts.length === 0}\n                          >\n                            <UserCheck className=\"h-4 w-4 text-gray-500 dark:text-gray-400\" />\n                          </Button>\n                          \n                          {/* Contacts Dropdown */}\n                          {showContactsDropdown && (\n                            <div className=\"absolute top-full left-0 right-0 mt-1 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg z-50 max-h-64 overflow-hidden\">\n                              {/* Search Input */}\n                              <div className=\"p-3 border-b border-gray-200 dark:border-gray-700\">\n                                <div className=\"relative\">\n                                  <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                                  <Input\n                                    placeholder=\"Search contacts...\"\n                                    value={contactSearchTerm}\n                                    onChange={(e) => setContactSearchTerm(e.target.value)}\n                                    className=\"pl-10 h-8\"\n                                  />\n                                </div>\n                              </div>\n                              \n                              {/* Contacts List */}\n                              <div className=\"max-h-48 overflow-y-auto\">\n                                {filteredContacts.length === 0 ? (\n                                  <div className=\"p-4 text-center text-gray-500 dark:text-gray-400\">\n                                    {contactSearchTerm ? 'No contacts found' : 'No saved contacts available'}\n                                  </div>\n                                ) : (\n                                  filteredContacts.map((contact: Contact) => (\n                                    <button\n                                      key={contact.id}\n                                      onClick={() => handleContactSelect(contact)}\n                                      className=\"w-full text-left p-3 hover:bg-gray-50 dark:hover:bg-gray-700 border-b border-gray-100 dark:border-gray-700 last:border-b-0 flex items-center space-x-3\"\n                                    >\n                                      <div className=\"w-8 h-8 rounded-full bg-blue-100 dark:bg-blue-900 flex items-center justify-center\">\n                                        <Phone className=\"h-4 w-4 text-blue-600 dark:text-blue-400\" />\n                                      </div>\n                                      <div className=\"flex-1 min-w-0\">\n                                        <div className=\"font-medium text-gray-900 dark:text-white truncate\">\n                                          {contact.name}\n                                        </div>\n                                        <div className=\"text-sm text-gray-500 dark:text-gray-400 truncate\">\n                                          {contact.number}\n                                        </div>\n                                      </div>\n                                    </button>\n                                  ))\n                                )}\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Select country code and enter phone number (numbers only)\n                      </p>\n                    </div>\n\n                    {/* Message */}\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"message\">Message</Label>\n                      <div className=\"relative\">\n                        <Textarea\n                          id=\"message\"\n                          value={message}\n                          onChange={(e) => setMessage(e.target.value)}\n                          rows={4}\n                        />\n                        <Label \n                          htmlFor=\"message\" \n                          className={`absolute left-3 top-3 pointer-events-none transition-all duration-200 ${\n                            fieldValues.message\n                              ? \"hidden\"\n                              : \"text-sm text-gray-500 dark:text-gray-400\"\n                          }`}\n                        >\n                          Enter your message here... (optional if sending media)\n                        </Label>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {message.length}/1000 characters\n                      </p>\n                    </div>\n\n                    {/* File Upload with Drag & Drop */}\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"file-upload\">Media Attachment (Optional)</Label>\n                      <div\n                        className={`border-2 border-dashed rounded-lg p-6 transition-colors cursor-pointer ${\n                          isDragOver \n                            ? 'border-primary bg-primary/5' \n                            : 'border-muted-foreground/25 hover:border-muted-foreground/50'\n                        }`}\n                        onDragOver={handleDragOver}\n                        onDragLeave={handleDragLeave}\n                        onDrop={handleDrop}\n                        onClick={() => !selectedFile && document.getElementById('file-upload')?.click()}\n                      >\n                        <input\n                          id=\"file-upload\"\n                          type=\"file\"\n                          accept=\"image/*,video/*,audio/*,.pdf,.txt,.docx,.xlsx,.pptx,.doc,.xls,.ppt,.html,.epub,.ods,.zip,.json\"\n                          onChange={handleFileSelect}\n                          className=\"hidden\"\n                        />\n                        {selectedFile ? (\n                          <div className=\"text-center space-y-2\">\n                            <File className=\"h-8 w-8 text-primary mx-auto\" />\n                            <p className=\"text-sm font-medium text-foreground\">\n                              {selectedFile.name}\n                            </p>\n                            <p className=\"text-xs text-muted-foreground\">\n                              {(selectedFile.size / 1024 / 1024).toFixed(2)}MB\n                            </p>\n                            <Button\n                              type=\"button\"\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={removeSelectedFile}\n                            >\n                              Remove\n                            </Button>\n                          </div>\n                        ) : (\n                          <div className=\"text-center\">\n                            <Upload className=\"h-8 w-8 text-muted-foreground mx-auto mb-2\" />\n                            <p className=\"text-sm text-muted-foreground mb-1\">\n                              <span className=\"text-primary\">Click to upload</span>\n                              {\" \"}or drag and drop\n                            </p>\n                            <p className=\"text-xs text-muted-foreground\">\n                              Images, Videos, Audio, PDF, Documents (max 16MB)\n                            </p>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n\n                    {/* Send Button */}\n                    <Button\n                      onClick={handleSendMessage}\n                      disabled={sendMessageMutation.isPending || !sessionInfo || !phoneNumber.trim() || (!message.trim() && !selectedFile)}\n                      className=\"w-full\"\n                    >\n                      {sendMessageMutation.isPending ? (\n                        <>\n                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                          Sending...\n                        </>\n                      ) : (\n                        <>\n                          <Send className=\"mr-2 h-4 w-4\" />\n                          Send Message\n                        </>\n                      )}\n                    </Button>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n\n            {/* Template Modules */}\n            {selectedModule === 'button-template' && (\n              <div className=\"p-6\">\n                <Card>\n                    <CardHeader>\n                      <CardTitle>Button Template</CardTitle>\n                      <CardDescription>Create interactive button messages (Coming Soon)</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-center p-8\">\n                        <span className=\"text-4xl mb-4 block\">📱</span>\n                        <h3 className=\"text-lg font-semibold mb-2\">Button Template</h3>\n                        <p className=\"text-muted-foreground\">\n                          This feature will allow you to create interactive button messages for enhanced user engagement.\n                        </p>\n                      </div>\n                    </CardContent>\n                </Card>\n              </div>\n            )}\n\n            {selectedModule === 'poll-template' && (\n              <div className=\"p-6\">\n                <Card>\n                    <CardHeader>\n                      <CardTitle>Poll Template</CardTitle>\n                      <CardDescription>Create Poll messages (Coming Soon)</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-center p-8\">\n                        <span className=\"text-4xl mb-4 block\">📊</span>\n                        <h3 className=\"text-lg font-semibold mb-2\">Poll Template</h3>\n                        <p className=\"text-muted-foreground\">\n                          This feature will allow you to create poll messages to gather feedback from your contacts.\n                        </p>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              )}\n\n            {selectedModule === 'list-template' && (\n              <div className=\"p-6\">\n                <Card>\n                    <CardHeader>\n                      <CardTitle>List Message Template</CardTitle>\n                      <CardDescription>Create list of items/options (Coming Soon)</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"text-center p-8\">\n                        <span className=\"text-4xl mb-4 block\">📝</span>\n                        <h3 className=\"text-lg font-semibold mb-2\">List Message Template</h3>\n                        <p className=\"text-muted-foreground\">\n                          This feature will allow you to create structured list messages with multiple options.\n                        </p>\n                      </div>\n                    </CardContent>\n                </Card>\n              </div>\n            )}\n\n            {selectedModule === 'contacts' && (\n                <div className=\"flex flex-col h-full\">\n                  {/* Sticky Header */}\n                  <div className=\"sticky top-0 z-10 bg-white dark:bg-gray-900 p-6 pb-4 border-b border-gray-200 dark:border-gray-700 flex-shrink-0\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Phone className=\"h-5 w-5\" />\n                        <span className=\"text-lg font-semibold\">WhatsApp Contacts</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Button \n                          onClick={handleAddToContactGroups}\n                          disabled={!sessionInfo || selectedContacts.size === 0}\n                          variant=\"outline\"\n                          size=\"sm\"\n                        >\n                          <Users className=\"h-4 w-4 mr-2\" />\n                          Add to Contact Groups\n                        </Button>\n                        <Button \n                          onClick={exportContactsCSV}\n                          disabled={!sessionInfo || contacts.length === 0}\n                          size=\"sm\"\n                        >\n                          <Download className=\"h-4 w-4 mr-2\" />\n                          Export CSV\n                        </Button>\n                      </div>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mb-4\">\n                      Your WhatsApp contacts from connected device\n                    </p>\n                    \n                    {/* Controls */}\n                    {sessionInfo && contacts.length > 0 && (\n                      <div className=\"flex items-center justify-between gap-4\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Checkbox\n                            id=\"select-all-contacts\"\n                            checked={\n                              filteredContacts.length > 0 &&\n                              selectedContacts.size === filteredContacts.length\n                            }\n                            onCheckedChange={handleSelectAllContacts}\n                            data-testid=\"checkbox-select-all-contacts\"\n                          />\n                          <label \n                            htmlFor=\"select-all-contacts\" \n                            className=\"text-sm font-medium cursor-pointer\"\n                          >\n                            Select All ({filteredContacts.length} contacts)\n                          </label>\n                        </div>\n                        \n                        {/* Search Bar */}\n                        <div className=\"relative max-w-md flex-1\">\n                          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                          <Input\n                            placeholder=\"Search contacts...\"\n                            value={contactSearchTerm}\n                            onChange={(e) => setContactSearchTerm(e.target.value)}\n                            className=\"pl-10\"\n                            data-testid=\"input-search-contacts\"\n                          />\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                  \n                  {/* Scrollable Content */}\n                  <div className=\"flex-1 overflow-y-auto p-6 pr-2 min-h-0\">\n                    {!sessionInfo ? (\n                      <div className=\"text-center p-8\">\n                        <Phone className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                        <h3 className=\"text-lg font-semibold mb-2\">Connect WhatsApp</h3>\n                        <p className=\"text-muted-foreground\">\n                          Please connect to WhatsApp first to view your contacts.\n                        </p>\n                      </div>\n                    ) : contactsLoading ? (\n                      <div className=\"text-center p-8\">\n                        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto\"></div>\n                        <p className=\"mt-4 text-muted-foreground\">Loading contacts...</p>\n                      </div>\n                    ) : contacts.length === 0 ? (\n                      <div className=\"text-center p-8\">\n                        <Phone className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                        <h3 className=\"text-lg font-semibold mb-2\">No Contacts Found</h3>\n                        <p className=\"text-muted-foreground\">\n                          Your WhatsApp contacts will appear here once they are synced.\n                        </p>\n                      </div>\n                    ) : (\n                      <div className=\"space-y-2\">\n                        {/* Contacts List */}\n                        {filteredContacts.length === 0 ? (\n                          <div className=\"text-center p-8\">\n                            <Search className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                            <h3 className=\"text-lg font-semibold mb-2\">No contacts found</h3>\n                            <p className=\"text-muted-foreground\">\n                              {contactSearchTerm ? `No contacts match \"${contactSearchTerm}\"` : \"No contacts available\"}\n                            </p>\n                          </div>\n                        ) : (\n                          filteredContacts.map((contact: Contact) => (\n                            <div key={contact.id} className=\"border rounded-lg p-4 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors\">\n                              <div className=\"flex items-center justify-between\">\n                                <div className=\"flex items-center space-x-3\">\n                                  <Checkbox\n                                    id={`contact-${contact.id}`}\n                                    checked={selectedContacts.has(contact.id)}\n                                    onCheckedChange={() => handleContactCheckboxToggle(contact.id)}\n                                    data-testid={`checkbox-contact-${contact.id}`}\n                                  />\n                                  <div className=\"w-10 h-10 rounded-full bg-blue-200 dark:bg-blue-700 flex items-center justify-center\">\n                                    <Phone className=\"h-5 w-5\" />\n                                  </div>\n                                  <div className=\"flex-1\">\n                                    <h4 className=\"font-semibold\">{contact.name}</h4>\n                                    <p className=\"text-sm text-muted-foreground\">\n                                      {contact.number}\n                                    </p>\n                                    {/* Contact Group Tags */}\n                                    {contactGroupMemberships.get(contact.id) && contactGroupMemberships.get(contact.id)!.length > 0 && (\n                                      <div className=\"flex flex-wrap gap-1 mt-2\">\n                                        {contactGroupMemberships.get(contact.id)!.map((group) => (\n                                          <Badge \n                                            key={group.id} \n                                            variant=\"secondary\" \n                                            className=\"text-xs flex items-center gap-1 pr-1\"\n                                          >\n                                            <span>{group.name}</span>\n                                            <button\n                                              onClick={(e) => {\n                                                e.stopPropagation();\n                                                removeFromGroupMutation.mutate({ \n                                                  contactId: contact.number, \n                                                  groupId: group.id \n                                                });\n                                              }}\n                                              className=\"ml-1 hover:bg-red-200 dark:hover:bg-red-800 rounded-full p-0.5 transition-colors\"\n                                              data-testid={`button-remove-${contact.id}-from-${group.id}`}\n                                              disabled={removeFromGroupMutation.isPending}\n                                            >\n                                              <X className=\"h-3 w-3\" />\n                                            </button>\n                                          </Badge>\n                                        ))}\n                                      </div>\n                                    )}\n                                  </div>\n                                </div>\n                                <div className=\"flex items-center space-x-2\">\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"outline\"\n                                    onClick={() => setLocation(`/chat/${contact.id}`)}\n                                    data-testid={`button-chat-${contact.id}`}\n                                  >\n                                    <MessageSquare className=\"h-4 w-4 mr-1\" />\n                                    Chat\n                                  </Button>\n                                </div>\n                              </div>\n                            </div>\n                          ))\n                        )}\n                      </div>\n                    )}\n                  </div>\n                </div>\n              )}\n\n\n\n            {/* Contact Groups Module */}\n            {selectedModule === 'contact-groups' && (\n              <div className=\"p-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Users className=\"h-5 w-5\" />\n                        <span>Contact Groups</span>\n                      </div>\n                      <Button \n                        onClick={() => setShowCreateGroupDialog(true)}\n                        disabled={!sessionInfo}\n                      >\n                        <Plus className=\"h-4 w-4 mr-2\" />\n                        Create Group\n                      </Button>\n                    </CardTitle>\n                    <CardDescription>\n                      Manage your contact groups for bulk messaging campaigns\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    {contactGroupsLoading ? (\n                      <div className=\"text-center p-8\">\n                        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto\"></div>\n                        <p className=\"mt-4 text-muted-foreground\">Loading contact groups...</p>\n                      </div>\n                    ) : contactGroups.length === 0 ? (\n                      <div className=\"text-center p-8\">\n                        <Users className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                        <h3 className=\"text-lg font-semibold mb-2\">No Contact Groups</h3>\n                        <p className=\"text-muted-foreground mb-4\">\n                          Create your first contact group to start organizing your contacts for bulk messaging.\n                        </p>\n                        <Button onClick={() => setShowCreateGroupDialog(true)}>\n                          <Plus className=\"h-4 w-4 mr-2\" />\n                          Create First Group\n                        </Button>\n                      </div>\n                    ) : (\n                      <div className=\"space-y-4\">\n                        {contactGroups.map((group: ContactGroup) => (\n                          <div key={group.id} className=\"border rounded-lg p-4 space-y-3\">\n                            <div className=\"flex items-center justify-between\">\n                              <div>\n                                <h4 className=\"font-semibold\">{group.name}</h4>\n                                {group.description && (\n                                  <p className=\"text-sm text-muted-foreground\">{group.description}</p>\n                                )}\n                              </div>\n                              <div className=\"flex items-center space-x-2\">\n                                <input\n                                  type=\"file\"\n                                  accept=\".csv\"\n                                  className=\"hidden\"\n                                  id={`csv-upload-${group.id}`}\n                                  onChange={(e) => {\n                                    const file = e.target.files?.[0];\n                                    if (file) handleCSVUpload(group.id, file);\n                                  }}\n                                />\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => setLocation(`/group-contacts/${group.id}`)}\n                                  className=\"flex items-center space-x-2\"\n                                >\n                                  <Users className=\"h-4 w-4\" />\n                                  <span>Show</span>\n                                </Button>\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => document.getElementById(`csv-upload-${group.id}`)?.click()}\n                                  disabled={importingGroupId === group.id}\n                                  className=\"flex items-center space-x-2\"\n                                >\n                                  {importingGroupId === group.id ? (\n                                    <>\n                                      <Loader2 className=\"h-4 w-4 animate-spin\" />\n                                      <span>Importing...</span>\n                                    </>\n                                  ) : (\n                                    <>\n                                      <Upload className=\"h-4 w-4\" />\n                                      <span>Import</span>\n                                    </>\n                                  )}\n                                </Button>\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => window.open(`/api/contact-groups/${group.id}/export`)}\n                                  className=\"flex items-center space-x-2\"\n                                >\n                                  <Download className=\"h-4 w-4\" />\n                                  <span>Export</span>\n                                </Button>\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => deleteContactGroupMutation.mutate(group.id)}\n                                  disabled={deleteContactGroupMutation.isPending}\n                                  className=\"flex items-center space-x-2\"\n                                >\n                                  {deleteContactGroupMutation.isPending ? (\n                                    <>\n                                      <Loader2 className=\"h-4 w-4 animate-spin\" />\n                                      <span>Deleting...</span>\n                                    </>\n                                  ) : (\n                                    <>\n                                      <Trash2 className=\"h-4 w-4\" />\n                                      <span>Delete</span>\n                                    </>\n                                  )}\n                                </Button>\n                              </div>\n                            </div>\n                            <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                              <span>Total: {group.totalContacts}</span>\n                              <span>Valid: {group.validContacts}</span>\n                              <span>Invalid: {group.invalidContacts}</span>\n                              <span>Duplicates: {group.duplicateContacts}</span>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n                </div>\n              )}\n\n            {/* Enhanced Bulk Messaging Module */}\n            {selectedModule === 'bulk-messaging' && (\n              <div className=\"p-6 space-y-6 overflow-y-auto max-h-screen\">\n                <div className=\"flex justify-between items-center\">\n                  <div>\n                    <h1 className=\"text-3xl font-bold tracking-tight\">Bulk Messaging</h1>\n                    <p className=\"text-muted-foreground\">Create and manage bulk messaging campaigns</p>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Dialog open={showBulkMessageDialog} onOpenChange={setShowBulkMessageDialog}>\n                      <DialogTrigger asChild>\n                        <Button disabled={!sessionInfo}>\n                          <Plus className=\"h-4 w-4 mr-2\" />\n                          Create Campaign\n                        </Button>\n                      </DialogTrigger>\n                    <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n                      <DialogHeader>\n                        <DialogTitle>Create New Campaign</DialogTitle>\n                      </DialogHeader>\n                      \n                      <div className=\"space-y-6\">\n                        <div className=\"space-y-4\">\n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"campaignName\">Campaign Name</Label>\n                            <Input\n                              id=\"campaignName\"\n                              placeholder=\"Enter campaign name\"\n                              value={newCampaignName}\n                              onChange={(e) => setNewCampaignName(e.target.value)}\n                            />\n                          </div>\n                          \n                          <div className=\"space-y-2\">\n                            <Label>Target Type</Label>\n                            <Select value={targetType} onValueChange={setTargetType}>\n                              <SelectTrigger>\n                                <SelectValue />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"contact_group\">Contact Group</SelectItem>\n                                <SelectItem value=\"local_contacts\">All Local Contacts</SelectItem>\n                                <SelectItem value=\"whatsapp_group\">WhatsApp Group</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n\n                          {targetType === \"contact_group\" && (\n                            <div className=\"space-y-2\">\n                              <Label>Contact Group</Label>\n                              <Select value={selectedContactGroup} onValueChange={setSelectedContactGroup}>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Select contact group\" />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  {contactGroups.map((group: ContactGroup) => (\n                                    <SelectItem key={group.id} value={group.id}>\n                                      {group.name} ({group.validContacts} contacts)\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                            </div>\n                          )}\n\n                          {targetType === \"whatsapp_group\" && (\n                            <div className=\"space-y-2\">\n                              <Label>WhatsApp Group</Label>\n                              <Select value={selectedWhatsAppGroup} onValueChange={setSelectedWhatsAppGroup}>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Select WhatsApp group\" />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  {groups.map((group: Group) => (\n                                    <SelectItem key={group.id} value={group.id}>\n                                      {group.name} ({group.participants?.length || 0} members)\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n\n                            </div>\n                          )}\n                          \n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"message\">Message</Label>\n                            <Textarea\n                              id=\"message\"\n                              placeholder=\"Type your message here...\"\n                              rows={4}\n                              value={bulkMessage}\n                              onChange={(e) => setBulkMessage(e.target.value)}\n                            />\n                          </div>\n\n                          <div className=\"space-y-2\">\n                            <Label>Media Attachment (Optional)</Label>\n                            <Input\n                              type=\"file\"\n                              accept=\"image/*,video/*,audio/*,.pdf,.doc,.docx\"\n                              onChange={handleMediaSelect}\n                            />\n                            {selectedMedia && (\n                              <div className=\"text-sm text-muted-foreground\">\n                                Selected: {selectedMedia.name} ({(selectedMedia.size / 1024 / 1024).toFixed(2)} MB)\n                              </div>\n                            )}\n                          </div>\n\n                          {/* Time Post Field */}\n                          <div className=\"space-y-2\">\n                            <Label>Time post</Label>\n                            <Input\n                              type=\"datetime-local\"\n                              value={timePost}\n                              onChange={(e) => setTimePost(e.target.value)}\n                              placeholder=\"Select starting date and time\"\n                            />\n                          </div>\n\n                          {/* Random Message Interval Controls */}\n                          <div className=\"grid grid-cols-2 gap-4\">\n                            <div className=\"space-y-2\">\n                              <Label>Random message interval by minimum (second)</Label>\n                              <Input\n                                type=\"number\"\n                                min=\"1\"\n                                max=\"3600\"\n                                value={minInterval}\n                                onChange={(e) => {\n                                  const value = parseInt(e.target.value) || 1;\n                                  setMinInterval(Math.max(1, Math.min(3600, value)));\n                                  if (value > maxInterval) {\n                                    setMaxInterval(value);\n                                  }\n                                }}\n                                placeholder=\"Enter seconds (1-3600)\"\n                              />\n                            </div>\n                            <div className=\"space-y-2\">\n                              <Label>Random message interval by maximum (second)</Label>\n                              <Input\n                                type=\"number\"\n                                min={minInterval}\n                                max=\"3600\"\n                                value={maxInterval}\n                                onChange={(e) => {\n                                  const value = parseInt(e.target.value) || 10;\n                                  setMaxInterval(Math.max(minInterval, Math.min(3600, value)));\n                                }}\n                                placeholder=\"Enter seconds (1-3600)\"\n                              />\n                            </div>\n                          </div>\n\n                          {/* Schedule Time */}\n                          <div className=\"space-y-4\">\n                            <Label>Schedule time</Label>\n                            \n                            {/* Four scheduling buttons */}\n                            <div className=\"flex gap-2 flex-wrap\">\n                              <Button\n                                type=\"button\"\n                                variant={scheduleType === 'daytime' ? 'default' : 'outline'}\n                                size=\"sm\"\n                                onClick={() => {\n                                  setScheduleType('daytime');\n                                  setScheduleHours([7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]);\n                                }}\n                              >\n                                Daytime\n                              </Button>\n                              <Button\n                                type=\"button\"\n                                variant={scheduleType === 'nighttime' ? 'default' : 'outline'}\n                                size=\"sm\"\n                                onClick={() => {\n                                  setScheduleType('nighttime');\n                                  setScheduleHours([0, 1, 2, 3, 4, 5, 6, 19, 20, 21, 22, 23]);\n                                }}\n                              >\n                                Nighttime\n                              </Button>\n                              <Button\n                                type=\"button\"\n                                variant={scheduleType === 'odd_hours' ? 'default' : 'outline'}\n                                size=\"sm\"\n                                onClick={() => {\n                                  setScheduleType('odd_hours');\n                                  setScheduleHours([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23]);\n                                }}\n                              >\n                                Odd\n                              </Button>\n                              <Button\n                                type=\"button\"\n                                variant={scheduleType === 'even_hours' ? 'default' : 'outline'}\n                                size=\"sm\"\n                                onClick={() => {\n                                  setScheduleType('even_hours');\n                                  setScheduleHours([0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22]);\n                                }}\n                              >\n                                Even\n                              </Button>\n                            </div>\n\n                            {/* Hour Selection Tags */}\n                            {scheduleHours.length > 0 && (\n                              <div className=\"space-y-2\">\n                                <div className=\"flex flex-wrap gap-1\">\n                                  {scheduleHours.map((hour) => (\n                                    <Badge key={hour} variant=\"secondary\" className=\"flex items-center gap-1\">\n                                      {hour}\n                                      <Button\n                                        type=\"button\"\n                                        variant=\"ghost\"\n                                        size=\"sm\"\n                                        className=\"h-auto p-0 w-4 h-4\"\n                                        onClick={() => {\n                                          setScheduleHours(prev => prev.filter(h => h !== hour));\n                                        }}\n                                      >\n                                        <X className=\"h-3 w-3\" />\n                                      </Button>\n                                    </Badge>\n                                  ))}\n                                </div>\n                                \n                                {/* Add hour dropdown */}\n                                <div className=\"flex items-center gap-2\">\n                                  <Select\n                                    onValueChange={(value) => {\n                                      const hour = parseInt(value);\n                                      if (!scheduleHours.includes(hour)) {\n                                        setScheduleHours(prev => [...prev, hour].sort((a, b) => a - b));\n                                      }\n                                    }}\n                                  >\n                                    <SelectTrigger className=\"w-40\">\n                                      <SelectValue placeholder=\"Add hour\" />\n                                    </SelectTrigger>\n                                    <SelectContent>\n                                      {(() => {\n                                        const availableHours = [];\n                                        for (let i = 0; i < 24; i++) {\n                                          if (!scheduleHours.includes(i)) {\n                                            availableHours.push(i);\n                                          }\n                                        }\n                                        return availableHours.map((hour) => (\n                                          <SelectItem key={hour} value={hour.toString()}>\n                                            {hour}:00\n                                          </SelectItem>\n                                        ));\n                                      })()}\n                                    </SelectContent>\n                                  </Select>\n                                </div>\n                              </div>\n                            )}\n                            \n                            <p className=\"text-sm text-muted-foreground\">\n                              The schedule allows you to set up a unique schedule by time for your campaign to run. \n                              Set empty to campaign run anytime.\n                            </p>\n                          </div>\n                        </div>\n\n                        <div className=\"flex justify-end space-x-2\">\n                          <Button variant=\"outline\" onClick={() => setShowBulkMessageDialog(false)}>\n                            Cancel\n                          </Button>\n                          <Button \n                            onClick={handleCreateEnhancedCampaign}\n                            disabled={createBulkCampaignMutation.isPending}\n                          >\n                            {createBulkCampaignMutation.isPending ? \"Creating...\" : \"Create Campaign\"}\n                          </Button>\n                        </div>\n                      </div>\n                    </DialogContent>\n                    </Dialog>\n                  </div>\n                </div>\n\n                {/* Enhanced Analytics Section - Moved to top */}\n                {bulkCampaigns.length > 0 && (\n                  <div className=\"space-y-4\">\n                    <Card>\n                      <CardHeader>\n                        <CardTitle className=\"flex items-center justify-between\">\n                          Campaign Analytics\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            Last updated: {new Date().toLocaleTimeString()}\n                          </Badge>\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                          <div className=\"text-center p-4 border rounded-lg\">\n                            <div className=\"text-3xl font-bold text-blue-600 mb-1\">\n                              {bulkCampaigns.length}\n                            </div>\n                            <p className=\"text-sm text-muted-foreground\">Total Campaigns</p>\n                            <div className=\"text-xs text-muted-foreground mt-1\">\n                              {bulkCampaigns.filter(c => c.status === 'running').length} active\n                            </div>\n                          </div>\n                          <div className=\"text-center p-4 border rounded-lg\">\n                            <div className=\"text-3xl font-bold text-green-600 mb-1\">\n                              {bulkCampaigns.reduce((sum, c) => sum + c.sentCount, 0)}\n                            </div>\n                            <p className=\"text-sm text-muted-foreground\">Messages Sent</p>\n                            <div className=\"text-xs text-green-600 font-medium mt-1\">\n                              ✓ Success Rate: {\n                                Math.round(\n                                  (bulkCampaigns.reduce((sum, c) => sum + c.sentCount, 0) / \n                                  Math.max(1, bulkCampaigns.reduce((sum, c) => sum + c.sentCount + c.failedCount, 0))) * 100\n                                )\n                              }%\n                            </div>\n                          </div>\n                          <div className=\"text-center p-4 border rounded-lg\">\n                            <div className=\"text-3xl font-bold text-red-600 mb-1\">\n                              {bulkCampaigns.reduce((sum, c) => sum + c.failedCount, 0)}\n                            </div>\n                            <p className=\"text-sm text-muted-foreground\">Failed Messages</p>\n                            <div className=\"text-xs text-red-600 font-medium mt-1\">\n                              ✗ Error Rate: {\n                                Math.round(\n                                  (bulkCampaigns.reduce((sum, c) => sum + c.failedCount, 0) / \n                                  Math.max(1, bulkCampaigns.reduce((sum, c) => sum + c.sentCount + c.failedCount, 0))) * 100\n                                )\n                              }%\n                            </div>\n                          </div>\n                          <div className=\"text-center p-4 border rounded-lg\">\n                            <div className=\"text-3xl font-bold text-purple-600 mb-1\">\n                              {bulkCampaigns.filter(c => c.status === 'completed').length}\n                            </div>\n                            <p className=\"text-sm text-muted-foreground\">Completed</p>\n                            <div className=\"text-xs text-muted-foreground mt-1\">\n                              {bulkCampaigns.filter(c => c.status === 'draft').length} draft, \n                              {bulkCampaigns.filter(c => c.status === 'paused').length} paused\n                            </div>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </div>\n                )}\n\n                {/* Campaign List */}\n                <div className=\"space-y-4\">\n                  {!sessionInfo ? (\n                    <Card>\n                      <CardContent className=\"text-center py-8\">\n                        <MessageSquare className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                        <h3 className=\"text-lg font-semibold mb-2\">Connect WhatsApp</h3>\n                        <p className=\"text-muted-foreground\">\n                          Please connect to WhatsApp first to create campaigns.\n                        </p>\n                      </CardContent>\n                    </Card>\n                  ) : campaignsLoading ? (\n                    <Card>\n                      <CardContent className=\"text-center py-8\">\n                        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto\"></div>\n                        <p className=\"mt-4 text-muted-foreground\">Loading campaigns...</p>\n                      </CardContent>\n                    </Card>\n                  ) : bulkCampaigns.length === 0 ? (\n                    <Card>\n                      <CardContent className=\"text-center py-8\">\n                        <h3 className=\"text-lg font-semibold mb-2\">No campaigns yet</h3>\n                        <p className=\"text-muted-foreground mb-4\">Create your first bulk messaging campaign</p>\n                        <Button onClick={() => setShowBulkMessageDialog(true)}>\n                          <Plus className=\"h-4 w-4 mr-2\" />\n                          Create Campaign\n                        </Button>\n                      </CardContent>\n                    </Card>\n                  ) : (\n                    <div className=\"grid gap-4 max-h-[calc(100vh-300px)] overflow-y-auto\">\n                      {bulkCampaigns.map((campaign: BulkCampaign) => (\n                        <Card key={campaign.id}>\n                          <CardHeader>\n                            <div className=\"flex justify-between items-start\">\n                              <div>\n                                <CardTitle className=\"flex items-center gap-2\">\n                                  {campaign.name}\n                                  <Badge \n                                    className={\n                                      campaign.status === 'draft' ? 'bg-gray-100 text-gray-800' :\n                                      campaign.status === 'running' ? 'bg-blue-100 text-blue-800' :\n                                      campaign.status === 'paused' ? 'bg-yellow-100 text-yellow-800' :\n                                      campaign.status === 'completed' ? 'bg-green-100 text-green-800' :\n                                      campaign.status === 'failed' ? 'bg-red-100 text-red-800' :\n                                      'bg-gray-100 text-gray-800'\n                                    }\n                                  >\n                                    {campaign.status}\n                                  </Badge>\n                                </CardTitle>\n                                <p className=\"text-sm text-muted-foreground mt-1\">\n                                  Created: {new Date(campaign.createdAt).toLocaleString()}\n                                </p>\n                              </div>\n                              <div className=\"flex gap-2\">\n                                {campaign.status === \"draft\" && (\n                                  <Button \n                                    size=\"sm\" \n                                    onClick={() => executeCampaign(campaign.id)}\n                                    disabled={sendBulkCampaignMutation.isPending}\n                                  >\n                                    <Send className=\"h-4 w-4 mr-1\" />\n                                    Start\n                                  </Button>\n                                )}\n                                {campaign.status === \"running\" && (\n                                  <Button \n                                    size=\"sm\" \n                                    variant=\"outline\"\n                                    onClick={() => pauseCampaign(campaign.id)}\n                                  >\n                                    <Clock className=\"h-4 w-4 mr-1\" />\n                                    Pause\n                                  </Button>\n                                )}\n                                {campaign.status === \"paused\" && (\n                                  <Button \n                                    size=\"sm\"\n                                    onClick={() => resumeCampaign(campaign.id)}\n                                  >\n                                    <Send className=\"h-4 w-4 mr-1\" />\n                                    Resume\n                                  </Button>\n                                )}\n                                {(campaign.status === \"completed\" || campaign.status === \"failed\") && (\n                                  <Button \n                                    size=\"sm\"\n                                    variant=\"outline\"\n                                    onClick={() => restartCampaign(campaign.id)}\n                                    disabled={sendBulkCampaignMutation.isPending}\n                                  >\n                                    <RotateCcw className=\"h-4 w-4 mr-1\" />\n                                    Restart\n                                  </Button>\n                                )}\n                                <Button \n                                  size=\"sm\"\n                                  variant=\"destructive\"\n                                  onClick={() => deleteCampaign(campaign.id)}\n                                  disabled={sendBulkCampaignMutation.isPending}\n                                >\n                                  <Trash2 className=\"h-4 w-4 mr-1\" />\n                                  Delete\n                                </Button>\n                              </div>\n                            </div>\n                          </CardHeader>\n                          <CardContent>\n                            <div className=\"space-y-4\">\n                              <div>\n                                <h4 className=\"font-medium text-sm mb-1\">Message Preview</h4>\n                                <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                                  {campaign.message}\n                                </p>\n                              </div>\n\n                              {/* Enhanced Progress Section */}\n                              {(campaign.sentCount > 0 || campaign.failedCount > 0) && (\n                                <div className=\"space-y-3\">\n                                  <div className=\"flex justify-between items-center text-sm\">\n                                    <span className=\"font-medium\">Progress</span>\n                                    <span className=\"text-muted-foreground\">\n                                      {campaign.sentCount + campaign.failedCount} / {campaign.totalTargets} \n                                      ({Math.round(((campaign.sentCount + campaign.failedCount) / Math.max(1, campaign.totalTargets)) * 100)}%)\n                                    </span>\n                                  </div>\n                                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                                    <div \n                                      className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\" \n                                      style={{\n                                        width: `${((campaign.sentCount + campaign.failedCount) / Math.max(1, campaign.totalTargets)) * 100}%`\n                                      }}\n                                    ></div>\n                                  </div>\n                                  <div className=\"flex justify-between text-xs\">\n                                    <span className=\"text-green-600 font-medium\">✓ {campaign.sentCount} sent</span>\n                                    <span className=\"text-red-600 font-medium\">✗ {campaign.failedCount} failed</span>\n                                    <span className=\"text-blue-600 font-medium\">⏳ {campaign.totalTargets - campaign.sentCount - campaign.failedCount} remaining</span>\n                                  </div>\n                                  {campaign.status === \"running\" && (\n                                    <div className=\"text-xs text-muted-foreground flex justify-between items-center mt-2 pt-2 border-t\">\n                                      <span>Status: Active</span>\n                                      <span className=\"flex items-center\">\n                                        <span className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse mr-2\"></span>\n                                        Sending messages...\n                                      </span>\n                                    </div>\n                                  )}\n                                  {campaign.status === \"completed\" && (\n                                    <div className=\"text-xs text-green-600 font-medium mt-2 pt-2 border-t\">\n                                      ✅ Campaign completed successfully\n                                    </div>\n                                  )}\n                                </div>\n                              )}\n\n                              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                                <div>\n                                  <span className=\"font-medium\">Sent:</span>\n                                  <p className=\"text-green-600 font-medium\">\n                                    {campaign.sentCount}\n                                    {campaign.status === \"running\" && <span className=\"animate-pulse ml-1\">●</span>}\n                                  </p>\n                                </div>\n                                <div>\n                                  <span className=\"font-medium\">Failed:</span>\n                                  <p className=\"text-red-600 font-medium\">{campaign.failedCount}</p>\n                                </div>\n                                <div>\n                                  <span className=\"font-medium\">Target Type:</span>\n                                  <p className=\"text-muted-foreground capitalize\">Contact Group</p>\n                                </div>\n                                <div>\n                                  <span className=\"font-medium\">Status:</span>\n                                  <p className=\"text-muted-foreground capitalize\">{campaign.status}</p>\n                                </div>\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))}\n                    </div>\n                  )}\n\n\n                </div>\n              </div>\n            )}\n\n\n\n            {/* Chats Module */}\n            {selectedModule === 'chats' && (\n              <div className=\"flex flex-col h-full\">\n                {/* Sticky Header */}\n                <div className=\"sticky top-0 z-10 bg-white dark:bg-gray-900 p-6 pb-4 border-b border-gray-200 dark:border-gray-700 flex-shrink-0\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      <MessageSquare className=\"h-5 w-5\" />\n                      <span className=\"text-lg font-semibold\">WhatsApp Chats</span>\n                    </div>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mt-2\">\n                    View and manage your WhatsApp conversations\n                  </p>\n                </div>\n                \n                {/* Scrollable Content */}\n                <div className=\"flex-1 overflow-y-auto p-6 pr-2 min-h-0\">\n                  {!sessionInfo ? (\n                    <div className=\"text-center p-8\">\n                      <MessageSquare className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                      <h3 className=\"text-lg font-semibold mb-2\">Connect WhatsApp</h3>\n                      <p className=\"text-muted-foreground\">\n                        Please connect to WhatsApp first to view your chats.\n                      </p>\n                    </div>\n                  ) : chatsLoading ? (\n                    <div className=\"text-center p-8\">\n                      <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto\"></div>\n                      <p className=\"mt-4 text-muted-foreground\">Loading chats...</p>\n                    </div>\n                  ) : chats.length === 0 ? (\n                    <div className=\"text-center p-8\">\n                      <MessageSquare className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                      <h3 className=\"text-lg font-semibold mb-2\">No Chats Found</h3>\n                      <p className=\"text-muted-foreground\">\n                        Your WhatsApp chats will appear here once you start conversations.\n                      </p>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-2\">\n                      {chats.map((chat: Chat) => (\n                        <div key={chat.id} className=\"border rounded-lg p-4 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors\">\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"w-10 h-10 rounded-full bg-gray-200 dark:bg-gray-700 flex items-center justify-center\">\n                                {chat.isGroup ? <Users className=\"h-5 w-5\" /> : <Phone className=\"h-5 w-5\" />}\n                              </div>\n                              <div>\n                                <h4 className=\"font-semibold\">{chat.name}</h4>\n                                {chat.lastMessage && (\n                                  <p className=\"text-sm text-muted-foreground truncate max-w-xs\">\n                                    {chat.lastMessage.fromMe ? 'You: ' : ''}{chat.lastMessage.body}\n                                  </p>\n                                )}\n                              </div>\n                            </div>\n                            <div className=\"text-right\">\n                              {chat.unreadCount > 0 && (\n                                <Badge variant=\"default\" className=\"mb-1\">\n                                  {chat.unreadCount}\n                                </Badge>\n                              )}\n                              <p className=\"text-xs text-muted-foreground\">\n                                {new Date(chat.timestamp * 1000).toLocaleDateString('en-GB')} {new Date(chat.timestamp * 1000).toLocaleTimeString()}\n                              </p>\n                              <div className=\"flex items-center space-x-2 mt-2\">\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  onClick={() => setLocation(`/chat/${chat.id}`)}\n                                >\n                                  Open Chat\n                                </Button>\n\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {/* Groups Module */}\n            {selectedModule === 'groups' && (\n              <div className=\"flex flex-col h-full\">\n                {/* Sticky Header */}\n                <div className=\"sticky top-0 z-10 bg-white dark:bg-gray-900 p-6 pb-4 border-b border-gray-200 dark:border-gray-700 flex-shrink-0\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Users className=\"h-5 w-5\" />\n                      <span className=\"text-lg font-semibold\">WhatsApp Groups</span>\n                    </div>\n                    <Button \n                      onClick={exportAllGroupsCSV}\n                      disabled={!sessionInfo || groups.length === 0}\n                      size=\"sm\"\n                    >\n                      <Download className=\"h-4 w-4 mr-2\" />\n                      Extract all to CSVs\n                    </Button>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mt-2\">\n                    View and manage your WhatsApp group conversations\n                  </p>\n                </div>\n                \n                {/* Scrollable Content */}\n                <div className=\"flex-1 overflow-y-auto p-6 pr-2 min-h-0\">\n                  {!sessionInfo ? (\n                    <div className=\"text-center p-8\">\n                      <Users className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                      <h3 className=\"text-lg font-semibold mb-2\">Connect WhatsApp</h3>\n                      <p className=\"text-muted-foreground\">\n                        Please connect to WhatsApp first to view your groups.\n                      </p>\n                    </div>\n                  ) : groupsLoading ? (\n                    <div className=\"text-center p-8\">\n                      <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto\"></div>\n                      <p className=\"mt-4 text-muted-foreground\">Loading groups...</p>\n                    </div>\n                  ) : groups.length === 0 ? (\n                    <div className=\"text-center p-8\">\n                      <Users className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                      <h3 className=\"text-lg font-semibold mb-2\">No Groups Found</h3>\n                      <p className=\"text-muted-foreground\">\n                        Your WhatsApp groups will appear here once you join some groups.\n                      </p>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-2\">\n                      {groups.map((group: Group) => (\n                        <div key={group.id} className=\"border rounded-lg p-4 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors\">\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"w-10 h-10 rounded-full bg-green-200 dark:bg-green-700 flex items-center justify-center\">\n                                <Users className=\"h-5 w-5\" />\n                              </div>\n                              <div>\n                                <h4 className=\"font-semibold\">{group.name}</h4>\n                                {group.lastMessage && (\n                                  <p className=\"text-sm text-muted-foreground truncate max-w-xs\">\n                                    {group.lastMessage.fromMe ? 'You: ' : ''}{group.lastMessage.body}\n                                  </p>\n                                )}\n                                <p className=\"text-xs text-muted-foreground\">\n                                  {group.participants.length} participants\n                                </p>\n                              </div>\n                            </div>\n                            <div className=\"text-right\">\n                              {group.unreadCount > 0 && (\n                                <Badge variant=\"default\" className=\"mb-1\">\n                                  {group.unreadCount}\n                                </Badge>\n                              )}\n                              <p className=\"text-xs text-muted-foreground\">\n                                {new Date(group.timestamp * 1000).toLocaleDateString('en-GB')} {new Date(group.timestamp * 1000).toLocaleTimeString()}\n                              </p>\n                              <div className=\"flex items-center space-x-2 mt-2\">\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  onClick={() => window.open(`/api/groups/${group.id}/export`)}\n                                >\n                                  <Download className=\"h-4 w-4 mr-1\" />\n                                  Export\n                                </Button>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  onClick={() => setLocation(`/chat/${group.id}`)}\n                                >\n                                  Open Chat\n                                </Button>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {/* Reports Module */}\n            {selectedModule === 'reports' && (\n              <div className=\"p-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Reports</CardTitle>\n                    <CardDescription>Analytics and reporting features</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-center p-8\">\n                      <BarChart3 className=\"h-12 w-12 text-orange-500 mx-auto mb-4\" />\n                      <h3 className=\"text-lg font-semibold mb-2\">Coming Soon</h3>\n                      <p className=\"text-muted-foreground\">\n                        Comprehensive WhatsApp analytics, message reports, and performance insights will be available here soon.\n                      </p>\n                    </div>\n                  </CardContent>\n                </Card>\n                </div>\n              )}\n\n            {/* Placeholder for other modules */}\n            {!['send-message', 'button-template', 'poll-template', 'list-template', 'contacts', 'reports', 'chats', 'contact-groups', 'bulk-messaging', 'groups', 'account'].includes(selectedModule) && (\n              <div className=\"p-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Feature Coming Soon</CardTitle>\n                    <CardDescription>This feature is under development</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-center p-8\">\n                      <div className=\"h-12 w-12 bg-gray-100 rounded-lg mx-auto mb-4 flex items-center justify-center\">\n                        <span className=\"text-gray-400\">🚧</span>\n                      </div>\n                      <h3 className=\"text-lg font-semibold mb-2\">Under Development</h3>\n                      <p className=\"text-muted-foreground\">\n                        This feature is currently being developed and will be available soon.\n                      </p>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n          </div>\n        ) : selectedFeature === 'rcs' ? (\n          <div className=\"p-6\">\n            <div className=\"text-center p-8\">\n              <Smartphone className=\"h-12 w-12 text-purple-500 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">RCS Features</h3>\n              <p className=\"text-muted-foreground\">\n                RCS messaging features will be available in a future update.\n              </p>\n            </div>\n          </div>\n        ) : null}\n        </div>\n      </div>\n\n      {/* Create Contact Group Dialog */}\n      <Dialog open={showCreateGroupDialog} onOpenChange={setShowCreateGroupDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Create Contact Group</DialogTitle>\n            <DialogDescription>\n              Create a new contact group to organize contacts for bulk messaging campaigns.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"group-name\">Group Name</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"group-name\"\n                  value={newGroupName}\n                  onChange={(e) => setNewGroupName(e.target.value)}\n                  onKeyDown={(e) => {\n                    if (e.key === 'Enter' && !createContactGroupMutation.isPending && newGroupName.trim()) {\n                      handleCreateGroup();\n                    }\n                  }}\n                />\n                <Label \n                  htmlFor=\"group-name\" \n                  className={`absolute left-3 pointer-events-none transition-all duration-200 ${\n                    fieldValues.newGroupName\n                      ? \"hidden\"\n                      : \"top-3 text-sm text-gray-500 dark:text-gray-400\"\n                  }`}\n                >\n                  Enter group name\n                </Label>\n              </div>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"group-description\">Description (Optional)</Label>\n              <div className=\"relative\">\n                <Textarea\n                  id=\"group-description\"\n                  value={newGroupDescription}\n                  onChange={(e) => setNewGroupDescription(e.target.value)}\n                  rows={3}\n                  onKeyDown={(e) => {\n                    if (e.key === 'Enter' && !e.shiftKey && !createContactGroupMutation.isPending && newGroupName.trim()) {\n                      e.preventDefault(); // Prevent new line\n                      handleCreateGroup();\n                    }\n                  }}\n                />\n                <Label \n                  htmlFor=\"group-description\" \n                  className={`absolute left-3 top-3 pointer-events-none transition-all duration-200 ${\n                    fieldValues.newGroupDescription\n                      ? \"hidden\"\n                      : \"text-sm text-gray-500 dark:text-gray-400\"\n                  }`}\n                >\n                  Enter group description\n                </Label>\n              </div>\n            </div>\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setShowCreateGroupDialog(false)}\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={handleCreateGroup}\n                disabled={createContactGroupMutation.isPending || !newGroupName.trim()}\n              >\n                {createContactGroupMutation.isPending ? (\n                  <>\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                    Creating...\n                  </>\n                ) : (\n                  <>\n                    <Plus className=\"mr-2 h-4 w-4\" />\n                    Create Group\n                  </>\n                )}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n\n\n      {/* Add to Contact Groups Dialog */}\n      <Dialog open={showAddToGroupsDialog} onOpenChange={setShowAddToGroupsDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Add to Contact Groups</DialogTitle>\n            <DialogDescription>\n              Select contact groups to add the selected {selectedContacts.size} contact{selectedContacts.size !== 1 ? 's' : ''} to.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n              {contactGroups.length === 0 ? (\n                <div className=\"text-center p-4\">\n                  <Users className=\"h-8 w-8 text-muted-foreground mx-auto mb-2\" />\n                  <p className=\"text-sm text-muted-foreground\">\n                    No contact groups available. Create a contact group first.\n                  </p>\n                </div>\n              ) : (\n                contactGroups.map((group: ContactGroup) => (\n                  <div key={group.id} className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id={`group-${group.id}`}\n                      checked={selectedGroupsForAdd.has(group.id)}\n                      onCheckedChange={(checked) => {\n                        setSelectedGroupsForAdd(prev => {\n                          const newSet = new Set(prev);\n                          if (checked) {\n                            newSet.add(group.id);\n                          } else {\n                            newSet.delete(group.id);\n                          }\n                          return newSet;\n                        });\n                      }}\n                      data-testid={`checkbox-group-${group.id}`}\n                    />\n                    <label \n                      htmlFor={`group-${group.id}`} \n                      className=\"text-sm font-medium cursor-pointer flex-1\"\n                    >\n                      {group.name}\n                      <span className=\"text-muted-foreground\"> ({group.validContacts} contacts)</span>\n                    </label>\n                  </div>\n                ))\n              )}\n            </div>\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  setShowAddToGroupsDialog(false);\n                  setSelectedGroupsForAdd(new Set());\n                }}\n                data-testid=\"button-cancel-add-to-groups\"\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={handleAddContactsToGroups}\n                disabled={addToGroupsMutation.isPending || selectedGroupsForAdd.size === 0}\n                data-testid=\"button-add-to-groups\"\n              >\n                {addToGroupsMutation.isPending ? (\n                  <>\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                    Adding...\n                  </>\n                ) : (\n                  <>\n                    <Users className=\"mr-2 h-4 w-4\" />\n                    Add\n                  </>\n                )}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}","size_bytes":143209},"client/src/pages/group-contacts.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useLocation, useRoute } from 'wouter';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogDescription } from '@/components/ui/dialog';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { toast } from '@/hooks/use-toast';\nimport { ArrowLeft, Search, Download, Trash2, Upload, CheckCircle, Loader2, Plus, UserPlus, Users, FileText, Edit2 } from 'lucide-react';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface ContactGroupMember {\n  id: string;\n  phoneNumber: string;\n  name: string | null;\n  status: 'valid' | 'invalid' | 'duplicate';\n  createdAt: string;\n}\n\ninterface ContactGroup {\n  id: string;\n  name: string;\n  description: string | null;\n  totalContacts: number;\n  validContacts: number;\n  invalidContacts: number;\n  duplicateContacts: number;\n  createdAt: string;\n}\n\n// Country codes with validation rules\nconst countryData = [\n  { code: \"+91\", country: \"India\", flag: \"🇮🇳\", minDigits: 10, maxDigits: 10 },\n  { code: \"+1\", country: \"USA/Canada\", flag: \"🇺🇸\", minDigits: 10, maxDigits: 10 },\n  { code: \"+44\", country: \"UK\", flag: \"🇬🇧\", minDigits: 10, maxDigits: 11 },\n  { code: \"+49\", country: \"Germany\", flag: \"🇩🇪\", minDigits: 10, maxDigits: 11 },\n  { code: \"+33\", country: \"France\", flag: \"🇫🇷\", minDigits: 9, maxDigits: 9 },\n  { code: \"+61\", country: \"Australia\", flag: \"🇦🇺\", minDigits: 9, maxDigits: 10 },\n  { code: \"+55\", country: \"Brazil\", flag: \"🇧🇷\", minDigits: 10, maxDigits: 11 },\n  { code: \"+86\", country: \"China\", flag: \"🇨🇳\", minDigits: 11, maxDigits: 11 },\n  { code: \"+81\", country: \"Japan\", flag: \"🇯🇵\", minDigits: 10, maxDigits: 11 },\n  { code: \"+82\", country: \"South Korea\", flag: \"🇰🇷\", minDigits: 9, maxDigits: 10 },\n  { code: \"+7\", country: \"Russia\", flag: \"🇷🇺\", minDigits: 10, maxDigits: 10 },\n  { code: \"+52\", country: \"Mexico\", flag: \"🇲🇽\", minDigits: 10, maxDigits: 10 },\n  { code: \"+62\", country: \"Indonesia\", flag: \"🇮🇩\", minDigits: 10, maxDigits: 12 },\n  { code: \"+92\", country: \"Pakistan\", flag: \"🇵🇰\", minDigits: 10, maxDigits: 10 },\n  { code: \"+880\", country: \"Bangladesh\", flag: \"🇧🇩\", minDigits: 10, maxDigits: 10 },\n  { code: \"+234\", country: \"Nigeria\", flag: \"🇳🇬\", minDigits: 10, maxDigits: 10 },\n  { code: \"+27\", country: \"South Africa\", flag: \"🇿🇦\", minDigits: 9, maxDigits: 10 },\n  { code: \"+90\", country: \"Turkey\", flag: \"🇹🇷\", minDigits: 10, maxDigits: 10 },\n  { code: \"+20\", country: \"Egypt\", flag: \"🇪🇬\", minDigits: 10, maxDigits: 10 },\n  { code: \"+63\", country: \"Philippines\", flag: \"🇵🇭\", minDigits: 10, maxDigits: 10 },\n  { code: \"+54\", country: \"Argentina\", flag: \"🇦🇷\", minDigits: 10, maxDigits: 11 },\n  { code: \"+60\", country: \"Malaysia\", flag: \"🇲🇾\", minDigits: 9, maxDigits: 10 },\n  { code: \"+84\", country: \"Vietnam\", flag: \"🇻🇳\", minDigits: 9, maxDigits: 10 },\n  { code: \"+66\", country: \"Thailand\", flag: \"🇹🇭\", minDigits: 9, maxDigits: 9 },\n  { code: \"+971\", country: \"UAE\", flag: \"🇦🇪\", minDigits: 9, maxDigits: 9 }\n];\n\nexport default function GroupContacts() {\n  const [match, params] = useRoute('/group-contacts/:groupId');\n  const [, setLocation] = useLocation();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedContacts, setSelectedContacts] = useState<string[]>([]);\n  const [selectAll, setSelectAll] = useState(false);\n  const [showAddDialog, setShowAddDialog] = useState(false);\n  const [showAddModeDialog, setShowAddModeDialog] = useState(false);\n  const [addMode, setAddMode] = useState<'single' | 'multiple'>('single');\n  const [newContact, setNewContact] = useState({ name: '', phoneNumber: '' });\n  const [multipleNumbers, setMultipleNumbers] = useState('');\n  const [multipleNumbersErrors, setMultipleNumbersErrors] = useState<string[]>([]);\n  const [validationErrors, setValidationErrors] = useState({ name: '', phoneNumber: '' });\n  const [isImporting, setIsImporting] = useState(false);\n  const [selectedCountry, setSelectedCountry] = useState(countryData[0]); // Default to India\n  const [showEditDialog, setShowEditDialog] = useState(false);\n  const [editingContact, setEditingContact] = useState<ContactGroupMember | null>(null);\n  const [editPhoneNumber, setEditPhoneNumber] = useState('');\n  const [editPhoneError, setEditPhoneError] = useState('');\n  const queryClient = useQueryClient();\n\n  const groupId = params?.groupId;\n\n  // Fetch group details\n  const { data: group, isLoading: groupLoading } = useQuery<ContactGroup>({\n    queryKey: [`/api/contact-groups/${groupId}`],\n    enabled: !!groupId,\n    staleTime: 0, // Always refetch to get fresh data\n    refetchOnWindowFocus: true,\n  });\n\n  // Fetch group members\n  const { data: members = [], isLoading: membersLoading } = useQuery<ContactGroupMember[]>({\n    queryKey: [`/api/contact-groups/${groupId}/members`],\n    enabled: !!groupId,\n    staleTime: 0, // Always refetch to get fresh data\n    refetchOnWindowFocus: true,\n  });\n\n  // Delete selected members mutation\n  const deleteSelectedMutation = useMutation({\n    mutationFn: (memberIds: string[]) =>\n      apiRequest(`/api/contact-groups/${groupId}/members/batch-delete`, \"DELETE\", { memberIds }),\n    onSuccess: () => {\n      toast({\n        title: \"Contacts Deleted\",\n        description: `${selectedContacts.length} contacts removed from group`,\n      });\n      setSelectedContacts([]);\n      setSelectAll(false);\n      queryClient.invalidateQueries({ queryKey: [`/api/contact-groups/${groupId}/members`] });\n      queryClient.invalidateQueries({ queryKey: [`/api/contact-groups/${groupId}`] });\n      queryClient.invalidateQueries({ queryKey: [`/api/contact-groups`] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Delete Failed\",\n        description: error.message || \"Failed to delete selected contacts\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Import CSV mutation\n  const importCsvMutation = useMutation({\n    mutationFn: async (file: File) => {\n      setIsImporting(true); // Set local importing state\n      const formData = new FormData();\n      formData.append('csv', file);\n      const response = await fetch(`/api/contact-groups/${groupId}/import-csv`, {\n        method: 'POST',\n        body: formData,\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to import CSV');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Import Successful\",\n        description: `Imported ${data.validContacts} valid contacts, ${data.duplicateContacts} duplicates found`,\n      });\n      setIsImporting(false); // Clear importing state\n      // Force immediate refresh of all related queries\n      queryClient.invalidateQueries({ queryKey: [`/api/contact-groups/${groupId}/members`] });\n      queryClient.invalidateQueries({ queryKey: [`/api/contact-groups/${groupId}`] });\n      queryClient.invalidateQueries({ queryKey: [`/api/contact-groups`] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Import Failed\",\n        description: error.message || \"Failed to import contacts\",\n        variant: \"destructive\",\n      });\n      setIsImporting(false); // Clear importing state on error\n    },\n    onSettled: () => {\n      // Reset the file input\n      const fileInput = document.getElementById('csv-import') as HTMLInputElement;\n      if (fileInput) {\n        fileInput.value = '';\n      }\n    }\n  });\n\n  // Add single contact mutation\n  const addContactMutation = useMutation({\n    mutationFn: (contactData: { name: string; phoneNumber: string }) =>\n      apiRequest(`/api/contact-groups/${groupId}/members`, \"POST\", contactData),\n    onSuccess: () => {\n      toast({\n        title: \"Contact Added\",\n        description: \"Contact saved successfully\",\n      });\n      setShowAddDialog(false);\n      setNewContact({ name: '', phoneNumber: '' });\n      setValidationErrors({ name: '', phoneNumber: '' });\n      queryClient.invalidateQueries({ queryKey: [`/api/contact-groups/${groupId}/members`] });\n      queryClient.invalidateQueries({ queryKey: [`/api/contact-groups/${groupId}`] });\n      queryClient.invalidateQueries({ queryKey: [`/api/contact-groups`] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Add Contact\",\n        description: error?.message || \"Failed to add contact\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Add multiple contacts mutation\n  const addMultipleContactsMutation = useMutation({\n    mutationFn: (phoneNumbers: string[]) =>\n      apiRequest(`/api/contact-groups/${groupId}/members/batch`, \"POST\", { phoneNumbers }),\n    onSuccess: (data: any) => {\n      toast({\n        title: \"Contacts Added\",\n        description: `Successfully added ${data.validContacts} valid contacts${data.invalidContacts > 0 ? `, ${data.invalidContacts} invalid numbers` : ''}`,\n      });\n      setShowAddDialog(false);\n      setMultipleNumbers('');\n      setMultipleNumbersErrors([]);\n      queryClient.invalidateQueries({ queryKey: [`/api/contact-groups/${groupId}/members`] });\n      queryClient.invalidateQueries({ queryKey: [`/api/contact-groups/${groupId}`] });\n      queryClient.invalidateQueries({ queryKey: [`/api/contact-groups`] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Add Contacts\",\n        description: error?.message || \"Failed to add contacts\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Edit contact mutation\n  const editContactMutation = useMutation({\n    mutationFn: (data: { memberId: string; phoneNumber: string; name?: string | null }) =>\n      apiRequest(`/api/contact-groups/${groupId}/members/${data.memberId}`, \"PATCH\", { phoneNumber: data.phoneNumber, name: data.name }),\n    onSuccess: () => {\n      toast({\n        title: \"Contact Updated\", \n        description: \"Contact information updated successfully\",\n      });\n      setShowEditDialog(false);\n      setEditingContact(null);\n      setEditPhoneNumber('');\n      setEditPhoneError('');\n      queryClient.invalidateQueries({ queryKey: [`/api/contact-groups/${groupId}/members`] });\n      queryClient.invalidateQueries({ queryKey: [`/api/contact-groups/${groupId}`] });\n      queryClient.invalidateQueries({ queryKey: [`/api/contact-groups`] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Update Contact\",\n        description: error?.message || \"Failed to update contact\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Validation functions\n  const validateName = (name: string): string => {\n    if (!name.trim()) return 'Name is required';\n    if (name.trim().length < 3) return 'Name must be at least 3 characters';\n    if (name.trim().length > 15) return 'Name must be less than 15 characters';\n    return '';\n  };\n\n  const validatePhoneNumber = (phone: string): string => {\n    const cleanPhone = phone.replace(/[^0-9]/g, '');\n    if (!cleanPhone) return 'Phone number is required';\n    if (!/^\\d+$/.test(cleanPhone)) return 'Phone number must contain only numbers';\n    \n    const { minDigits, maxDigits, country } = selectedCountry;\n    if (minDigits === maxDigits) {\n      if (cleanPhone.length !== minDigits) {\n        return `Phone number must be exactly ${minDigits} digits for ${country}`;\n      }\n    } else {\n      if (cleanPhone.length < minDigits || cleanPhone.length > maxDigits) {\n        return `Phone number must be ${minDigits}-${maxDigits} digits for ${country}`;\n      }\n    }\n    return '';\n  };\n\n  const validateMultiplePhoneNumbers = (numbers: string): string[] => {\n    const errors: string[] = [];\n    const lines = numbers.split('\\n').filter(line => line.trim());\n    \n    lines.forEach((line, index) => {\n      const trimmedLine = line.trim();\n      \n      // Check if line contains country code (starts with + or contains country code pattern)\n      if (!trimmedLine.startsWith('+') && !/^[\\d\\s\\-\\(\\)]+$/.test(trimmedLine)) {\n        errors.push(`Line ${index + 1}: \"${trimmedLine}\" must include a country code (e.g., +91, +1, +44)`);\n        return;\n      }\n      \n      // Extract country code and phone number\n      let countryCode = '';\n      let phoneNumber = '';\n      \n      if (trimmedLine.startsWith('+')) {\n        const parts = trimmedLine.replace(/[\\s\\-\\(\\)]/g, '');\n        const match = parts.match(/^\\+(\\d{1,4})(\\d{9,12})$/);\n        if (match) {\n          countryCode = match[1];\n          phoneNumber = match[2];\n        } else {\n          errors.push(`Line ${index + 1}: \"${trimmedLine}\" invalid format. Use: +countrycode followed by 9-12 digits`);\n          return;\n        }\n      } else {\n        errors.push(`Line ${index + 1}: \"${trimmedLine}\" must start with country code (+91, +1, +44, etc.)`);\n        return;\n      }\n      \n      // Validate phone number length (9-12 digits)\n      if (phoneNumber.length < 9 || phoneNumber.length > 12) {\n        errors.push(`Line ${index + 1}: \"${trimmedLine}\" phone number must be 9-12 digits (found ${phoneNumber.length})`);\n        return;\n      }\n      \n      // Validate only digits\n      if (!/^\\d+$/.test(phoneNumber)) {\n        errors.push(`Line ${index + 1}: \"${trimmedLine}\" phone number must contain only digits`);\n        return;\n      }\n    });\n    \n    return errors;\n  };\n\n  const formatMultiplePhoneNumbers = (numbers: string): string[] => {\n    const lines = numbers.split('\\n').filter(line => line.trim());\n    const validNumbers: string[] = [];\n    \n    lines.forEach(line => {\n      const trimmedLine = line.trim();\n      \n      if (trimmedLine.startsWith('+')) {\n        const cleanPhone = trimmedLine.replace(/[\\s\\-\\(\\)]/g, '');\n        const match = cleanPhone.match(/^\\+(\\d{1,4})(\\d{9,12})$/);\n        if (match) {\n          const countryCode = match[1];\n          const phoneNumber = match[2];\n          if (phoneNumber.length >= 9 && phoneNumber.length <= 12) {\n            validNumbers.push(`+${countryCode}${phoneNumber}`);\n          }\n        }\n      }\n    });\n    \n    return validNumbers;\n  };\n\n  // Edit phone validation (accepts numbers with country codes, 9-12 digits)\n  const validateEditPhoneNumber = (phone: string): string => {\n    if (!phone.trim()) return 'Phone number is required';\n    \n    // Must start with country code\n    if (!phone.startsWith('+')) {\n      return 'Phone number must start with country code (e.g., +91, +1, +44)';\n    }\n    \n    const cleanPhone = phone.replace(/[\\s\\-\\(\\)]/g, '');\n    const match = cleanPhone.match(/^\\+(\\d{1,4})(\\d{9,12})$/);\n    if (!match) {\n      return 'Invalid format. Use: +[country code][9-12 digits]';\n    }\n    \n    const phoneNumber = match[2];\n    if (phoneNumber.length < 9 || phoneNumber.length > 12) {\n      return `Phone number must be 9-12 digits (found ${phoneNumber.length})`;\n    }\n    \n    return '';\n  };\n\n  const handleAddContact = () => {\n    if (addMode === 'single') {\n      const nameError = validateName(newContact.name);\n      const phoneError = validatePhoneNumber(newContact.phoneNumber);\n      \n      setValidationErrors({ name: nameError, phoneNumber: phoneError });\n      \n      if (!nameError && !phoneError) {\n        // Format phone number with selected country code\n        const formattedPhone = selectedCountry.code + newContact.phoneNumber.replace(/[^0-9]/g, '');\n        \n        addContactMutation.mutate({\n          name: newContact.name.trim(),\n          phoneNumber: formattedPhone\n        });\n      }\n    } else {\n      // Multiple numbers mode\n      const errors = validateMultiplePhoneNumbers(multipleNumbers);\n      setMultipleNumbersErrors(errors);\n      \n      if (errors.length === 0 && multipleNumbers.trim()) {\n        const validNumbers = formatMultiplePhoneNumbers(multipleNumbers);\n        if (validNumbers.length > 0) {\n          addMultipleContactsMutation.mutate(validNumbers);\n        } else {\n          toast({\n            title: \"No Valid Numbers\",\n            description: \"Please enter at least one valid phone number\",\n            variant: \"destructive\",\n          });\n        }\n      } else if (!multipleNumbers.trim()) {\n        toast({\n          title: \"No Numbers Entered\",\n          description: \"Please enter phone numbers\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const handleEditContact = (contact: ContactGroupMember) => {\n    setEditingContact(contact);\n    setEditPhoneNumber(contact.phoneNumber);\n    setEditPhoneError('');\n    setShowEditDialog(true);\n  };\n\n  const handleSaveEdit = () => {\n    const error = validateEditPhoneNumber(editPhoneNumber);\n    setEditPhoneError(error);\n    \n    if (!error && editingContact) {\n      editContactMutation.mutate({\n        memberId: editingContact.id,\n        phoneNumber: editPhoneNumber.trim(),\n        name: editingContact.name?.trim() || null\n      });\n    }\n  };\n\n  const handleEditDialogClose = () => {\n    setShowEditDialog(false);\n    setEditingContact(null);\n    setEditPhoneNumber('');\n    setEditPhoneError('');\n  };\n\n  const handleDialogClose = () => {\n    setShowAddDialog(false);\n    setShowAddModeDialog(false);\n    setAddMode('single');\n    setNewContact({ name: '', phoneNumber: '' });\n    setMultipleNumbers('');\n    setMultipleNumbersErrors([]);\n    setValidationErrors({ name: '', phoneNumber: '' });\n    setSelectedCountry(countryData[0]); // Reset to default country (India)\n  };\n\n  const handleAddModeSelect = (mode: 'single' | 'multiple') => {\n    setAddMode(mode);\n    setShowAddModeDialog(false);\n    setShowAddDialog(true);\n  };\n\n  const filteredMembers = members.filter(member =>\n    member.phoneNumber.includes(searchTerm) ||\n    (member.name && member.name.toLowerCase().includes(searchTerm.toLowerCase()))\n  );\n\n  const handleSelectAll = (checked: boolean) => {\n    setSelectAll(checked);\n    if (checked) {\n      setSelectedContacts(filteredMembers.map(member => member.id));\n    } else {\n      setSelectedContacts([]);\n    }\n  };\n\n  const handleSelectContact = (contactId: string, checked: boolean) => {\n    if (checked) {\n      setSelectedContacts(prev => [...prev, contactId]);\n    } else {\n      setSelectedContacts(prev => prev.filter(id => id !== contactId));\n      setSelectAll(false);\n    }\n  };\n\n  const handleFileImport = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      importCsvMutation.mutate(file);\n    }\n  };\n\n  const exportContacts = () => {\n    window.open(`/api/contact-groups/${groupId}/export`);\n  };\n\n  useEffect(() => {\n    if (filteredMembers.length > 0 && selectedContacts.length === filteredMembers.length) {\n      setSelectAll(true);\n    } else {\n      setSelectAll(false);\n    }\n  }, [selectedContacts, filteredMembers]);\n\n  if (!groupId) {\n    setLocation('/');\n    return null;\n  }\n\n  if (groupLoading || membersLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      <div className=\"max-w-6xl mx-auto p-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              variant=\"ghost\"\n              onClick={() => setLocation('/dashboard?module=contact-groups')}\n              className=\"flex items-center space-x-2\"\n            >\n              <ArrowLeft className=\"h-4 w-4\" />\n              <span>Back</span>\n            </Button>\n            <div>\n              <h1 className=\"text-2xl font-bold\">{group?.name}</h1>\n              <p className=\"text-muted-foreground\">\n                {group?.totalContacts} total contacts • {selectedContacts.length} selected\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <input\n              type=\"file\"\n              accept=\".csv\"\n              onChange={handleFileImport}\n              className=\"hidden\"\n              id=\"csv-import\"\n            />\n            <Button\n              variant=\"outline\"\n              onClick={() => document.getElementById('csv-import')?.click()}\n              disabled={isImporting}\n              className=\"flex items-center space-x-2\"\n            >\n              {isImporting ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 animate-spin\" />\n                  <span>Importing...</span>\n                </>\n              ) : (\n                <>\n                  <Upload className=\"h-4 w-4\" />\n                  <span>Import CSV</span>\n                </>\n              )}\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={exportContacts}\n              className=\"flex items-center space-x-2\"\n            >\n              <Download className=\"h-4 w-4\" />\n              <span>Export CSV</span>\n            </Button>\n\n            <Button\n              variant=\"default\"\n              onClick={() => setShowAddModeDialog(true)}\n              className=\"flex items-center space-x-2\"\n            >\n              <UserPlus className=\"h-4 w-4\" />\n              <span>Add Contact</span>\n            </Button>\n            \n            <Button\n              variant=\"destructive\"\n              onClick={() => deleteSelectedMutation.mutate(selectedContacts)}\n              disabled={selectedContacts.length === 0 || deleteSelectedMutation.isPending}\n              className=\"flex items-center space-x-2\"\n            >\n              {deleteSelectedMutation.isPending ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 animate-spin\" />\n                  <span>Deleting...</span>\n                </>\n              ) : (\n                <>\n                  <Trash2 className=\"h-4 w-4\" />\n                  <span>Delete</span>\n                </>\n              )}\n            </Button>\n          </div>\n        </div>\n\n        {/* Search */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4 flex-1\">\n                <div className=\"relative flex-1 max-w-md\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    placeholder=\"Search contacts...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10\"\n                  />\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Contacts Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Group Contacts</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {/* Select All Section */}\n              <div className=\"flex items-center space-x-2 px-4 py-2 bg-muted/30 rounded-lg\">\n                <Checkbox\n                  id=\"select-all\"\n                  checked={selectAll}\n                  onCheckedChange={handleSelectAll}\n                />\n                <label htmlFor=\"select-all\" className=\"text-sm font-medium\">\n                  Select All ({filteredMembers.length})\n                </label>\n              </div>\n\n              {/* Table Header */}\n              <div className=\"grid grid-cols-12 gap-2 py-2 px-4 border-b font-medium text-sm text-muted-foreground text-center\">\n                <div className=\"col-span-1\">SELECT</div>\n                <div className=\"col-span-1\">ID</div>\n                <div className=\"col-span-4\">NAME</div>\n                <div className=\"col-span-5\">PHONE NUMBER</div>\n                <div className=\"col-span-1\">EDIT</div>\n              </div>\n\n              {/* Table Rows */}\n              {filteredMembers.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-muted-foreground\">No contacts found</p>\n                </div>\n              ) : (\n                filteredMembers.map((member, index) => (\n                  <div\n                    key={member.id}\n                    className=\"grid grid-cols-12 gap-2 py-3 px-4 border-b hover:bg-muted/50 transition-colors\"\n                  >\n                    <div className=\"col-span-1 flex items-center justify-center\">\n                      <Checkbox\n                        checked={selectedContacts.includes(member.id)}\n                        onCheckedChange={(checked) => handleSelectContact(member.id, checked as boolean)}\n                      />\n                    </div>\n                    <div className=\"col-span-1 flex items-center justify-center text-sm text-muted-foreground\">\n                      {index + 1}\n                    </div>\n                    <div className=\"col-span-4 flex items-center justify-center text-sm\">\n                      {member.name || '-'}\n                    </div>\n                    <div className=\"col-span-5 flex items-center justify-center font-mono text-sm\">\n                      {member.phoneNumber}\n                    </div>\n                    <div className=\"col-span-1 flex items-center justify-center\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleEditContact(member)}\n                        className=\"h-8 w-8 p-0 hover:bg-primary/10\"\n                      >\n                        <Edit2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Add Mode Selection Dialog */}\n        <Dialog open={showAddModeDialog} onOpenChange={setShowAddModeDialog}>\n          <DialogContent className=\"sm:max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Choose Add Contact Method</DialogTitle>\n              <DialogDescription>\n                Select how you want to add contacts to this group\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <Button\n                  variant=\"outline\"\n                  className=\"h-24 flex flex-col items-center space-y-2 hover:bg-primary/5\"\n                  onClick={() => handleAddModeSelect('single')}\n                >\n                  <UserPlus className=\"h-6 w-6\" />\n                  <div className=\"text-center\">\n                    <div className=\"font-medium\">Single Contact</div>\n                    <div className=\"text-xs text-muted-foreground\">Add one contact with name</div>\n                  </div>\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  className=\"h-24 flex flex-col items-center space-y-2 hover:bg-primary/5\"\n                  onClick={() => handleAddModeSelect('multiple')}\n                >\n                  <Users className=\"h-6 w-6\" />\n                  <div className=\"text-center\">\n                    <div className=\"font-medium\">Multiple Numbers</div>\n                    <div className=\"text-xs text-muted-foreground\">Add multiple phone numbers</div>\n                  </div>\n                </Button>\n              </div>\n            </div>\n            <DialogFooter>\n              <Button variant=\"outline\" onClick={() => setShowAddModeDialog(false)}>\n                Cancel\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n\n        {/* Add Contact Dialog */}\n        <Dialog open={showAddDialog} onOpenChange={setShowAddDialog}>\n          <DialogContent className={addMode === 'multiple' ? \"sm:max-w-2xl\" : \"sm:max-w-md\"}>\n            <DialogHeader>\n              <DialogTitle>\n                {addMode === 'single' ? 'Add Single Contact' : 'Add Multiple Numbers'}\n              </DialogTitle>\n              {addMode === 'multiple' && (\n                <DialogDescription>\n                  Country code is mandatory! Enter phone numbers with country codes (+91, +1, +44, etc.) followed by 9-12 digits.\n                </DialogDescription>\n              )}\n            </DialogHeader>\n            \n            <div className=\"space-y-4\">\n              {addMode === 'single' ? (\n                <>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"name\">Name</Label>\n                    <Input\n                      id=\"name\"\n                      placeholder=\"Enter contact name\"\n                      value={newContact.name}\n                      onChange={(e) => {\n                        setNewContact(prev => ({ ...prev, name: e.target.value }));\n                        if (validationErrors.name) {\n                          setValidationErrors(prev => ({ ...prev, name: validateName(e.target.value) }));\n                        }\n                      }}\n                      onKeyDown={(e) => {\n                        if (e.key === 'Enter') {\n                          e.preventDefault();\n                          document.getElementById('phoneNumber')?.focus();\n                        }\n                      }}\n                      className={validationErrors.name ? 'border-red-500' : ''}\n                    />\n                    {validationErrors.name && (\n                      <p className=\"text-sm text-red-500\">{validationErrors.name}</p>\n                    )}\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"phoneNumber\">Phone Number</Label>\n                    <div className=\"flex space-x-2\">\n                      {/* Country Code Dropdown */}\n                      <Select \n                        value={selectedCountry.code} \n                        onValueChange={(value) => {\n                          const country = countryData.find(c => c.code === value);\n                          if (country) {\n                            setSelectedCountry(country);\n                            // Clear phone number and validation errors when country changes\n                            setNewContact(prev => ({ ...prev, phoneNumber: '' }));\n                            setValidationErrors(prev => ({ ...prev, phoneNumber: '' }));\n                          }\n                        }}\n                      >\n                        <SelectTrigger className=\"w-32 flex-shrink-0\">\n                          <SelectValue>\n                            <div className=\"flex items-center space-x-2\">\n                              <span>{selectedCountry.flag}</span>\n                              <span className=\"text-sm\">{selectedCountry.code}</span>\n                            </div>\n                          </SelectValue>\n                        </SelectTrigger>\n                        <SelectContent className=\"max-h-60\">\n                          {countryData.map((country) => (\n                            <SelectItem key={country.code} value={country.code}>\n                              <div className=\"flex items-center space-x-3\">\n                                <span>{country.flag}</span>\n                                <span className=\"font-medium\">{country.code}</span>\n                                <span className=\"text-sm text-muted-foreground\">{country.country}</span>\n                              </div>\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      \n                      {/* Phone Number Input */}\n                      <Input\n                        id=\"phoneNumber\"\n                        placeholder={`Enter ${selectedCountry.minDigits === selectedCountry.maxDigits \n                          ? selectedCountry.minDigits \n                          : `${selectedCountry.minDigits}-${selectedCountry.maxDigits}`}-digit phone number`}\n                        value={newContact.phoneNumber}\n                        onChange={(e) => {\n                          // Only allow numbers\n                          const value = e.target.value.replace(/[^0-9]/g, '');\n                          setNewContact(prev => ({ ...prev, phoneNumber: value }));\n                          if (validationErrors.phoneNumber) {\n                            setValidationErrors(prev => ({ ...prev, phoneNumber: validatePhoneNumber(value) }));\n                          }\n                        }}\n                        onKeyDown={(e) => {\n                          if (e.key === 'Enter') {\n                            e.preventDefault();\n                            handleAddContact();\n                          }\n                        }}\n                        maxLength={selectedCountry.maxDigits}\n                        className={`flex-1 ${validationErrors.phoneNumber ? 'border-red-500' : ''}`}\n                      />\n                    </div>\n                    {validationErrors.phoneNumber && (\n                      <p className=\"text-sm text-red-500\">{validationErrors.phoneNumber}</p>\n                    )}\n                  </div>\n                </>\n              ) : (\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"multipleNumbers\">Phone Numbers</Label>\n                  <Textarea\n                    id=\"multipleNumbers\"\n                    placeholder={`Country code is mandatory! Enter phone numbers with country codes, one per line:\n+919384938438\n+1234567890\n+447123456789\n+49123456789\n+33123456789\n\nFormat: +[country code][9-12 digits]\nValid examples: +91xxxxxxxxxx, +1xxxxxxxxxx, +44xxxxxxxxxxx\n\nPress Ctrl+Enter to save`}\n                    value={multipleNumbers}\n                    onChange={(e) => {\n                      setMultipleNumbers(e.target.value);\n                      // Clear errors when user starts typing\n                      if (multipleNumbersErrors.length > 0) {\n                        const newErrors = validateMultiplePhoneNumbers(e.target.value);\n                        setMultipleNumbersErrors(newErrors);\n                      }\n                    }}\n                    onKeyDown={(e) => {\n                      if (e.key === 'Enter' && (e.ctrlKey || e.metaKey)) {\n                        e.preventDefault();\n                        handleAddContact();\n                      }\n                    }}\n                    className={`min-h-[200px] font-mono text-sm ${multipleNumbersErrors.length > 0 ? 'border-red-500' : ''}`}\n                  />\n                  {multipleNumbersErrors.length > 0 && (\n                    <div className=\"space-y-1 max-h-32 overflow-y-auto\">\n                      {multipleNumbersErrors.map((error, index) => (\n                        <p key={index} className=\"text-sm text-red-500\">{error}</p>\n                      ))}\n                    </div>\n                  )}\n                  {multipleNumbers.trim() && multipleNumbersErrors.length === 0 && (\n                    <p className=\"text-sm text-green-600\">\n                      ✓ {formatMultiplePhoneNumbers(multipleNumbers).length} valid numbers detected\n                    </p>\n                  )}\n                </div>\n              )}\n            </div>\n            \n            <DialogFooter>\n              <Button variant=\"outline\" onClick={handleDialogClose}>\n                Cancel\n              </Button>\n              <Button \n                onClick={handleAddContact}\n                disabled={\n                  addMode === 'single' \n                    ? addContactMutation.isPending \n                    : addMultipleContactsMutation.isPending\n                }\n                className=\"flex items-center space-x-2\"\n              >\n                {(addMode === 'single' ? addContactMutation.isPending : addMultipleContactsMutation.isPending) ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 animate-spin\" />\n                    <span>Adding...</span>\n                  </>\n                ) : (\n                  <span>{addMode === 'single' ? 'Add Contact' : 'Add Numbers'}</span>\n                )}\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n\n        {/* Edit Contact Dialog */}\n        <Dialog open={showEditDialog} onOpenChange={handleEditDialogClose}>\n          <DialogContent className=\"sm:max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Edit Contact</DialogTitle>\n              <DialogDescription>\n                Update the contact name and phone number. Format: +[country code][9-12 digits]\n              </DialogDescription>\n            </DialogHeader>\n            \n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"editName\">Name</Label>\n                <Input\n                  id=\"editName\"\n                  placeholder=\"Enter contact name (optional)\"\n                  value={editingContact?.name || ''}\n                  onChange={(e) => setEditingContact(prev => prev ? { ...prev, name: e.target.value } : prev)}\n                  onKeyDown={(e) => {\n                    if (e.key === 'Enter') {\n                      e.preventDefault();\n                      document.getElementById('editPhoneNumber')?.focus();\n                    }\n                  }}\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"editPhoneNumber\">Phone Number</Label>\n                <Input\n                  id=\"editPhoneNumber\"\n                  placeholder=\"Enter phone number with country code (e.g., +919876543210)\"\n                  value={editPhoneNumber}\n                  onChange={(e) => {\n                    setEditPhoneNumber(e.target.value);\n                    if (editPhoneError) {\n                      setEditPhoneError(validateEditPhoneNumber(e.target.value));\n                    }\n                  }}\n                  onKeyDown={(e) => {\n                    if (e.key === 'Enter') {\n                      e.preventDefault();\n                      handleSaveEdit();\n                    }\n                  }}\n                  className={editPhoneError ? 'border-red-500' : ''}\n                />\n                {editPhoneError && (\n                  <p className=\"text-sm text-red-500\">{editPhoneError}</p>\n                )}\n              </div>\n            </div>\n            \n            <DialogFooter>\n              <Button variant=\"outline\" onClick={handleEditDialogClose}>\n                Cancel\n              </Button>\n              <Button \n                onClick={handleSaveEdit}\n                disabled={editContactMutation.isPending}\n                className=\"flex items-center space-x-2\"\n              >\n                {editContactMutation.isPending ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 animate-spin\" />\n                    <span>Saving...</span>\n                  </>\n                ) : (\n                  <span>Save</span>\n                )}\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}","size_bytes":39922},"client/src/pages/landing.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport Navigation from \"@/components/ui/navigation\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-orange-50 via-red-50 to-pink-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900\">\n      <Navigation currentPage=\"home\" />\n\n      {/* Hero Section */}\n      <section className=\"pt-32 pb-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n            {/* Left Content */}\n            <div className=\"space-y-8\">\n              <div className=\"space-y-4\">\n                <Badge variant=\"secondary\" className=\"bg-orange-100 text-orange-700 dark:bg-orange-900/20 dark:text-orange-400\">\n                  WhatsApp Automation Platform\n                </Badge>\n                <h1 className=\"text-5xl lg:text-6xl font-bold leading-tight\">\n                  <span className=\"text-blue-600 dark:text-blue-400\">Your words,</span>{\" \"}\n                  <span className=\"text-pink-500 dark:text-pink-400\">effortlessly</span>\n                  <br />\n                  <span className=\"text-gray-900 dark:text-white\">delivered.</span>{\" \"}\n                  <span className=\"text-blue-600 dark:text-blue-400\">That's</span>\n                  <br />\n                  <span className=\"text-purple-600 dark:text-purple-400\">smooth messaging.</span>\n                </h1>\n                <p className=\"text-xl text-gray-600 dark:text-gray-300 leading-relaxed\">\n                  We help you automate WhatsApp messages like a boss, manage contacts like a genius, \n                  and optimize your communication like you've got a degree in viral engagement!\n                </p>\n              </div>\n\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <Link href=\"/signup\">\n                  <Button size=\"lg\" className=\"bg-blue-600 hover:bg-blue-700 text-white px-8 py-3 text-lg\">\n                    Get start now\n                  </Button>\n                </Link>\n                <Link href=\"/features\">\n                  <Button size=\"lg\" variant=\"outline\" className=\"border-gray-300 dark:border-gray-600 px-8 py-3 text-lg\">\n                    Learn more\n                  </Button>\n                </Link>\n              </div>\n\n              <div className=\"flex items-center justify-center sm:justify-start\">\n                <div className=\"inline-flex items-center px-4 py-2 rounded-full bg-gradient-to-r from-green-100 to-blue-100 dark:from-green-900/30 dark:to-blue-900/30 border border-green-200 dark:border-green-700/50\">\n                  <span className=\"text-lg font-semibold text-green-700 dark:text-green-300\">\n                    ⚡ No credit card required\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            {/* Right Content - Animated Hero Image */}\n            <div className=\"relative flex items-center justify-center\">\n              {/* Animated image */}\n              <img \n                src=\"/hero-community.png\"\n                alt=\"WhatsApp Community and Messaging Illustration\"\n                className=\"w-96 h-96 lg:w-[500px] lg:h-[500px] object-contain transform hover:scale-110 transition-all duration-700 hover:rotate-2 filter drop-shadow-2xl\"\n                loading=\"lazy\"\n              />\n              \n              {/* Floating animated elements */}\n              <div className=\"absolute -top-4 -right-4 w-16 h-16 bg-pink-500 rounded-full opacity-20 animate-pulse\"></div>\n              <div className=\"absolute -bottom-6 -left-6 w-20 h-20 bg-purple-500 rounded-full opacity-20 animate-pulse\"></div>\n              <div className=\"absolute top-1/2 -right-8 w-12 h-12 bg-blue-500 rounded-full opacity-30 animate-bounce\"></div>\n              <div className=\"absolute bottom-1/4 -left-8 w-10 h-10 bg-orange-400 rounded-full opacity-25 animate-pulse\"></div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Stats Section */}\n      <section className=\"py-16 bg-white/50 dark:bg-gray-800/50 backdrop-blur-sm\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 text-center\">\n            <div className=\"space-y-2\">\n              <div className=\"text-4xl font-bold text-orange-600 dark:text-orange-400\">292</div>\n              <div className=\"text-gray-600 dark:text-gray-400\">Total WhatsApp Campaigns completed per month</div>\n            </div>\n            <div className=\"space-y-2\">\n              <div className=\"text-4xl font-bold text-orange-600 dark:text-orange-400\">2,582</div>\n              <div className=\"text-gray-600 dark:text-gray-400\">Messages are sent without interruption every week</div>\n            </div>\n            <div className=\"space-y-2\">\n              <div className=\"text-4xl font-bold text-orange-600 dark:text-orange-400\">25,792</div>\n              <div className=\"text-gray-600 dark:text-gray-400\">Clients choose platform to build business through WhatsApp</div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer Tagline */}\n      <section className=\"py-16\">\n        <div className=\"max-w-4xl mx-auto text-center px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-3xl font-bold mb-4\">\n            <span className=\"italic text-gray-700 dark:text-gray-300\">Utilize one app to </span>\n            <span className=\"text-blue-600 dark:text-blue-400 italic\">Achieve </span>\n            <span className=\"text-gray-700 dark:text-gray-300 italic\">multiple </span>\n            <span className=\"text-blue-600 dark:text-blue-400 italic\">Goals</span>\n          </h2>\n          <p className=\"text-lg text-gray-600 dark:text-gray-400 max-w-2xl mx-auto\">\n            💡 Maximize efficiency with our automation features, and measure the success of your strategy using real-time analytics and insights 💡\n          </p>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-50 dark:bg-gray-900 border-t border-gray-200 dark:border-gray-700\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center\">\n            <div className=\"flex items-center space-x-2 mb-4 md:mb-0\">\n              <img src=\"/hw-logo.png\" alt=\"HubWale\" className=\"h-6 w-auto\" />\n            </div>\n            <div className=\"flex space-x-6 text-sm text-gray-600 dark:text-gray-400\">\n              <Link href=\"#\" className=\"hover:text-gray-900 dark:hover:text-white\">Terms of Service</Link>\n              <Link href=\"#\" className=\"hover:text-gray-900 dark:hover:text-white\">Privacy Policy</Link>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":6917},"client/src/pages/login.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Eye, EyeOff } from \"lucide-react\";\nimport { loginSchema, type LoginRequest } from \"@shared/schema\";\nimport Navigation from \"@/components/ui/navigation\";\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [showPassword, setShowPassword] = useState(false);\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    clearErrors,\n    setValue,\n    formState: { errors, isSubmitting }\n  } = useForm<LoginRequest>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      usernameOrEmail: \"\",\n      password: \"\",\n      rememberMe: false,\n    }\n  });\n\n  const fieldValues = watch();\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginRequest) => {\n      return await apiRequest(\"/api/auth/login\", \"POST\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Login successful! Redirecting to dashboard...\",\n      });\n      setLocation(\"/dashboard\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login Failed\",\n        description: error.message || \"Invalid credentials. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: LoginRequest) => {\n    console.log(\"Login form submitted with data:\", data);\n    loginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-orange-50 via-red-50 to-pink-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900\">\n      <Navigation currentPage=\"login\" />\n\n      <div className=\"flex items-center justify-center min-h-[calc(100vh-5rem)] px-4\">\n        <div className=\"grid lg:grid-cols-2 gap-8 max-w-6xl w-full items-center\">\n            {/* Left Side - Login Form */}\n            <div className=\"flex items-center justify-center\">\n              <Card className=\"w-full max-w-md shadow-2xl border-0 bg-white/80 dark:bg-gray-800/80 backdrop-blur-md\">\n                <CardHeader className=\"space-y-4 text-center\">\n                  <div>\n                    <CardTitle className=\"text-3xl font-bold text-gray-900 dark:text-white font-inter tracking-tight\">Login</CardTitle>\n                  </div>\n                </CardHeader>\n              \n                <CardContent className=\"space-y-6\">\n              <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n                <div className=\"relative\">\n                  <Input\n                    id=\"usernameOrEmail\"\n                    type=\"text\"\n                    className=\"bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600 py-3 px-3\"\n                    {...register(\"usernameOrEmail\")}\n                  />\n                  <Label \n                    htmlFor=\"usernameOrEmail\" \n                    className={`absolute left-3 pointer-events-none transition-all duration-200 ${\n                      fieldValues.usernameOrEmail\n                        ? \"hidden\"\n                        : \"top-3 text-sm text-gray-500 dark:text-gray-400\"\n                    }`}\n                  >\n                    Enter your username or email\n                  </Label>\n                  {errors.usernameOrEmail && (\n                    <p className=\"text-sm text-red-500 mt-1\">{errors.usernameOrEmail.message}</p>\n                  )}\n                </div>\n\n                <div className=\"relative\">\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    className=\"bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600 py-3 px-3 pr-12\"\n                    {...register(\"password\")}\n                  />\n                  <Label \n                    htmlFor=\"password\" \n                    className={`absolute left-3 pointer-events-none transition-all duration-200 ${\n                      fieldValues.password\n                        ? \"hidden\"\n                        : \"top-3 text-sm text-gray-500 dark:text-gray-400\"\n                    }`}\n                  >\n                    Enter your Password\n                  </Label>\n                  <button\n                    type=\"button\"\n                    tabIndex={-1}\n                    className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 p-1\"\n                    onClick={() => setShowPassword(!showPassword)}\n                  >\n                    {showPassword ? <EyeOff size={18} /> : <Eye size={18} />}\n                  </button>\n                  {errors.password && (\n                    <p className=\"text-sm text-red-500 mt-1\">{errors.password.message}</p>\n                  )}\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox \n                      id=\"rememberMe\"\n                      checked={fieldValues.rememberMe}\n                      onCheckedChange={(checked) => setValue(\"rememberMe\", checked === true)}\n                    />\n                    <Label htmlFor=\"rememberMe\" className=\"text-sm text-gray-600 dark:text-gray-400\">\n                      Remember me\n                    </Label>\n                  </div>\n                  <Link href=\"/forgot-password\" className=\"text-sm text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300\">\n                    Forgot password?\n                  </Link>\n                </div>\n\n                {loginMutation.isError && (\n                  <Alert variant=\"destructive\">\n                    <AlertDescription>\n                      {(loginMutation.error as Error)?.message || \"Login failed. Please try again.\"}\n                    </AlertDescription>\n                  </Alert>\n                )}\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full bg-gray-900 hover:bg-gray-800 text-white py-3 text-lg font-semibold font-inter tracking-wide rounded-full transition-all duration-300 hover:scale-105 hover:shadow-lg active:scale-95\"\n                  disabled={isSubmitting || loginMutation.isPending}\n                >\n                  {isSubmitting || loginMutation.isPending ? \"Logging in...\" : \"LOGIN\"}\n                </Button>\n              </form>\n\n              <div className=\"text-center\">\n                <span className=\"text-gray-600 dark:text-gray-400\">Don't have an account? </span>\n                <Link href=\"/signup\" className=\"text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 font-medium\">\n                  Sign up\n                </Link>\n              </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Right Side - Animated Illustration */}\n            <div className=\"hidden lg:flex items-center justify-center relative\">\n              <div className=\"relative\">\n                {/* Animated image */}\n                <img \n                  src=\"/form-user.png\"\n                  alt=\"WhatsApp Messaging Illustration\"\n                  className=\"w-96 h-96 object-contain transform hover:scale-110 transition-all duration-700 hover:rotate-3 filter drop-shadow-2xl\"\n                  loading=\"lazy\"\n                />\n                \n                {/* Floating animated elements */}\n                <div className=\"absolute -top-4 -right-4 w-16 h-16 bg-pink-500 rounded-full opacity-20 animate-pulse\"></div>\n                <div className=\"absolute -bottom-6 -left-6 w-20 h-20 bg-purple-500 rounded-full opacity-20 animate-pulse\"></div>\n                <div className=\"absolute top-1/2 -left-8 w-12 h-12 bg-blue-400 rounded-full opacity-30 animate-bounce\"></div>\n              </div>\n            </div>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <div className=\"absolute bottom-4 left-1/2 transform -translate-x-1/2 text-center\">\n        <div className=\"flex space-x-6 text-sm text-gray-600 dark:text-gray-400\">\n          <Link href=\"#\" className=\"hover:text-gray-900 dark:hover:text-white\">Terms of Service</Link>\n          <Link href=\"#\" className=\"hover:text-gray-900 dark:hover:text-white\">Privacy Policy</Link>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8957},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/signup.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Eye, EyeOff } from \"lucide-react\";\nimport { signupSchema, type SignupRequest } from \"@shared/schema\";\nimport Navigation from \"@/components/ui/navigation\";\n\n// Country codes list\nconst countryCodes = [\n  { code: \"+1\", country: \"Canada and US\", flag: \"🇺🇸\", id: \"us\" },\n  { code: \"+91\", country: \"India\", flag: \"🇮🇳\", id: \"in\" },\n  { code: \"+44\", country: \"United Kingdom\", flag: \"🇬🇧\", id: \"gb\" },\n  { code: \"+49\", country: \"Germany\", flag: \"🇩🇪\", id: \"de\" },\n  { code: \"+33\", country: \"France\", flag: \"🇫🇷\", id: \"fr\" },\n  { code: \"+61\", country: \"Australia\", flag: \"🇦🇺\", id: \"au\" },\n  { code: \"+81\", country: \"Japan\", flag: \"🇯🇵\", id: \"jp\" },\n  { code: \"+86\", country: \"China\", flag: \"🇨🇳\", id: \"cn\" },\n  { code: \"+7\", country: \"Russia\", flag: \"🇷🇺\", id: \"ru\" },\n  { code: \"+55\", country: \"Brazil\", flag: \"🇧🇷\", id: \"br\" },\n  { code: \"+52\", country: \"Mexico\", flag: \"🇲🇽\", id: \"mx\" },\n  { code: \"+34\", country: \"Spain\", flag: \"🇪🇸\", id: \"es\" },\n  { code: \"+39\", country: \"Italy\", flag: \"🇮🇹\", id: \"it\" },\n  { code: \"+31\", country: \"Netherlands\", flag: \"🇳🇱\", id: \"nl\" },\n  { code: \"+41\", country: \"Switzerland\", flag: \"🇨🇭\", id: \"ch\" },\n  { code: \"+46\", country: \"Sweden\", flag: \"🇸🇪\", id: \"se\" },\n  { code: \"+47\", country: \"Norway\", flag: \"🇳🇴\", id: \"no\" },\n  { code: \"+45\", country: \"Denmark\", flag: \"🇩🇰\", id: \"dk\" },\n  { code: \"+358\", country: \"Finland\", flag: \"🇫🇮\", id: \"fi\" },\n  { code: \"+82\", country: \"South Korea\", flag: \"🇰🇷\", id: \"kr\" },\n  { code: \"+65\", country: \"Singapore\", flag: \"🇸🇬\", id: \"sg\" },\n  { code: \"+60\", country: \"Malaysia\", flag: \"🇲🇾\", id: \"my\" },\n  { code: \"+66\", country: \"Thailand\", flag: \"🇹🇭\", id: \"th\" },\n  { code: \"+84\", country: \"Vietnam\", flag: \"🇻🇳\", id: \"vn\" },\n  { code: \"+62\", country: \"Indonesia\", flag: \"🇮🇩\", id: \"id\" },\n  { code: \"+63\", country: \"Philippines\", flag: \"🇵🇭\", id: \"ph\" },\n  { code: \"+971\", country: \"United Arab Emirates\", flag: \"🇦🇪\", id: \"ae\" },\n  { code: \"+966\", country: \"Saudi Arabia\", flag: \"🇸🇦\", id: \"sa\" },\n  { code: \"+20\", country: \"Egypt\", flag: \"🇪🇬\", id: \"eg\" },\n  { code: \"+27\", country: \"South Africa\", flag: \"🇿🇦\", id: \"za\" },\n  { code: \"+234\", country: \"Nigeria\", flag: \"🇳🇬\", id: \"ng\" },\n  { code: \"+254\", country: \"Kenya\", flag: \"🇰🇪\", id: \"ke\" },\n  { code: \"+92\", country: \"Pakistan\", flag: \"🇵🇰\", id: \"pk\" },\n  { code: \"+880\", country: \"Bangladesh\", flag: \"🇧🇩\", id: \"bd\" },\n  { code: \"+94\", country: \"Sri Lanka\", flag: \"🇱🇰\", id: \"lk\" },\n  { code: \"+977\", country: \"Nepal\", flag: \"🇳🇵\", id: \"np\" },\n];\n\nexport default function Signup() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [selectedCountryCode, setSelectedCountryCode] = useState(\"+91\");\n\n  const {\n    register,\n    handleSubmit,\n    watch,\n    clearErrors,\n    setValue,\n    formState: { errors, isSubmitting }\n  } = useForm<SignupRequest>({\n    resolver: zodResolver(signupSchema),\n    defaultValues: {\n      fullName: \"\",\n      username: \"\",\n      email: \"\",\n      phone: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      acceptTerms: false,\n    }\n  });\n\n  const fieldValues = watch();\n\n  const signupMutation = useMutation({\n    mutationFn: async (data: SignupRequest) => {\n      return await apiRequest(\"/api/auth/signup\", \"POST\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Account created successfully! Redirecting to dashboard...\",\n      });\n      setLocation(\"/dashboard\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Signup Failed\",\n        description: error.message || \"Failed to create account. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: SignupRequest) => {\n    // Combine country code with phone number\n    const formattedData = {\n      ...data,\n      phone: selectedCountryCode + data.phone\n    };\n    console.log(\"Signup form submitted with data:\", formattedData);\n    signupMutation.mutate(formattedData);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-orange-50 via-red-50 to-pink-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900\">\n      <Navigation currentPage=\"signup\" />\n\n      <div className=\"flex items-center justify-center min-h-[calc(100vh-5rem)] px-4\">\n        <div className=\"grid lg:grid-cols-2 gap-8 max-w-6xl w-full items-center\">\n            {/* Left Side - Signup Form */}\n            <div className=\"flex items-center justify-center\">\n              <Card className=\"w-full max-w-md shadow-2xl border-0 bg-white/80 dark:bg-gray-800/80 backdrop-blur-md\">\n                <CardHeader className=\"space-y-4 text-center\">\n                  <div>\n                    <CardTitle className=\"text-3xl font-bold text-gray-900 dark:text-white font-inter tracking-tight\">Signup</CardTitle>\n                  </div>\n                </CardHeader>\n              \n                <CardContent className=\"space-y-6\">\n              <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n                <div className=\"relative\">\n                  <Input\n                    id=\"fullName\"\n                    type=\"text\"\n                    className=\"bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600 py-3 px-3\"\n                    {...register(\"fullName\")}\n                  />\n                  <Label \n                    htmlFor=\"fullName\" \n                    className={`absolute left-3 pointer-events-none transition-all duration-200 ${\n                      fieldValues.fullName\n                        ? \"hidden\"\n                        : \"top-3 text-sm text-gray-500 dark:text-gray-400\"\n                    }`}\n                  >\n                    Fullname\n                  </Label>\n                  {errors.fullName && (\n                    <p className=\"text-sm text-red-500 mt-1\">{errors.fullName.message}</p>\n                  )}\n                </div>\n\n                <div className=\"relative\">\n                  <Input\n                    id=\"username\"\n                    type=\"text\"\n                    className=\"bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600 py-3 px-3\"\n                    {...register(\"username\")}\n                  />\n                  <Label \n                    htmlFor=\"username\" \n                    className={`absolute left-3 pointer-events-none transition-all duration-200 ${\n                      fieldValues.username\n                        ? \"hidden\"\n                        : \"top-3 text-sm text-gray-500 dark:text-gray-400\"\n                    }`}\n                  >\n                    Username\n                  </Label>\n                  {errors.username && (\n                    <p className=\"text-sm text-red-500 mt-1\">{errors.username.message}</p>\n                  )}\n                </div>\n\n                <div className=\"relative\">\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    className=\"bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600 py-3 px-3\"\n                    {...register(\"email\")}\n                  />\n                  <Label \n                    htmlFor=\"email\" \n                    className={`absolute left-3 pointer-events-none transition-all duration-200 ${\n                      fieldValues.email\n                        ? \"hidden\"\n                        : \"top-3 text-sm text-gray-500 dark:text-gray-400\"\n                    }`}\n                  >\n                    Email\n                  </Label>\n                  {errors.email && (\n                    <p className=\"text-sm text-red-500 mt-1\">{errors.email.message}</p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <div className=\"flex space-x-2\">\n                    <Select value={selectedCountryCode} onValueChange={setSelectedCountryCode}>\n                      <SelectTrigger className=\"w-32 bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent className=\"max-h-60\">\n                        {countryCodes.map((country) => (\n                          <SelectItem key={country.id} value={country.code}>\n                            <div className=\"flex items-center space-x-2\">\n                              <span>{country.flag}</span>\n                              <span>{country.code}</span>\n                              <span className=\"text-xs text-gray-500\">{country.country}</span>\n                            </div>\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <div className=\"flex-1 relative\">\n                      <Input\n                        id=\"phone\"\n                        type=\"tel\"\n                        className=\"bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600 py-3 px-3\"\n                        {...register(\"phone\")}\n                      />\n                      <Label \n                        htmlFor=\"phone\" \n                        className={`absolute left-3 pointer-events-none transition-all duration-200 ${\n                          fieldValues.phone\n                            ? \"hidden\"\n                            : \"top-3 text-sm text-gray-500 dark:text-gray-400\"\n                        }`}\n                      >\n                        Enter phone number\n                      </Label>\n                    </div>\n                  </div>\n                  {errors.phone && (\n                    <p className=\"text-sm text-red-500 mt-1\">{errors.phone.message}</p>\n                  )}\n                </div>\n\n\n\n                <div className=\"relative\">\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    className=\"bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600 py-3 px-3 pr-12\"\n                    {...register(\"password\")}\n                  />\n                  <Label \n                    htmlFor=\"password\" \n                    className={`absolute left-3 pointer-events-none transition-all duration-200 ${\n                      fieldValues.password\n                        ? \"hidden\"\n                        : \"top-3 text-sm text-gray-500 dark:text-gray-400\"\n                    }`}\n                  >\n                    Password\n                  </Label>\n                  <button\n                    type=\"button\"\n                    tabIndex={-1}\n                    className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 p-1\"\n                    onClick={() => setShowPassword(!showPassword)}\n                  >\n                    {showPassword ? <EyeOff size={18} /> : <Eye size={18} />}\n                  </button>\n                  {errors.password && (\n                    <p className=\"text-sm text-red-500 mt-1\">{errors.password.message}</p>\n                  )}\n                </div>\n\n                <div className=\"relative\">\n                  <Input\n                    id=\"confirmPassword\"\n                    type={showConfirmPassword ? \"text\" : \"password\"}\n                    className=\"bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600 py-3 px-3 pr-12\"\n                    {...register(\"confirmPassword\")}\n                  />\n                  <Label \n                    htmlFor=\"confirmPassword\" \n                    className={`absolute left-3 pointer-events-none transition-all duration-200 ${\n                      fieldValues.confirmPassword\n                        ? \"hidden\"\n                        : \"top-3 text-sm text-gray-500 dark:text-gray-400\"\n                    }`}\n                  >\n                    Confirm Password\n                  </Label>\n                  <button\n                    type=\"button\"\n                    tabIndex={-1}\n                    className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 p-1\"\n                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                  >\n                    {showConfirmPassword ? <EyeOff size={18} /> : <Eye size={18} />}\n                  </button>\n                  {errors.confirmPassword && (\n                    <p className=\"text-sm text-red-500 mt-1\">{errors.confirmPassword.message}</p>\n                  )}\n                </div>\n\n                <div className=\"flex items-start space-x-2\">\n                  <Checkbox \n                    id=\"acceptTerms\"\n                    checked={fieldValues.acceptTerms}\n                    onCheckedChange={(checked) => {\n                      setValue(\"acceptTerms\", checked === true);\n                      if (checked && errors.acceptTerms) {\n                        clearErrors(\"acceptTerms\");\n                      }\n                    }}\n                    className=\"mt-1\"\n                  />\n                  <Label htmlFor=\"acceptTerms\" className=\"text-sm text-gray-600 dark:text-gray-400 leading-relaxed\">\n                    Accept <Link href=\"/terms\" className=\"text-blue-600 hover:text-blue-800 underline\">Terms & Conditions</Link>\n                  </Label>\n                </div>\n                {errors.acceptTerms && (\n                  <p className=\"text-sm text-red-500\">{errors.acceptTerms.message}</p>\n                )}\n\n                {signupMutation.isError && (\n                  <Alert variant=\"destructive\">\n                    <AlertDescription>\n                      {(signupMutation.error as Error)?.message || \"Signup failed. Please try again.\"}\n                    </AlertDescription>\n                  </Alert>\n                )}\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full bg-gray-900 hover:bg-gray-800 text-white py-3 text-lg font-semibold font-inter tracking-wide rounded-full transition-all duration-300 hover:scale-105 hover:shadow-lg active:scale-95\"\n                  disabled={isSubmitting || signupMutation.isPending}\n                >\n                  {isSubmitting || signupMutation.isPending ? \"Creating Account...\" : \"SIGN UP\"}\n                </Button>\n              </form>\n\n              <div className=\"text-center\">\n                <span className=\"text-gray-600 dark:text-gray-400\">Already have an account? </span>\n                <Link href=\"/login\" className=\"text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 font-medium\">\n                  Login\n                </Link>\n              </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Right Side - Animated Illustration */}\n            <div className=\"hidden lg:flex items-center justify-center relative\">\n              <div className=\"relative\">\n                {/* Animated image */}\n                <img \n                  src=\"/form-user.png\"\n                  alt=\"WhatsApp Messaging Illustration\"\n                  className=\"w-96 h-96 object-contain transform hover:scale-110 transition-all duration-700 hover:-rotate-3 filter drop-shadow-2xl\"\n                  loading=\"lazy\"\n                />\n                \n                {/* Floating animated elements */}\n                <div className=\"absolute -top-4 -left-4 w-16 h-16 bg-blue-500 rounded-full opacity-20 animate-pulse\"></div>\n                <div className=\"absolute -bottom-6 -right-6 w-20 h-20 bg-green-500 rounded-full opacity-20 animate-pulse\"></div>\n              </div>\n            </div>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <div className=\"absolute bottom-4 left-1/2 transform -translate-x-1/2 text-center\">\n        <div className=\"flex space-x-6 text-sm text-gray-600 dark:text-gray-400\">\n          <Link href=\"#\" className=\"hover:text-gray-900 dark:hover:text-white\">Terms of Service</Link>\n          <Link href=\"#\" className=\"hover:text-gray-900 dark:hover:text-white\">Privacy Policy</Link>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":17263},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/authentication-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { UserProfileCard } from \"@/components/ui/user-profile-card\";\nimport { Loader2, RefreshCw, Smartphone, CheckCircle, AlertTriangle, RotateCcw, Bug, ArrowLeft } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport type { SessionInfo } from \"@shared/schema\";\n\ninterface AuthenticationCardProps {\n  sessionInfo?: any;\n  qrData?: { qr?: string | null };\n  isLoading: boolean;\n  isLogoutPending: boolean;\n  onLogout: () => void;\n  onRefreshQR: () => void;\n  onRetryConnection: () => void;\n  lastUserName?: string;\n}\n\nexport function AuthenticationCard({\n  sessionInfo,\n  qrData,\n  isLoading,\n  isLogoutPending,\n  onLogout,\n  onRefreshQR,\n  onRetryConnection,\n  lastUserName,\n}: AuthenticationCardProps) {\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const showQRSection = !sessionInfo && !isLoading && qrData?.qr && qrData.qr !== null && !isLogoutPending;\n  const showAuthenticatedSection = sessionInfo && sessionInfo.name;\n  const showLoadingSection = isLoading || isLogoutPending;\n  const showQRGeneratingSection = !sessionInfo && !isLoading && !isLogoutPending && (!qrData?.qr || qrData?.qr === null);\n  const showErrorSection = false; // Disable error section - we'll handle QR generation as loading instead\n\n  // Auto-redirect only after fresh QR scan authentication\n  useEffect(() => {\n    if (sessionInfo && sessionInfo.name && sessionInfo.name !== \"Fetching...\" && sessionInfo.name !== \"WhatsApp User\") {\n      // Check if this is a fresh authentication (not an existing session)\n      const wasWaitingForQR = !sessionInfo && qrData?.qr;\n      const isNewAuth = sessionStorage.getItem(`fresh-auth-redirect-${sessionInfo.name}-${sessionInfo.loginTime}`) !== 'completed';\n      \n      // Only redirect if we were just waiting for QR scan and this is a new authentication\n      if (isNewAuth && (qrData?.qr || wasWaitingForQR)) {\n        sessionStorage.setItem(`fresh-auth-redirect-${sessionInfo.name}-${sessionInfo.loginTime}`, 'completed');\n        \n        toast({\n          title: \"Connected\",\n          description: `Welcome back, ${sessionInfo.name}!`,\n        });\n        \n        setTimeout(() => {\n          setLocation('/dashboard');\n        }, 2000);\n      }\n    }\n  }, [sessionInfo, qrData, setLocation, toast]);\n\n  return (\n    <div className=\"w-full\">\n      {/* QR Code State - Full Screen */}\n      {showQRSection && (\n        <div className=\"flex flex-col items-center justify-center min-h-[80vh] bg-background p-8\">\n          <div className=\"text-center\">\n            <div className=\"mb-8\">\n              <div className=\"bg-white p-8 rounded-2xl shadow-xl inline-block border\">\n                <img\n                  src={qrData.qr && qrData.qr.startsWith('data:') ? qrData.qr : `data:image/png;base64,${qrData.qr}`}\n                  alt=\"QR Code for WhatsApp Authentication\"\n                  className=\"w-80 h-80 mx-auto rounded-xl\"\n                  loading=\"lazy\"\n                />\n              </div>\n              <div className=\"flex items-center justify-center space-x-2 mt-6\">\n                <div className=\"w-3 h-3 bg-green-500 rounded-full animate-pulse\"></div>\n                <span className=\"text-lg text-muted-foreground font-medium\">QR Code Active</span>\n              </div>\n            </div>\n            \n            <h1 className=\"text-4xl font-bold text-foreground mb-4\">Scan QR Code</h1>\n            <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n              Open WhatsApp on your phone and scan this QR code to connect your account.\n            </p>\n            \n            <div className=\"flex gap-4 justify-center mb-8\">\n              <Button size=\"lg\" variant=\"outline\" onClick={onRefreshQR}>\n                <RefreshCw className=\"mr-2 h-5 w-5\" />\n                Refresh QR Code\n              </Button>\n            </div>\n            \n\n          </div>\n        </div>\n      )}\n\n      {/* Authenticated State - Full Screen */}\n      {showAuthenticatedSection && (\n        <div className=\"flex flex-col items-center justify-center min-h-[80vh] bg-background p-8\">\n          <div className=\"text-center max-w-2xl\">\n            <div className=\"mx-auto w-24 h-24 bg-green-100 rounded-full flex items-center justify-center mb-6\">\n              <CheckCircle className=\"text-green-600 h-12 w-12\" />\n            </div>\n            <h1 className=\"text-4xl font-bold text-foreground mb-4\">Successfully Connected!</h1>\n            <p className=\"text-xl text-muted-foreground mb-8\">Your WhatsApp account is now linked and ready for automation.</p>\n\n            {/* Clickable Account Plate with Logout inside */}\n            <div \n              className=\"relative bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-xl p-6 shadow-lg cursor-pointer hover:shadow-xl transition-all duration-300 hover:bg-gray-50 dark:hover:bg-gray-700/50 mx-auto max-w-md\"\n              onClick={() => setLocation('/dashboard')}\n            >\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-16 h-16 bg-blue-500 rounded-full flex items-center justify-center text-white text-2xl font-bold\">\n                  {sessionInfo.name.charAt(0).toUpperCase()}\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white\">\n                    {sessionInfo.name}\n                  </h3>\n                </div>\n                <div className=\"text-center\">\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    Connected: {new Date(sessionInfo.loginTime).toLocaleDateString()}\n                  </p>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    {new Date(sessionInfo.loginTime).toLocaleTimeString()}\n                  </p>\n                </div>\n                <Button \n                  size=\"sm\" \n                  variant=\"outline\" \n                  onClick={(e) => {\n                    e.stopPropagation(); // Prevent triggering the parent click\n                    onLogout();\n                  }}\n                  disabled={isLogoutPending}\n                  className=\"hover:bg-red-50 hover:border-red-300 hover:text-red-600\"\n                >\n                  {isLogoutPending ? (\n                    <Loader2 className=\"h-4 w-4 animate-spin\" />\n                  ) : (\n                    \"Logout\"\n                  )}\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Loading State - Full Screen */}\n      {showLoadingSection && (\n        <div className=\"flex flex-col items-center justify-center min-h-[80vh] bg-background p-8\">\n          <div className=\"text-center\">\n            <Loader2 className=\"h-20 w-20 animate-spin text-primary mx-auto mb-6\" />\n            <h1 className=\"text-4xl font-bold text-foreground mb-4\">\n              {isLogoutPending ? \"Logging out...\" : \"Connecting...\"}\n            </h1>\n            <p className=\"text-xl text-muted-foreground\">\n              {isLogoutPending \n                ? \"Please wait while we disconnect your account.\"\n                : \"Please wait while we establish connection with WhatsApp Web.\"\n              }\n            </p>\n          </div>\n        </div>\n      )}\n\n      {/* QR Generating State - Full Screen */}\n      {showQRGeneratingSection && (\n        <div className=\"flex flex-col items-center justify-center min-h-[80vh] bg-background p-8\">\n          <div className=\"text-center\">\n            <div className=\"mb-8\">\n              <div className=\"w-80 h-80 bg-muted/20 rounded-2xl border-2 border-dashed border-muted/50 flex items-center justify-center mx-auto\">\n                <Loader2 className=\"h-16 w-16 animate-spin text-primary\" />\n              </div>\n              <div className=\"flex items-center justify-center space-x-2 mt-6\">\n                <div className=\"w-3 h-3 bg-blue-500 rounded-full animate-pulse\"></div>\n                <span className=\"text-lg text-muted-foreground font-medium\">QR Code Generating</span>\n              </div>\n            </div>\n            \n            <h1 className=\"text-4xl font-bold text-foreground mb-4\">Generating QR Code</h1>\n            <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n              Please wait while we generate a new QR code for WhatsApp authentication.\n            </p>\n            \n            <div className=\"flex gap-4 justify-center mb-8\">\n              <Button size=\"lg\" variant=\"outline\" onClick={onRefreshQR}>\n                <RefreshCw className=\"mr-2 h-5 w-5\" />\n                Refresh QR Code\n              </Button>\n            </div>\n            \n\n          </div>\n        </div>\n      )}\n\n      {/* Error State - Full Screen */}\n      {showErrorSection && (\n        <div className=\"flex flex-col items-center justify-center min-h-[80vh] bg-background p-8\">\n          <div className=\"text-center max-w-2xl\">\n            <div className=\"mx-auto w-24 h-24 bg-red-100 rounded-full flex items-center justify-center mb-6\">\n              <AlertTriangle className=\"text-red-600 h-12 w-12\" />\n            </div>\n            <h1 className=\"text-4xl font-bold text-foreground mb-4\">Connection Failed</h1>\n            <p className=\"text-xl text-muted-foreground mb-8\">\n              Unable to establish connection with WhatsApp Web. Please try again.\n            </p>\n\n            <div className=\"flex gap-4 justify-center\">\n              <Button size=\"lg\" onClick={onRetryConnection}>\n                <RotateCcw className=\"mr-2 h-5 w-5\" />\n                Try Again\n              </Button>\n              <Button size=\"lg\" variant=\"outline\" onClick={onRefreshQR}>\n                <RefreshCw className=\"mr-2 h-5 w-5\" />\n                Refresh QR Code\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":10171},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/core.tsx":{"content":"// Consolidated core UI components to reduce bundle size\nimport * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\n\n// Button variants and component\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline: \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nButton.displayName = \"Button\";\n\n// Badge variants and component\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default: \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive: \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n);\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\n// Input component\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nInput.displayName = \"Input\";\n\n// Label component\nconst Label = React.forwardRef<\n  React.ElementRef<\"label\">,\n  React.ComponentPropsWithoutRef<\"label\">\n>(({ className, ...props }, ref) => (\n  <label\n    ref={ref}\n    className={cn(\n      \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\",\n      className\n    )}\n    {...props}\n  />\n));\nLabel.displayName = \"Label\";\n\n// Textarea component\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = \"Textarea\";\n\nexport { Button, buttonVariants, Badge, badgeVariants, Input, Label, Textarea };","size_bytes":4771},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/status-banner.tsx":{"content":"import { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { CheckCircle, AlertCircle, AlertTriangle } from \"lucide-react\";\n\ninterface StatusBannerProps {\n  type: \"success\" | \"warning\" | \"error\";\n  message: string;\n}\n\nexport function StatusBanner({ type, message }: StatusBannerProps) {\n  const icons = {\n    success: CheckCircle,\n    warning: AlertTriangle,\n    error: AlertCircle,\n  };\n\n  const styles = {\n    success: \"bg-green-50 border-green-200 text-green-800\",\n    warning: \"bg-yellow-50 border-yellow-200 text-yellow-800\",\n    error: \"bg-red-50 border-red-200 text-red-800\",\n  };\n\n  const Icon = icons[type];\n\n  return (\n    <Alert className={`mb-6 animate-in slide-in-from-top-5 ${styles[type]}`}>\n      <Icon className=\"h-4 w-4\" />\n      <AlertDescription className=\"font-medium\">\n        {message}\n      </AlertDescription>\n    </Alert>\n  );\n}\n","size_bytes":868},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/system-status-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface SystemStatusCardProps {\n  systemStatus?: {\n    client: string;\n    puppeteer: string;\n    storage: string;\n    lastCheck: string;\n  };\n}\n\nexport function SystemStatusCard({ systemStatus }: SystemStatusCardProps) {\n  const formatLastCheck = (timestamp?: string) => {\n    if (!timestamp) return \"Never\";\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diffMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));\n    \n    if (diffMinutes < 1) return \"Just now\";\n    if (diffMinutes === 1) return \"1 minute ago\";\n    return `${diffMinutes} minutes ago`;\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status?.toLowerCase()) {\n      case 'running':\n      case 'stable':\n      case 'active':\n        return 'bg-green-500';\n      case 'initializing':\n        return 'bg-yellow-500';\n      default:\n        return 'bg-gray-400';\n    }\n  };\n\n  return (\n    <Card>\n      <div className=\"px-6 py-4 border-b border-border\">\n        <h3 className=\"text-lg font-semibold text-foreground flex items-center\">\n          <svg className=\"w-5 h-5 text-green-500 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z\" />\n          </svg>\n          System Status\n        </h3>\n      </div>\n      \n      <CardContent className=\"p-6\">\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-muted-foreground\">WhatsApp Client</span>\n            <div className=\"flex items-center\">\n              <div className={`w-2 h-2 rounded-full mr-2 ${systemStatus?.client === 'Running' ? 'animate-pulse' : ''} ${getStatusColor(systemStatus?.client || '')}`}></div>\n              <Badge variant={systemStatus?.client === 'Running' ? 'default' : 'secondary'}>\n                {systemStatus?.client || 'Unknown'}\n              </Badge>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-muted-foreground\">Puppeteer</span>\n            <div className=\"flex items-center\">\n              <div className={`w-2 h-2 rounded-full mr-2 ${getStatusColor(systemStatus?.puppeteer || '')}`}></div>\n              <Badge variant=\"default\">\n                {systemStatus?.puppeteer || 'Unknown'}\n              </Badge>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-muted-foreground\">Session Storage</span>\n            <div className=\"flex items-center\">\n              <div className={`w-2 h-2 rounded-full mr-2 ${getStatusColor(systemStatus?.storage || '')}`}></div>\n              <Badge variant=\"default\">\n                {systemStatus?.storage || 'Unknown'}\n              </Badge>\n            </div>\n          </div>\n          \n          <div className=\"pt-4 border-t border-border\">\n            <p className=\"text-xs text-muted-foreground\">\n              Last checked: {formatLastCheck(systemStatus?.lastCheck)}\n            </p>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3427},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/user-profile-card.tsx":{"content":"import { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Loader2 } from \"lucide-react\";\n\ninterface UserProfileCardProps {\n  user?: {\n    name: string;\n    loginTime: string;\n  };\n  isLoading?: boolean;\n}\n\nexport function UserProfileCard({ user, isLoading = false }: UserProfileCardProps) {\n  const formatLoginTime = (timestamp: string) => {\n    const date = new Date(timestamp);\n    return `Connected: ${date.toLocaleDateString()}, ${date.toLocaleTimeString()}`;\n  };\n\n  const getFirstCharacter = (name: string) => {\n    return name.charAt(0).toUpperCase();\n  };\n\n  if (isLoading || !user) {\n    return (\n      <div className=\"bg-muted rounded-lg p-6\">\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"w-12 h-12 flex items-center justify-center\">\n            <Loader2 className=\"w-6 h-6 animate-spin text-primary\" />\n          </div>\n          <div className=\"flex-1\">\n            <div className=\"h-5 bg-gray-300 rounded animate-pulse mb-2\"></div>\n            <div className=\"h-4 bg-gray-200 rounded animate-pulse w-3/4\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-muted rounded-lg p-6\">\n      <div className=\"flex flex-col items-center text-center space-y-4\">\n        <Avatar className=\"w-16 h-16 rounded-full\">\n          <AvatarFallback className=\"bg-primary text-primary-foreground text-xl font-bold rounded-full\">\n            {getFirstCharacter(user.name)}\n          </AvatarFallback>\n        </Avatar>\n        <div>\n          <h5 className=\"font-semibold text-foreground mb-2\">{user.name}</h5>\n          <p className=\"text-sm text-muted-foreground\">\n            {formatLoginTime(user.loginTime)}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":1763},"client/src/pages/forgot-password.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Link } from \"wouter\";\nimport { ArrowLeft, Mail, CheckCircle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function ForgotPassword() {\n  const [email, setEmail] = useState(\"\");\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!email.trim()) {\n      toast({\n        title: \"Email Required\",\n        description: \"Please enter your email address\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!email.includes(\"@\")) {\n      toast({\n        title: \"Invalid Email\",\n        description: \"Please enter a valid email address\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    \n    // Simulate API call\n    setTimeout(() => {\n      setIsLoading(false);\n      setIsSubmitted(true);\n      toast({\n        title: \"Reset Link Sent\",\n        description: \"Check your email for password reset instructions\",\n      });\n    }, 2000);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-orange-50 via-red-50 to-pink-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900\">\n      {/* Header with Logo */}\n      <div className=\"container mx-auto px-4 py-6\">\n        <div className=\"flex justify-between items-center\">\n          <Link href=\"/\">\n            <img src=\"/hw-logo.png\" alt=\"HubWale\" className=\"h-8 w-auto cursor-pointer\" loading=\"lazy\" />\n          </Link>\n          <Link href=\"/login\">\n            <Button variant=\"ghost\" className=\"flex items-center space-x-2\">\n              <ArrowLeft className=\"h-4 w-4\" />\n              <span>Back to Login</span>\n            </Button>\n          </Link>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex items-center justify-center px-4\">\n        <Card className=\"w-full max-w-md shadow-2xl border-0 bg-white/80 dark:bg-gray-800/80 backdrop-blur-md\">\n          <CardHeader className=\"space-y-4 text-center\">\n            <div className=\"mx-auto w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center\">\n              {isSubmitted ? (\n                <CheckCircle className=\"h-6 w-6 text-green-600\" />\n              ) : (\n                <Mail className=\"h-6 w-6 text-primary\" />\n              )}\n            </div>\n            <div>\n              <CardTitle className=\"text-2xl font-bold text-gray-900 dark:text-white font-inter tracking-tight\">\n                {isSubmitted ? \"Check Your Email\" : \"Forgot Password\"}\n              </CardTitle>\n              <CardDescription className=\"mt-2\">\n                {isSubmitted \n                  ? \"We've sent password reset instructions to your email address\"\n                  : \"Enter your email address and we'll send you a link to reset your password\"\n                }\n              </CardDescription>\n            </div>\n          </CardHeader>\n          \n          <CardContent>\n            {isSubmitted ? (\n              <div className=\"space-y-4\">\n                <div className=\"text-center space-y-4\">\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    Didn't receive the email? Check your spam folder or try again.\n                  </p>\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => {\n                      setIsSubmitted(false);\n                      setEmail(\"\");\n                    }}\n                    className=\"w-full\"\n                  >\n                    Try Different Email\n                  </Button>\n                </div>\n                <div className=\"text-center\">\n                  <Link href=\"/login\">\n                    <Button variant=\"ghost\" className=\"text-sm\">\n                      Back to Login\n                    </Button>\n                  </Link>\n                </div>\n              </div>\n            ) : (\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div className=\"relative\">\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    className=\"bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600 py-3 px-3\"\n                    disabled={isLoading}\n                  />\n                  <Label \n                    htmlFor=\"email\" \n                    className={`absolute left-3 pointer-events-none transition-all duration-200 ${\n                      email\n                        ? \"hidden\"\n                        : \"top-3 text-sm text-gray-500 dark:text-gray-400\"\n                    }`}\n                  >\n                    Enter your email address\n                  </Label>\n                </div>\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full py-3\" \n                  disabled={isLoading}\n                >\n                  {isLoading ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                      Sending Reset Link...\n                    </>\n                  ) : (\n                    \"Send Reset Link\"\n                  )}\n                </Button>\n\n                <div className=\"text-center\">\n                  <Link href=\"/login\">\n                    <Button variant=\"ghost\" className=\"text-sm\">\n                      Remember your password? Sign in\n                    </Button>\n                  </Link>\n                </div>\n              </form>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":6072},"client/src/pages/terms.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { ArrowLeft } from \"lucide-react\";\n\nexport default function Terms() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-orange-50 via-red-50 to-pink-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900\">\n      {/* Header with Logo */}\n      <div className=\"container mx-auto px-4 py-6\">\n        <div className=\"flex justify-between items-center\">\n          <Link href=\"/\">\n            <img src=\"/hw-logo.png\" alt=\"HubWale\" className=\"h-8 w-auto cursor-pointer\" loading=\"lazy\" />\n          </Link>\n          <Link href=\"/signup\">\n            <Button variant=\"ghost\" className=\"flex items-center space-x-2\">\n              <ArrowLeft className=\"h-4 w-4\" />\n              <span>Back to Signup</span>\n            </Button>\n          </Link>\n        </div>\n      </div>\n\n      {/* Terms Content */}\n      <div className=\"container mx-auto px-4 pb-12\">\n        <div className=\"max-w-4xl mx-auto\">\n          <Card className=\"shadow-2xl border-0 bg-white/80 dark:bg-gray-800/80 backdrop-blur-md\">\n            <CardHeader className=\"text-center space-y-4\">\n              <CardTitle className=\"text-3xl font-bold text-gray-900 dark:text-white font-inter tracking-tight\">\n                Terms and Conditions\n              </CardTitle>\n              <p className=\"text-gray-600 dark:text-gray-400\">\n                Last updated: {new Date().toLocaleDateString()}\n              </p>\n            </CardHeader>\n            \n            <CardContent className=\"space-y-6 text-gray-700 dark:text-gray-300\">\n              <section>\n                <h2 className=\"text-xl font-semibold mb-3 text-gray-900 dark:text-white\">1. Acceptance of Terms</h2>\n                <p>\n                  By accessing and using HubWale's WhatsApp bulk messaging platform, you accept and agree to be bound by the terms and provision of this agreement.\n                </p>\n              </section>\n\n              <section>\n                <h2 className=\"text-xl font-semibold mb-3 text-gray-900 dark:text-white\">2. Service Description</h2>\n                <p>\n                  HubWale provides a WhatsApp Web integration platform that allows users to send bulk messages, manage contacts, and organize messaging campaigns. Our service is built for legitimate business communication purposes.\n                </p>\n              </section>\n\n              <section>\n                <h2 className=\"text-xl font-semibold mb-3 text-gray-900 dark:text-white\">3. WhatsApp Compliance</h2>\n                <div className=\"space-y-2\">\n                  <p><strong>Important Notice:</strong> This service uses WhatsApp Web API, and users must comply with WhatsApp's Terms of Service:</p>\n                  <ul className=\"list-disc list-inside space-y-1 ml-4\">\n                    <li>Only send messages to users who have explicitly opted in</li>\n                    <li>Respect WhatsApp's anti-spam policies</li>\n                    <li>Do not use this service for unsolicited marketing</li>\n                    <li>Account suspension risk exists when using unofficial APIs</li>\n                  </ul>\n                </div>\n              </section>\n\n              <section>\n                <h2 className=\"text-xl font-semibold mb-3 text-gray-900 dark:text-white\">4. User Responsibilities</h2>\n                <ul className=\"list-disc list-inside space-y-1 ml-4\">\n                  <li>You are responsible for all content sent through our platform</li>\n                  <li>You must obtain proper consent before messaging recipients</li>\n                  <li>You agree not to use the service for illegal or harmful purposes</li>\n                  <li>You must protect your account credentials</li>\n                </ul>\n              </section>\n\n              <section>\n                <h2 className=\"text-xl font-semibold mb-3 text-gray-900 dark:text-white\">5. Privacy and Data Protection</h2>\n                <p>\n                  We respect your privacy and protect your data according to applicable data protection laws. Contact information and messages are stored securely and used only for service functionality.\n                </p>\n              </section>\n\n              <section>\n                <h2 className=\"text-xl font-semibold mb-3 text-gray-900 dark:text-white\">6. Service Availability</h2>\n                <p>\n                  While we strive for 100% uptime, we cannot guarantee uninterrupted service. WhatsApp Web connectivity depends on external factors beyond our control.\n                </p>\n              </section>\n\n              <section>\n                <h2 className=\"text-xl font-semibold mb-3 text-gray-900 dark:text-white\">7. Limitation of Liability</h2>\n                <p>\n                  HubWale shall not be liable for any direct, indirect, incidental, special, or consequential damages resulting from the use or inability to use our service.\n                </p>\n              </section>\n\n              <section>\n                <h2 className=\"text-xl font-semibold mb-3 text-gray-900 dark:text-white\">8. Account Termination</h2>\n                <p>\n                  We reserve the right to terminate accounts that violate these terms, engage in spam, or misuse our platform.\n                </p>\n              </section>\n\n              <section>\n                <h2 className=\"text-xl font-semibold mb-3 text-gray-900 dark:text-white\">9. Changes to Terms</h2>\n                <p>\n                  We may update these terms periodically. Continued use of the service after changes constitutes acceptance of the new terms.\n                </p>\n              </section>\n\n              <section>\n                <h2 className=\"text-xl font-semibold mb-3 text-gray-900 dark:text-white\">10. Contact Information</h2>\n                <p>\n                  If you have any questions about these Terms and Conditions, please contact us through our support channel.\n                </p>\n              </section>\n\n              <div className=\"mt-8 pt-6 border-t border-gray-200 dark:border-gray-700\">\n                <p className=\"text-sm text-gray-500 dark:text-gray-400 text-center\">\n                  By creating an account, you acknowledge that you have read, understood, and agree to these Terms and Conditions.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":6524},"client/src/pages/blogs.tsx":{"content":"import Navigation from \"@/components/ui/navigation\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { Calendar, Clock, ArrowRight, TrendingUp, Users, Zap } from \"lucide-react\";\n\nexport default function Blogs() {\n  const featuredPost = {\n    title: \"How HubWale Helped TechCorp Increase Customer Engagement by 300%\",\n    excerpt: \"Discover how one of our enterprise clients transformed their customer communication strategy using HubWale's advanced WhatsApp automation features.\",\n    category: \"Success Story\",\n    readTime: \"8 min read\",\n    date: \"December 15, 2024\",\n    image: \"https://images.unsplash.com/photo-1553028826-f4804a6dba3b?w=600&h=400&fit=crop&crop=center\",\n    featured: true\n  };\n\n  const blogPosts = [\n    {\n      title: \"The Future of WhatsApp Business: 2025 Trends and Predictions\",\n      excerpt: \"Explore the upcoming trends in WhatsApp business communication and how to prepare your strategy for the next year.\",\n      category: \"Future Plans\",\n      readTime: \"6 min read\",\n      date: \"December 10, 2024\",\n      image: \"https://images.unsplash.com/photo-1451187580459-43490279c0fa?w=400&h=250&fit=crop&crop=center\"\n    },\n    {\n      title: \"10 WhatsApp Marketing Strategies That Actually Work\",\n      excerpt: \"Learn proven strategies to boost your WhatsApp marketing campaigns and drive better engagement rates.\",\n      category: \"Marketing Tips\",\n      readTime: \"12 min read\",\n      date: \"December 5, 2024\",\n      image: \"https://images.unsplash.com/photo-1556761175-b413da4baf72?w=400&h=250&fit=crop&crop=center\"\n    },\n    {\n      title: \"From Startup to Scale: Our Journey Building HubWale\",\n      excerpt: \"The inside story of how we built HubWale from a simple idea to a comprehensive WhatsApp automation platform.\",\n      category: \"Company Story\",\n      readTime: \"10 min read\",\n      date: \"November 28, 2024\",\n      image: \"https://images.unsplash.com/photo-1559136555-9303baea8ebd?w=400&h=250&fit=crop&crop=center\"\n    },\n    {\n      title: \"Customer Success: E-commerce Store Boosts Sales by 250%\",\n      excerpt: \"How an online retailer used HubWale's automation features to create personalized shopping experiences through WhatsApp.\",\n      category: \"Success Story\",\n      readTime: \"7 min read\",\n      date: \"November 20, 2024\",\n      image: \"https://images.unsplash.com/photo-1556742049-0cfed4f6a45d?w=400&h=250&fit=crop&crop=center\"\n    },\n    {\n      title: \"Security First: How We Protect Your WhatsApp Data\",\n      excerpt: \"An in-depth look at our security measures and commitment to protecting your business communications.\",\n      category: \"Technology\",\n      readTime: \"9 min read\",\n      date: \"November 15, 2024\",\n      image: \"https://images.unsplash.com/photo-1563013544-824ae1b704d3?w=400&h=250&fit=crop&crop=center\"\n    },\n    {\n      title: \"Roadmap 2025: Exciting New Features Coming to HubWale\",\n      excerpt: \"Get a sneak peek at the innovative features and improvements we're planning for the next year.\",\n      category: \"Future Plans\",\n      readTime: \"5 min read\",\n      date: \"November 10, 2024\",\n      image: \"https://images.unsplash.com/photo-1517077304055-6e89abbf09b0?w=400&h=250&fit=crop&crop=center\"\n    }\n  ];\n\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case \"Success Story\":\n        return TrendingUp;\n      case \"Future Plans\":\n        return Zap;\n      case \"Marketing Tips\":\n        return Users;\n      default:\n        return Calendar;\n    }\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case \"Success Story\":\n        return \"bg-green-100 text-green-700 dark:bg-green-900/20 dark:text-green-400\";\n      case \"Future Plans\":\n        return \"bg-purple-100 text-purple-700 dark:bg-purple-900/20 dark:text-purple-400\";\n      case \"Marketing Tips\":\n        return \"bg-blue-100 text-blue-700 dark:bg-blue-900/20 dark:text-blue-400\";\n      default:\n        return \"bg-gray-100 text-gray-700 dark:bg-gray-900/20 dark:text-gray-400\";\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-orange-50 via-red-50 to-pink-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900\">\n      <Navigation currentPage=\"blogs\" />\n      \n      {/* Hero Section */}\n      <section className=\"pt-32 pb-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <Badge variant=\"secondary\" className=\"bg-orange-100 text-orange-700 dark:bg-orange-900/20 dark:text-orange-400 mb-4\">\n            Our Blog\n          </Badge>\n          <h1 className=\"text-4xl lg:text-5xl font-bold text-gray-900 dark:text-white mb-6\">\n            Stories, Tips, and Insights from\n            <span className=\"text-orange-600 dark:text-orange-400\"> HubWale</span>\n          </h1>\n          <p className=\"text-xl text-gray-600 dark:text-gray-300 max-w-3xl mx-auto mb-8\">\n            Stay updated with the latest trends in WhatsApp marketing, success stories from our customers, \n            and insights into the future of business communication.\n          </p>\n        </div>\n      </section>\n\n      {/* Featured Post */}\n      <section className=\"pb-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <Card className=\"bg-white/80 dark:bg-gray-800/80 backdrop-blur-md border-0 shadow-xl overflow-hidden\">\n            <div className=\"grid lg:grid-cols-2 gap-0\">\n              <div className=\"aspect-video lg:aspect-auto\">\n                <img \n                  src={featuredPost.image} \n                  alt={featuredPost.title}\n                  className=\"w-full h-full object-cover\"\n                />\n              </div>\n              <div className=\"p-8 lg:p-12 flex flex-col justify-center\">\n                <div className=\"flex items-center space-x-4 mb-4\">\n                  <Badge className={getCategoryColor(featuredPost.category)}>\n                    {featuredPost.category}\n                  </Badge>\n                  <Badge variant=\"outline\">Featured</Badge>\n                </div>\n                <h2 className=\"text-2xl lg:text-3xl font-bold text-gray-900 dark:text-white mb-4 leading-tight\">\n                  {featuredPost.title}\n                </h2>\n                <p className=\"text-gray-600 dark:text-gray-300 mb-6 leading-relaxed\">\n                  {featuredPost.excerpt}\n                </p>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400\">\n                    <div className=\"flex items-center space-x-1\">\n                      <Calendar size={14} />\n                      <span>{featuredPost.date}</span>\n                    </div>\n                    <div className=\"flex items-center space-x-1\">\n                      <Clock size={14} />\n                      <span>{featuredPost.readTime}</span>\n                    </div>\n                  </div>\n                  <Button className=\"bg-orange-600 hover:bg-orange-700 text-white\">\n                    Read More <ArrowRight size={16} className=\"ml-2\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </Card>\n        </div>\n      </section>\n\n      {/* Blog Grid */}\n      <section className=\"pb-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-3xl font-bold text-gray-900 dark:text-white text-center mb-12\">\n            Latest Articles\n          </h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {blogPosts.map((post, index) => {\n              const IconComponent = getCategoryIcon(post.category);\n              return (\n                <Card key={index} className=\"bg-white/80 dark:bg-gray-800/80 backdrop-blur-md border-0 shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105 overflow-hidden\">\n                  <div className=\"aspect-video overflow-hidden\">\n                    <img \n                      src={post.image} \n                      alt={post.title}\n                      className=\"w-full h-full object-cover hover:scale-110 transition-transform duration-300\"\n                    />\n                  </div>\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-center space-x-2 mb-3\">\n                      <Badge className={getCategoryColor(post.category)}>\n                        <IconComponent size={12} className=\"mr-1\" />\n                        {post.category}\n                      </Badge>\n                    </div>\n                    <CardTitle className=\"text-lg font-semibold text-gray-900 dark:text-white leading-tight\">\n                      {post.title}\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"pt-0\">\n                    <CardDescription className=\"text-gray-600 dark:text-gray-300 mb-4 leading-relaxed\">\n                      {post.excerpt}\n                    </CardDescription>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-3 text-xs text-gray-500 dark:text-gray-400\">\n                        <div className=\"flex items-center space-x-1\">\n                          <Calendar size={12} />\n                          <span>{post.date}</span>\n                        </div>\n                        <div className=\"flex items-center space-x-1\">\n                          <Clock size={12} />\n                          <span>{post.readTime}</span>\n                        </div>\n                      </div>\n                      <Button variant=\"ghost\" size=\"sm\" className=\"text-orange-600 hover:text-orange-700 p-0\">\n                        Read <ArrowRight size={14} className=\"ml-1\" />\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* Newsletter Section */}\n      <section className=\"py-16 bg-white/50 dark:bg-gray-800/50 backdrop-blur-sm\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-4\">\n            Stay Updated with HubWale\n          </h2>\n          <p className=\"text-lg text-gray-600 dark:text-gray-300 mb-8\">\n            Get the latest insights, tips, and updates delivered straight to your inbox.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center max-w-md mx-auto\">\n            <input \n              type=\"email\" \n              placeholder=\"Enter your email\"\n              className=\"flex-1 px-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\n            />\n            <Button className=\"bg-orange-600 hover:bg-orange-700 text-white px-6\">\n              Subscribe\n            </Button>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":11235},"client/src/pages/features.tsx":{"content":"import Navigation from \"@/components/ui/navigation\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { \n  MessageSquare, \n  Users, \n  BarChart3, \n  Shield, \n  Zap, \n  Clock,\n  Target,\n  Globe,\n  Smartphone,\n  Database,\n  Settings,\n  HeadphonesIcon\n} from \"lucide-react\";\n\nexport default function Features() {\n  const features = [\n    {\n      icon: MessageSquare,\n      title: \"Bulk WhatsApp Messaging\",\n      description: \"Send personalized messages to thousands of contacts instantly with our advanced bulk messaging system.\",\n      color: \"text-blue-600\"\n    },\n    {\n      icon: Users,\n      title: \"Contact Management\",\n      description: \"Organize and manage your contacts with smart grouping, tagging, and filtering capabilities.\",\n      color: \"text-green-600\"\n    },\n    {\n      icon: BarChart3,\n      title: \"Analytics & Reporting\",\n      description: \"Track message delivery rates, engagement metrics, and campaign performance with detailed analytics.\",\n      color: \"text-purple-600\"\n    },\n    {\n      icon: Shield,\n      title: \"Privacy & Security\",\n      description: \"Enterprise-grade security with end-to-end encryption and compliance with data protection regulations.\",\n      color: \"text-red-600\"\n    },\n    {\n      icon: Zap,\n      title: \"Automation\",\n      description: \"Set up automated workflows, scheduled messages, and smart responses to save time and effort.\",\n      color: \"text-yellow-600\"\n    },\n    {\n      icon: Clock,\n      title: \"Schedule Messages\",\n      description: \"Plan and schedule your messages for optimal timing across different time zones.\",\n      color: \"text-indigo-600\"\n    },\n    {\n      icon: Target,\n      title: \"Targeted Campaigns\",\n      description: \"Create targeted marketing campaigns with advanced segmentation and personalization options.\",\n      color: \"text-pink-600\"\n    },\n    {\n      icon: Globe,\n      title: \"Multi-Language Support\",\n      description: \"Communicate with your global audience using our built-in translation and localization features.\",\n      color: \"text-orange-600\"\n    },\n    {\n      icon: Smartphone,\n      title: \"Mobile Optimized\",\n      description: \"Access all features seamlessly across desktop, tablet, and mobile devices with our responsive design.\",\n      color: \"text-teal-600\"\n    },\n    {\n      icon: Database,\n      title: \"Data Import/Export\",\n      description: \"Easily import contacts from CSV, Excel, or integrate with your existing CRM systems.\",\n      color: \"text-cyan-600\"\n    },\n    {\n      icon: Settings,\n      title: \"Custom Integrations\",\n      description: \"Connect with your favorite tools and platforms through our robust API and webhook system.\",\n      color: \"text-gray-600\"\n    },\n    {\n      icon: HeadphonesIcon,\n      title: \"24/7 Support\",\n      description: \"Get expert help whenever you need it with our dedicated customer support team.\",\n      color: \"text-emerald-600\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-orange-50 via-red-50 to-pink-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900\">\n      <Navigation currentPage=\"features\" />\n      \n      {/* Hero Section */}\n      <section className=\"pt-32 pb-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-700 dark:bg-blue-900/20 dark:text-blue-400 mb-4\">\n            Powerful Features\n          </Badge>\n          <h1 className=\"text-4xl lg:text-5xl font-bold text-gray-900 dark:text-white mb-6\">\n            Everything You Need for\n            <span className=\"text-blue-600 dark:text-blue-400\"> WhatsApp Marketing</span>\n          </h1>\n          <p className=\"text-xl text-gray-600 dark:text-gray-300 max-w-3xl mx-auto mb-8\">\n            Discover the comprehensive suite of tools and features that make HubWale the ultimate \n            WhatsApp automation platform for businesses of all sizes.\n          </p>\n        </div>\n      </section>\n\n      {/* Features Grid */}\n      <section className=\"pb-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {features.map((feature, index) => {\n              const IconComponent = feature.icon;\n              return (\n                <Card key={index} className=\"bg-white/80 dark:bg-gray-800/80 backdrop-blur-md border-0 shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105\">\n                  <CardHeader>\n                    <div className=\"flex items-center space-x-3\">\n                      <div className={`p-2 rounded-lg bg-gray-100 dark:bg-gray-700 ${feature.color}`}>\n                        <IconComponent size={24} />\n                      </div>\n                      <CardTitle className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                        {feature.title}\n                      </CardTitle>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <CardDescription className=\"text-gray-600 dark:text-gray-300 leading-relaxed\">\n                      {feature.description}\n                    </CardDescription>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16 bg-white/50 dark:bg-gray-800/50 backdrop-blur-sm\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-4\">\n            Ready to Transform Your WhatsApp Marketing?\n          </h2>\n          <p className=\"text-lg text-gray-600 dark:text-gray-300 mb-8\">\n            Join thousands of businesses who trust HubWale for their WhatsApp automation needs.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Link href=\"/signup\">\n              <Button size=\"lg\" className=\"bg-blue-600 hover:bg-blue-700 text-white px-8 py-3\">\n                Get Started Free\n              </Button>\n            </Link>\n            <Link href=\"/pricing\">\n              <Button size=\"lg\" variant=\"outline\" className=\"border-gray-300 dark:border-gray-600 px-8 py-3\">\n                View Pricing\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":6608},"client/src/pages/pricing.tsx":{"content":"import { useState } from \"react\";\nimport Navigation from \"@/components/ui/navigation\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { Link } from \"wouter\";\nimport { Check, Star, Zap, Crown } from \"lucide-react\";\n\nexport default function Pricing() {\n  const [isYearly, setIsYearly] = useState(false);\n\n  const plans = [\n    {\n      name: \"Free\",\n      description: \"Perfect for getting started\",\n      icon: Zap,\n      color: \"text-green-600\",\n      price: { monthly: 0, yearly: 0 },\n      features: [\n        \"Up to 100 messages per month\",\n        \"Basic contact management\",\n        \"Simple message templates\",\n        \"Email support\",\n        \"Basic analytics\"\n      ],\n      limitations: [\n        \"Limited to 50 contacts\",\n        \"No automation features\",\n        \"Basic reporting only\"\n      ],\n      buttonText: \"Get Started Free\",\n      buttonVariant: \"outline\" as const,\n      popular: false\n    },\n    {\n      name: \"Pro\",\n      description: \"For growing businesses\",\n      icon: Star,\n      color: \"text-blue-600\",\n      price: { monthly: 29, yearly: 290 },\n      features: [\n        \"Up to 10,000 messages per month\",\n        \"Advanced contact management\",\n        \"Custom message templates\",\n        \"Scheduled messaging\",\n        \"Advanced analytics & reporting\",\n        \"API access\",\n        \"Priority email support\",\n        \"Message automation\"\n      ],\n      limitations: [\n        \"Up to 5,000 contacts\",\n        \"Limited integrations\"\n      ],\n      buttonText: \"Start Pro Trial\",\n      buttonVariant: \"default\" as const,\n      popular: true\n    },\n    {\n      name: \"Team\",\n      description: \"For large organizations\",\n      icon: Crown,\n      color: \"text-purple-600\",\n      price: { monthly: 99, yearly: 990 },\n      features: [\n        \"Unlimited messages\",\n        \"Unlimited contacts\",\n        \"Team collaboration tools\",\n        \"Advanced automation workflows\",\n        \"Custom integrations\",\n        \"Dedicated account manager\",\n        \"24/7 phone & chat support\",\n        \"Advanced security features\",\n        \"Custom branding\",\n        \"Priority feature requests\"\n      ],\n      limitations: [],\n      buttonText: \"Contact Sales\",\n      buttonVariant: \"default\" as const,\n      popular: false\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-orange-50 via-red-50 to-pink-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900\">\n      <Navigation currentPage=\"pricing\" />\n      \n      {/* Hero Section */}\n      <section className=\"pt-32 pb-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <Badge variant=\"secondary\" className=\"bg-purple-100 text-purple-700 dark:bg-purple-900/20 dark:text-purple-400 mb-4\">\n            Simple Pricing\n          </Badge>\n          <h1 className=\"text-4xl lg:text-5xl font-bold text-gray-900 dark:text-white mb-6\">\n            Choose the Perfect Plan for\n            <span className=\"text-purple-600 dark:text-purple-400\"> Your Business</span>\n          </h1>\n          <p className=\"text-xl text-gray-600 dark:text-gray-300 max-w-3xl mx-auto mb-8\">\n            Scale your WhatsApp marketing with confidence. No hidden fees, no surprises - \n            just transparent pricing that grows with your business.\n          </p>\n\n          {/* Billing Toggle */}\n          <div className=\"flex items-center justify-center space-x-4 mb-12\">\n            <Label htmlFor=\"billing-toggle\" className=\"text-gray-600 dark:text-gray-300\">\n              Monthly\n            </Label>\n            <Switch\n              id=\"billing-toggle\"\n              checked={isYearly}\n              onCheckedChange={setIsYearly}\n            />\n            <Label htmlFor=\"billing-toggle\" className=\"text-gray-600 dark:text-gray-300\">\n              Yearly\n            </Label>\n            <Badge variant=\"secondary\" className=\"bg-green-100 text-green-700 dark:bg-green-900/20 dark:text-green-400 ml-2\">\n              Save 17%\n            </Badge>\n          </div>\n        </div>\n      </section>\n\n      {/* Pricing Cards */}\n      <section className=\"pb-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {plans.map((plan, index) => {\n              const IconComponent = plan.icon;\n              const price = isYearly ? plan.price.yearly : plan.price.monthly;\n              const priceDisplay = price === 0 ? \"Free\" : `$${price}`;\n              const billingPeriod = isYearly ? \"/year\" : \"/month\";\n              \n              return (\n                <Card \n                  key={index} \n                  className={`relative bg-white/80 dark:bg-gray-800/80 backdrop-blur-md border-0 shadow-lg hover:shadow-xl transition-all duration-300 ${\n                    plan.popular ? 'scale-105 ring-2 ring-blue-500 ring-opacity-50' : 'hover:scale-105'\n                  }`}\n                >\n                  {plan.popular && (\n                    <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n                      <Badge className=\"bg-blue-600 text-white px-4 py-1\">\n                        Most Popular\n                      </Badge>\n                    </div>\n                  )}\n                  \n                  <CardHeader className=\"text-center pb-4\">\n                    <div className=\"flex items-center justify-center mb-4\">\n                      <div className={`p-3 rounded-lg bg-gray-100 dark:bg-gray-700 ${plan.color}`}>\n                        <IconComponent size={32} />\n                      </div>\n                    </div>\n                    <CardTitle className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                      {plan.name}\n                    </CardTitle>\n                    <CardDescription className=\"text-gray-600 dark:text-gray-300\">\n                      {plan.description}\n                    </CardDescription>\n                    <div className=\"mt-4\">\n                      <span className=\"text-4xl font-bold text-gray-900 dark:text-white\">\n                        {priceDisplay}\n                      </span>\n                      {price > 0 && (\n                        <span className=\"text-gray-600 dark:text-gray-300 text-lg\">\n                          {billingPeriod}\n                        </span>\n                      )}\n                    </div>\n                  </CardHeader>\n                  \n                  <CardContent className=\"space-y-6\">\n                    <div className=\"space-y-3\">\n                      {plan.features.map((feature, featureIndex) => (\n                        <div key={featureIndex} className=\"flex items-start space-x-3\">\n                          <Check className=\"text-green-600 dark:text-green-400 w-5 h-5 mt-0.5 flex-shrink-0\" />\n                          <span className=\"text-gray-600 dark:text-gray-300 text-sm\">\n                            {feature}\n                          </span>\n                        </div>\n                      ))}\n                    </div>\n                    \n                    <div className=\"pt-6\">\n                      {plan.name === \"Team\" ? (\n                        <Button \n                          variant={plan.buttonVariant}\n                          className={`w-full ${plan.popular ? 'bg-blue-600 hover:bg-blue-700 text-white' : ''}`}\n                        >\n                          {plan.buttonText}\n                        </Button>\n                      ) : (\n                        <Link href=\"/signup\">\n                          <Button \n                            variant={plan.buttonVariant}\n                            className={`w-full ${plan.popular ? 'bg-blue-600 hover:bg-blue-700 text-white' : ''}`}\n                          >\n                            {plan.buttonText}\n                          </Button>\n                        </Link>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* FAQ Section */}\n      <section className=\"py-16 bg-white/50 dark:bg-gray-800/50 backdrop-blur-sm\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-3xl font-bold text-gray-900 dark:text-white text-center mb-12\">\n            Frequently Asked Questions\n          </h2>\n          <div className=\"space-y-8\">\n            <div>\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">\n                Can I change my plan anytime?\n              </h3>\n              <p className=\"text-gray-600 dark:text-gray-300\">\n                Yes, you can upgrade or downgrade your plan at any time. Changes will be reflected in your next billing cycle.\n              </p>\n            </div>\n            <div>\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">\n                Is there a free trial for paid plans?\n              </h3>\n              <p className=\"text-gray-600 dark:text-gray-300\">\n                Yes, we offer a 14-day free trial for our Pro plan. No credit card required to start your trial.\n              </p>\n            </div>\n            <div>\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">\n                What happens if I exceed my message limit?\n              </h3>\n              <p className=\"text-gray-600 dark:text-gray-300\">\n                If you exceed your monthly message limit, you can purchase additional message credits or upgrade to a higher plan.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":9936},"client/src/components/ui/navigation.tsx":{"content":"import React from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface NavigationProps {\n  showAuthButtons?: boolean;\n  currentPage?: 'home' | 'login' | 'signup' | 'features' | 'pricing' | 'blogs';\n}\n\nconst Navigation: React.FC<NavigationProps> = ({ showAuthButtons = true, currentPage }) => {\n  const [location] = useLocation();\n\n  const isCurrentPage = (page: string) => {\n    if (currentPage) return currentPage === page;\n    return location === `/${page}` || (page === 'home' && location === '/');\n  };\n\n  const linkClass = (page: string) => {\n    return isCurrentPage(page) \n      ? \"text-gray-400 dark:text-gray-500 cursor-not-allowed transition-colors\"\n      : \"text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white transition-colors cursor-pointer\";\n  };\n\n  const NavLink = ({ href, page, children }: { href: string; page: string; children: React.ReactNode }) => {\n    if (isCurrentPage(page)) {\n      return <span className={linkClass(page)}>{children}</span>;\n    }\n    return <Link href={href} className={linkClass(page)}>{children}</Link>;\n  };\n\n  return (\n    <nav className=\"fixed top-0 left-0 right-0 z-50 bg-white/80 dark:bg-gray-900/80 backdrop-blur-md border-b border-gray-200 dark:border-gray-700\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo */}\n          <div className=\"flex items-center space-x-2\">\n            <Link href=\"/\">\n              <img src=\"/hw-logo.png\" alt=\"HubWale\" className=\"h-8 w-auto cursor-pointer\" loading=\"lazy\" />\n            </Link>\n          </div>\n          \n          {/* Navigation Links */}\n          <div className=\"hidden md:flex items-center space-x-8\">\n            <NavLink href=\"/\" page=\"home\">Home</NavLink>\n            <NavLink href=\"/features\" page=\"features\">Features</NavLink>\n            <NavLink href=\"/pricing\" page=\"pricing\">Pricing</NavLink>\n            <NavLink href=\"/blogs\" page=\"blogs\">Blogs</NavLink>\n          </div>\n          \n          {/* Auth Buttons */}\n          {showAuthButtons && (\n            <div className=\"flex items-center space-x-4\">\n              {isCurrentPage('login') ? (\n                <Button \n                  variant=\"ghost\" \n                  className=\"text-gray-400 dark:text-gray-500 cursor-not-allowed\"\n                  disabled\n                >\n                  Login\n                </Button>\n              ) : (\n                <Link href=\"/login\">\n                  <Button variant=\"ghost\" className=\"text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white\">\n                    Login\n                  </Button>\n                </Link>\n              )}\n              \n              {isCurrentPage('signup') ? (\n                <Button \n                  className=\"bg-gray-400 hover:bg-gray-400 text-white shadow-lg cursor-not-allowed\"\n                  disabled\n                >\n                  Sign up\n                </Button>\n              ) : (\n                <Link href=\"/signup\">\n                  <Button className=\"bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white shadow-lg\">\n                    Sign up\n                  </Button>\n                </Link>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nexport default Navigation;","size_bytes":3449},".local/state/replit/agent/progress_tracker.md":{"content":"[x] 1. Install the required packages\n[x] 2. Restart the workflow to see if the project is working\n[x] 3. Verify the project is working using the feedback tool\n[x] 4. Fixed campaign creation validation issues and method call errors","size_bytes":230},"server/services/whatsapp_broken.ts":{"content":"import pkg from 'whatsapp-web.js';\nconst { Client, LocalAuth, MessageMedia } = pkg as any;\nimport QRCode from 'qrcode';\nimport qrImage from 'qr-image';\nimport { storage } from '../storage';\nimport fs from 'fs';\nimport path from 'path';\nimport type { WebSocket } from 'ws';\n\nexport class WhatsAppService {\n  private client: any = null;\n  private qrCode: string | null = null;\n  private sessionInfo: any = null;\n  private isReady: boolean = false;\n  private isInitializing: boolean = false;\n  private messageCache: Map<string, any[]> = new Map(); // Cache for real-time messages\n\n  constructor() {\n    this.initializeClient();\n  }\n\n  // Helper method to broadcast WebSocket events\n  private broadcastToClients(eventType: string, data: any) {\n    try {\n      const wss = (global as any).wss;\n      if (wss && wss.clients) {\n        const message = JSON.stringify({ type: eventType, data });\n        wss.clients.forEach((client: any) => {\n          if (client.readyState === 1) { // WebSocket.OPEN\n            client.send(message);\n          }\n        });\n        console.log(`📡 Broadcasted ${eventType} to ${wss.clients.size} clients`);\n      }\n    } catch (error) {\n      console.error('Failed to broadcast WebSocket message:', error);\n    }\n  }\n\n  private async initializeClient() {\n    if (this.isInitializing) {\n      console.log('Client already initializing, skipping...');\n      return;\n    }\n\n    try {\n      this.isInitializing = true;\n      console.log('🚀 Initializing WhatsApp client...');\n\n      // Clean up existing client\n      if (this.client) {\n        try {\n          await this.client.destroy();\n        } catch (e: any) {\n          console.log('Old client cleanup (expected):', e.message);\n        }\n        this.client = null;\n      }\n\n      // Reset all state\n      this.qrCode = null;\n      this.sessionInfo = null;\n      this.isReady = false;\n      this.messageCache.clear(); // Clear message cache on reinitialize\n\n      // Use full puppeteer with proper configuration to fix execution context issues\n      this.client = new Client({\n        authStrategy: new LocalAuth({\n          clientId: \"main_session\", // Persistent session ID for session preservation\n          dataPath: \"./.wwebjs_auth\" // Explicit data path\n        }),\n        puppeteer: {\n          headless: true, // Must be headless in cloud environment\n          slowMo: 100, // Slow down operations for stability\n          executablePath: '/nix/store/qa9cnw4v5xkxyip6mb9kxqfq1z4x2dx1-chromium-138.0.7204.100/bin/chromium',\n          args: [\n            '--no-sandbox',\n            '--disable-setuid-sandbox',\n            '--disable-dev-shm-usage',\n            '--disable-accelerated-2d-canvas',\n            '--no-first-run',\n            '--no-zygote',\n            '--disable-gpu',\n            '--disable-web-security',\n            '--disable-features=VizDisplayCompositor',\n            '--disable-background-timer-throttling',\n            '--disable-backgrounding-occluded-windows',\n            '--disable-renderer-backgrounding',\n            '--disable-blink-features=AutomationControlled',\n            '--disable-extensions',\n            '--disable-ipc-flooding-protection',\n            `--user-data-dir=/tmp/chrome-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n            '--disable-session-crashed-bubble',\n            '--disable-infobars',\n            '--force-no-sandbox',\n            '--remote-debugging-port=0'\n          ],\n        },\n      });\n\n      this.setupEventHandlers();\n      \n      console.log('✅ Starting client initialization...');\n      await this.client.initialize();\n    } catch (error) {\n      console.error('❌ Failed to initialize WhatsApp client:', error);\n      this.isInitializing = false;\n      this.client = null;\n      \n      console.log('Browser failed to initialize - QR will be available when browser starts');\n      \n      // Retry initialization after delay\n      setTimeout(() => {\n        console.log('🔄 Retrying client initialization...');\n        this.initializeClient();\n      }, 3000);\n    }\n  }\n\n  private setupEventHandlers() {\n    if (!this.client) return;\n\n    this.client.on('qr', async (qrString: string) => {\n      console.log('📱 New QR Code received from WhatsApp Web');\n      console.log('🔍 QR String type:', typeof qrString);\n      console.log('🔍 QR String length:', qrString.length);\n      console.log('🔍 QR String preview:', qrString.substring(0, 100) + '...');\n      \n      // Check if qrString is already a base64 data URL (WhatsApp Web sometimes provides this)\n      if (qrString.startsWith('data:image/')) {\n        console.log('✅ QR Code already in base64 format from WhatsApp Web');\n        this.qrCode = qrString;\n        this.broadcastToClients('qr', { qr: this.qrCode });\n      } else {\n        // Try to generate QR code from the string\n        try {\n          // Use qr-image library directly since it handles large data better\n          const qrBuffer = qrImage.imageSync(qrString, { \n            type: 'png', \n            size: 20, // Larger size for better scanning\n            margin: 2,\n            ec_level: 'L' // Low error correction for maximum data capacity\n          });\n          this.qrCode = `data:image/png;base64,${qrBuffer.toString('base64')}`;\n          console.log('✅ QR Code generated successfully with qr-image');\n          this.broadcastToClients('qr', { qr: this.qrCode });\n        } catch (err) {\n          console.error('QR image generation failed:', err);\n          // Last resort: store the raw string and let client handle it\n          this.qrCode = qrString;\n          this.broadcastToClients('qr', { qr: null, rawQr: qrString });\n        }\n      }\n      this.sessionInfo = null;\n    });\n\n    this.client.on('ready', async () => {\n      console.log('WhatsApp client is ready');\n      this.isReady = true;\n      this.isInitializing = false;\n      this.qrCode = null;\n      \n      // Broadcast session connected event\n      this.broadcastToClients('connected', { connected: true });\n      \n      // Multiple attempts to get user info with different delays\n      const getUserInfo = async (attempt = 1) => {\n        try {\n          if (this.client && this.client.info) {\n            const info = this.client.info;\n            const userName = info.pushname || info.wid?.user || \"Unknown User\";\n            \n            this.sessionInfo = {\n              name: userName,\n              loginTime: this.sessionInfo?.loginTime || new Date().toISOString(),\n              isFirstConnection: false // Existing session, not first connection\n            };\n            \n            await storage.clearAllSessions();\n            await storage.createSession({\n              userId: info.wid?.user || 'unknown',\n              userName: userName,\n              loginTime: new Date(),\n              sessionData: JSON.stringify({ wid: info.wid }),\n            });\n            console.log('✅ Session saved for user:', userName);\n            this.qrCode = null;\n            return;\n          }\n          \n          // Fallback to use session-based name\n          const userName = \"Connected User\";\n          this.sessionInfo = {\n            name: userName,\n            loginTime: this.sessionInfo?.loginTime || new Date().toISOString(),\n            isFirstConnection: false // Existing session, not first connection\n          };\n          \n          await storage.clearAllSessions();\n          await storage.createSession({\n            userId: 'fallback-user',\n            userName: userName,\n            loginTime: new Date(),\n            sessionData: JSON.stringify({ fallback: true }),\n          });\n          console.log('✅ Session saved for user:', userName);\n          this.qrCode = null;\n        } catch (error: any) {\n          console.error(`⚠️ Attempt ${attempt} - Error loading user info:`, error.message);\n          \n          // Retry with increasing delays, max 3 attempts\n          if (attempt < 3) {\n            setTimeout(() => getUserInfo(attempt + 1), attempt * 2000);\n          } else {\n            // Fallback to authenticated user without detailed info\n            this.sessionInfo = {\n              name: \"WhatsApp User\",\n              loginTime: this.sessionInfo?.loginTime || new Date().toISOString(),\n              isFirstConnection: false // Fallback session, not first connection\n            };\n            console.log('Using fallback user info');\n          }\n        }\n      };\n      \n      // Start first attempt after 2 seconds\n      setTimeout(() => getUserInfo(1), 2000);\n    });\n\n    this.client.on('authenticated', () => {\n      console.log('WhatsApp client authenticated');\n      this.qrCode = null;\n      this.sessionInfo = {\n        name: \"Fetching...\",\n        loginTime: new Date().toISOString(),\n        isFirstConnection: true // Mark as first connection for auto-redirect\n      };\n    });\n\n    this.client.on('auth_failure', (msg: any) => {\n      console.error('WhatsApp authentication failed:', msg);\n      this.qrCode = null;\n      this.isReady = false;\n    });\n\n    this.client.on('disconnected', (reason: any) => {\n      console.log('🔌 Client disconnected:', reason);\n      this.isReady = false;\n      this.qrCode = null;\n      this.sessionInfo = null;\n      this.messageCache.clear(); // Clear cached messages on disconnect\n      storage.clearAllSessions();\n      \n      // Broadcast disconnection event\n      this.broadcastToClients('disconnected', { connected: false });\n      \n      // Reinitialize client on disconnect with delay\n      setTimeout(() => {\n        this.initializeClient();\n      }, 2000);\n    });\n\n    // Listen for incoming messages in real-time\n    this.client.on('message', async (message: any) => {\n      try {\n        console.log('📥 New message received:', {\n          from: message.from,\n          body: message.body || '[Media]',\n          timestamp: message.timestamp,\n          fromMe: message.fromMe\n        });\n        \n        // Store the message in memory for immediate retrieval\n        await this.storeRealtimeMessage(message);\n      } catch (error: any) {\n        console.error('Error handling incoming message:', error.message);\n      }\n    });\n\n    // Listen for message acks (delivered, read, etc.)\n    this.client.on('message_ack', (msg: any, ack: any) => {\n      console.log('📧 Message ACK received:', {\n        messageId: msg.id?._serialized,\n        ack: ack // 1: sent, 2: received, 3: read, 4: played\n      });\n    });\n\n    // Listen for group join events\n    this.client.on('group_join', (notification: any) => {\n      console.log('👥 Group join event:', notification);\n    });\n\n    // Listen for group leave events  \n    this.client.on('group_leave', (notification: any) => {\n      console.log('👋 Group leave event:', notification);\n    });\n\n    // Listen for remote session logout (when user logs out from phone)\n    this.client.on('remote_session_saved', () => {\n      console.log('📱 Remote session saved');\n    });\n\n    // Listen for logout events from phone\n    this.client.on('logout', () => {\n      console.log('📱 Logout detected from phone');\n      this.handleLogout();\n    });\n\n    // Listen for authentication failure (also triggered by logout from phone)\n    this.client.on('auth_failure', (message: any) => {\n      console.log('🔐 Authentication failure:', message);\n      if (message === 'LOGOUT') {\n        this.handleLogout();\n      }\n    });\n  }\n\n  // Handle logout from phone or authentication failure\n  private handleLogout() {\n    console.log('🔥 Handling logout event...');\n    \n    // Clear all session data\n    this.sessionInfo = null;\n    this.qrCode = null;\n    this.isReady = false;\n    this.messageCache.clear();\n    \n    // Clear storage\n    storage.clearAllSessions();\n    \n    // Broadcast logout event to all connected clients\n    this.broadcastToClients('logout', { \n      reason: 'Phone disconnected or user logged out',\n      timestamp: new Date().toISOString()\n    });\n    \n    // Re-initialize client to generate new QR code\n    setTimeout(() => {\n      console.log('🔄 Re-initializing client after logout...');\n      this.initializeClient();\n    }, 1000);\n  }\n\n  async getQRCode(): Promise<string | null> {\n    // Simply return the current QR code without forcing refresh\n    return this.qrCode;\n  }\n\n  async forceRefreshQR(): Promise<void> {\n    console.log('🔄 Force refreshing QR code by reinitializing client...');\n    \n    // Always reset state to force fresh initialization\n    this.isInitializing = false;\n    this.isReady = false;\n    this.sessionInfo = null;\n    this.qrCode = null;\n    \n    if (this.client) {\n      try {\n        await this.client.destroy();\n      } catch (e: any) {\n        console.log('Client cleanup during force refresh:', e?.message);\n      }\n    }\n    this.client = null;\n    \n    // Force re-initialization regardless of current state\n    await this.initializeClient();\n  }\n\n  async getSessionInfo() {\n    if (this.sessionInfo) {\n      return this.sessionInfo;\n    } else {\n      return null;\n    }\n  }\n\n\n\n  async logout(): Promise<void> {\n    try {\n      console.log('🔌 Starting logout process...');\n      \n      // Clear session info first\n      this.sessionInfo = null;\n      this.qrCode = null;\n      this.isReady = false;\n      this.isInitializing = false;\n      this.messageCache.clear(); // Clear cached messages on logout\n      \n      // Clear storage\n      await storage.clearAllSessions();\n      \n      // Properly destroy client and logout from WhatsApp Web\n      if (this.client) {\n        try {\n          console.log('🧹 Logging out from WhatsApp Web and disconnecting phone...');\n          \n          // Method 1: Try UI-based logout to properly notify phone\n          try {\n            console.log('🎯 Attempting real UI logout to disconnect phone...');\n            const page = await this.client.pupPage;\n            \n            if (page) {\n              // Wait for page to be ready\n              await page.waitForSelector('body', { timeout: 5000 });\n              \n              // Method 1a: Refined UI logout with proper timing and confirmation handling\n              try {\n                console.log('📱 Starting refined UI logout process...');\n                \n                // Take screenshot before logout for debugging\n                try {\n                  await page.screenshot({ path: './logout-before.png' });\n                  console.log('📸 Screenshot taken: logout-before.png');\n                } catch (screenshotErr) {\n                  console.log('Screenshot failed (non-critical):', screenshotErr.message);\n                }\n                \n                // Step 1: Inspect page and click menu button with network monitoring\n                console.log('🔍 Enabling network monitoring...');\n                await page.setRequestInterception(true);\n                \n                // Monitor network requests for logout calls\n                page.on('request', (request) => {\n                  if (request.url().includes('logout') || request.url().includes('disconnect')) {\n                    console.log('🌐 Network request detected:', request.method(), request.url());\n                  }\n                  request.continue();\n                });\n                \n                page.on('response', (response) => {\n                  if (response.url().includes('logout') || response.url().includes('disconnect')) {\n                    console.log('🌐 Network response:', response.status(), response.url());\n                  }\n                });\n                \n                console.log('🔍 Looking for menu button...');\n                await page.waitForSelector(\"span[data-icon='menu']\", { timeout: 5000 });\n                \n                // Log available elements for debugging\n                const menuElements = await page.$$(\"span[data-icon='menu']\");\n                console.log(`📊 Found ${menuElements.length} menu elements`);\n                \n                await page.click(\"span[data-icon='menu']\");\n                console.log('✅ Clicked menu button');\n                \n                // Step 2: Wait for menu to fully load\n                await page.waitForTimeout(2000);\n                \n                // Step 3: Comprehensive logout button detection\n                console.log('🔍 Analyzing menu structure...');\n                \n                // Get all text content in the menu to debug\n                const menuText = await page.evaluate(() => {\n                  const menuElements = document.querySelectorAll('[role=\"menu\"], [data-testid=\"menu\"], div[tabindex]');\n                  return Array.from(menuElements).map(el => ({\n                    text: el.textContent,\n                    classes: el.className,\n                    visible: el.offsetParent !== null\n                  }));\n                });\n                console.log('📋 Menu content found:', JSON.stringify(menuText, null, 2));\n                \n                // Try multiple logout detection strategies\n                const logoutStrategies = [\n                  \"//div[contains(text(), 'Log out') and not(ancestor::div[contains(@style, 'display: none')])]\",\n                  \"//span[contains(text(), 'Log out')]\",\n                  \"//div[@role='button'][contains(text(), 'Log out')]\",\n                  \"[data-testid*='logout']\",\n                  \"//div[text()='Log out']\"\n                ];\n                \n                let logoutBtn = null;\n                let usedStrategy = '';\n                \n                for (const strategy of logoutStrategies) {\n                  try {\n                    console.log(`🎯 Trying strategy: ${strategy}`);\n                    if (strategy.startsWith('//')) {\n                      await page.waitForXPath(strategy, { timeout: 2000 });\n                      const elements = await page.$x(strategy);\n                      if (elements.length > 0) {\n                        logoutBtn = elements[0];\n                        usedStrategy = strategy;\n                        console.log(`✅ Found logout button with: ${strategy}`);\n                        break;\n                      }\n                    } else {\n                      await page.waitForSelector(strategy, { timeout: 2000 });\n                      const element = await page.$(strategy);\n                      if (element) {\n                        logoutBtn = element;\n                        usedStrategy = strategy;\n                        console.log(`✅ Found logout button with: ${strategy}`);\n                        break;\n                      }\n                    }\n                  } catch (strategyErr) {\n                    console.log(`❌ Strategy failed: ${strategy}`);\n                  }\n                }\n                \n                try {\n                  \n                  if (logoutBtn) {\n                    console.log(`🎯 Clicking logout button found with: ${usedStrategy}`);\n                    \n                    // Monitor network before clicking\n                    const networkRequests = [];\n                    page.on('request', (req) => networkRequests.push(req.url()));\n                    \n                    await logoutBtn.click();\n                    console.log('✅ Clicked initial logout button');\n                    \n                    // Wait and check for network activity\n                    await page.waitForTimeout(1000);\n                    const logoutRequests = networkRequests.filter(url => \n                      url.includes('logout') || url.includes('disconnect') || url.includes('terminate')\n                    );\n                    console.log('🌐 Logout-related network requests:', logoutRequests);\n                    \n                    // Take screenshot after clicking logout\n                    try {\n                      await page.screenshot({ path: './logout-after-click.png' });\n                      console.log('📸 Screenshot taken: logout-after-click.png');\n                    } catch (screenshotErr) {\n                      console.log('Screenshot failed (non-critical):', screenshotErr.message);\n                    }\n                    \n                    // Step 4: Wait for and handle confirmation dialog\n                    console.log('🔍 Waiting for confirmation dialog...');\n                    await page.waitForTimeout(2000);\n                    \n                    // Enhanced confirmation dialog handling\n                    console.log('🔍 Searching for confirmation dialog...');\n                    \n                    // Check for modal/dialog presence first\n                    const dialogSelectors = [\n                      \"[role='dialog']\",\n                      \".modal\",\n                      \"[data-testid*='modal']\",\n                      \"[data-testid*='dialog']\"\n                    ];\n                    \n                    let dialogFound = false;\n                    for (const selector of dialogSelectors) {\n                      try {\n                        await page.waitForSelector(selector, { timeout: 2000 });\n                        dialogFound = true;\n                        console.log(`✅ Found dialog with: ${selector}`);\n                        break;\n                      } catch (e) {\n                        // Continue to next selector\n                      }\n                    }\n                    \n                    if (dialogFound) {\n                      // Try multiple confirmation strategies\n                      const confirmStrategies = [\n                        \"//div[contains(text(), 'Log out') and ancestor::div[@role='dialog']]\",\n                        \"//button[contains(text(), 'Log out')]\",\n                        \"//div[@role='button'][contains(text(), 'Log out')]\",\n                        \"[data-testid='popup-controls-ok']\",\n                        \"//div[text()='Log out' and ancestor::*[@role='dialog']]\"\n                      ];\n                      \n                      let confirmClicked = false;\n                      for (const strategy of confirmStrategies) {\n                        try {\n                          console.log(`🎯 Trying confirm strategy: ${strategy}`);\n                          if (strategy.startsWith('//')) {\n                            const elements = await page.$x(strategy);\n                            if (elements.length > 0) {\n                              await elements[0].click();\n                              console.log(`✅ Confirmed logout with: ${strategy}`);\n                              confirmClicked = true;\n                              break;\n                            }\n                          } else {\n                            const element = await page.$(strategy);\n                            if (element) {\n                              await element.click();\n                              console.log(`✅ Confirmed logout with: ${strategy}`);\n                              confirmClicked = true;\n                              break;\n                            }\n                          }\n                        } catch (strategyErr) {\n                          console.log(`❌ Confirm strategy failed: ${strategy}`);\n                        }\n                      }\n                      \n                      if (confirmClicked) {\n                        console.log('🎉 LOGOUT CONFIRMATION CLICKED - Phone should disconnect!');\n                        \n                        // Take final screenshot\n                        try {\n                          await page.screenshot({ path: './logout-confirmed.png' });\n                          console.log('📸 Screenshot taken: logout-confirmed.png');\n                        } catch (screenshotErr) {\n                          console.log('Screenshot failed (non-critical):', screenshotErr.message);\n                        }\n                        \n                        // Wait and monitor for logout completion\n                        await page.waitForTimeout(5000);\n                        \n                        // Check if we're redirected to login page\n                        const currentUrl = page.url();\n                        console.log('🌐 Current URL after logout:', currentUrl);\n                        \n                      } else {\n                        console.log('⚠️ Could not click confirmation - manual fallback needed');\n                      }\n                    } else {\n                      console.log('⚠️ No confirmation dialog found - logout may be direct');\n                    }\n                      \n                    } catch (confirmWaitErr) {\n                      console.log('⚠️ Confirmation dialog timeout - trying alternative selectors');\n                      \n                      // Fallback: try other confirmation selectors\n                      const altConfirmSelectors = [\n                        \"//button[contains(text(), 'Log out')]\",\n                        \"//div[@role='button'][contains(text(), 'Log out')]\",\n                        \"[data-testid='popup-controls-ok']\"\n                      ];\n                      \n                      for (const selector of altConfirmSelectors) {\n                        try {\n                          if (selector.startsWith('//')) {\n                            const [element] = await page.$x(selector);\n                            if (element) {\n                              await element.click();\n                              console.log(`✅ Confirmed logout using: ${selector}`);\n                              break;\n                            }\n                          } else {\n                            const element = await page.$(selector);\n                            if (element) {\n                              await element.click();\n                              console.log(`✅ Confirmed logout using: ${selector}`);\n                              break;\n                            }\n                          }\n                        } catch (altErr) {\n                          console.log(`Alternative selector ${selector} failed`);\n                        }\n                      }\n                    }\n                    \n                  } else {\n                    console.log('❌ Logout button not found in menu');\n                  }\n                  \n                } catch (logoutWaitErr) {\n                  console.log('❌ Logout button wait timeout:', logoutWaitErr.message);\n                }\n                \n              } catch (menuErr) {\n                console.log('Menu-based logout failed:', menuErr.message);\n                \n                // Fallback: Try JavaScript evaluation to trigger internal logout\n                try {\n                  console.log('🔄 Attempting JavaScript-based logout...');\n                  await page.evaluate(() => {\n                    // Try to find WhatsApp's internal logout functions\n                    const possibleLogoutMethods = [\n                      'window.Store?.AppState?.logout',\n                      'window.Store?.State?.default?.logout', \n                      'window.WA?.logout',\n                      'window.WAWeb?.logout'\n                    ];\n                    \n                    for (const methodPath of possibleLogoutMethods) {\n                      try {\n                        const method = eval(methodPath);\n                        if (typeof method === 'function') {\n                          console.log('Found logout method:', methodPath);\n                          method();\n                          return true;\n                        }\n                      } catch (e) {\n                        // Continue to next method\n                      }\n                    }\n                    \n                    // Alternative: Try to trigger logout event\n                    try {\n                      const event = new CustomEvent('logout');\n                      document.dispatchEvent(event);\n                      window.dispatchEvent(event);\n                    } catch (e) {\n                      console.log('Event dispatch failed');\n                    }\n                    \n                    return false;\n                  });\n                  console.log('✅ JavaScript logout attempt completed');\n                } catch (jsErr) {\n                  console.log('JavaScript logout failed:', jsErr.message);\n                }\n                \n                // Final fallback to programmatic logout\n                await this.client.logout();\n              }\n            } else {\n              console.log('No page available, using programmatic logout');\n              await this.client.logout();\n            }\n            \n          } catch (logoutErr) {\n            console.log('All logout methods failed, trying client.logout():', logoutErr.message);\n            try {\n              await this.client.logout();\n            } catch (finalErr) {\n              console.log('Final logout attempt failed:', finalErr.message);\n            }\n          }\n          \n          // Method 2: Clear browser storage and IndexedDB aggressively\n          try {\n            const page = await this.client.pupPage;\n            if (page) {\n              await page.evaluate(() => {\n                try {\n                  // Clear WhatsApp-specific IndexedDB\n                  if (window.indexedDB && window.indexedDB.databases) {\n                    window.indexedDB.databases().then(databases => {\n                      databases.forEach(db => {\n                        if (db.name && (db.name.includes('wawc') || db.name.includes('whatsapp'))) {\n                          window.indexedDB.deleteDatabase(db.name);\n                          console.log('Deleted IndexedDB:', db.name);\n                        }\n                      });\n                    });\n                  }\n                  \n                  // Clear all storage\n                  localStorage.clear();\n                  sessionStorage.clear();\n                  \n                  // Clear specific WhatsApp storage keys\n                  const keysToRemove = ['WASecretBundle', 'WAToken1', 'WAToken2', 'WABrowserId'];\n                  keysToRemove.forEach(key => {\n                    try {\n                      localStorage.removeItem(key);\n                      sessionStorage.removeItem(key);\n                    } catch (e) {}\n                  });\n                  \n                  console.log('Storage and IndexedDB cleared');\n                } catch (storageErr) {\n                  console.log('Storage cleanup error:', storageErr);\n                }\n              });\n              \n              // Delete browser cookies\n              try {\n                const cookies = await page.cookies();\n                if (cookies.length > 0) {\n                  await page.deleteCookie(...cookies);\n                  console.log('✅ Cleared browser cookies');\n                }\n              } catch (cookieErr) {\n                console.log('Cookie cleanup error:', cookieErr.message);\n              }\n              \n              console.log('✅ Aggressive storage cleanup completed');\n            }\n          } catch (storageErr) {\n            console.log('Storage cleanup method failed:', storageErr.message);\n          }\n          \n          console.log('🧹 Destroying WhatsApp client...');\n          await this.client.destroy();\n          console.log('✅ Client destroyed');\n        } catch (clientError: any) {\n          console.log('Client logout/destruction (expected):', clientError?.message);\n        }\n        this.client = null;\n      }\n      \n      // Clear session files manually to ensure complete logout and force phone disconnect\n      try {\n        const fs = await import('fs');\n        const path = await import('path');\n        const sessionPath = path.resolve('./.wwebjs_auth');\n        \n        if (fs.existsSync(sessionPath)) {\n          console.log('🗑️ Removing session files to force phone disconnect...');\n          fs.rmSync(sessionPath, { recursive: true, force: true });\n          console.log('✅ Session files cleared - phone should disconnect');\n        }\n        \n        // Also clear any Chrome user data directories to ensure clean slate\n        const tmpDir = '/tmp';\n        const chromeDataDirs = fs.readdirSync(tmpDir).filter(dir => dir.startsWith('chrome-'));\n        for (const dir of chromeDataDirs) {\n          try {\n            fs.rmSync(path.join(tmpDir, dir), { recursive: true, force: true });\n            console.log(`🗑️ Cleared Chrome data: ${dir}`);\n          } catch (e) {\n            // Non-critical cleanup\n          }\n        }\n      } catch (fsError: any) {\n        console.log('Session file cleanup (non-critical):', fsError?.message);\n      }\n      \n      console.log('✅ Logout successful - reinitializing for new QR');\n      \n      // Broadcast logout event to clients immediately\n      this.broadcastToClients('logout', { connected: false });\n      \n      // Immediate reinitialize with slight delay to ensure cleanup is complete\n      setTimeout(() => {\n        this.initializeClient();\n      }, 2000); // Increased delay to ensure proper cleanup\n      \n    } catch (error) {\n      console.error('❌ Logout error:', error);\n      // Force clean state even on error\n      this.sessionInfo = null;\n      this.qrCode = null;\n      this.isReady = false;\n      this.isInitializing = false;\n      this.client = null;\n      this.messageCache.clear(); // Clear cache on error too\n      \n      // Force clear session files even on error\n      try {\n        const fs = await import('fs');\n        const path = await import('path');\n        const sessionPath = path.resolve('./.wwebjs_auth');\n        if (fs.existsSync(sessionPath)) {\n          fs.rmSync(sessionPath, { recursive: true, force: true });\n          console.log('🗑️ Force cleared session files after error');\n        }\n      } catch (fsError: any) {\n        console.log('Force session cleanup failed (non-critical):', fsError?.message);\n      }\n      \n      // Still try to reinitialize\n      setTimeout(() => {\n        console.log('🔄 Force reinitializing after logout error...');\n        this.initializeClient();\n      }, 2500);\n    }\n  }\n\n  isClientReady(): boolean {\n    return this.isReady;\n  }\n\n\n\n  async simulateLogin() {\n    try {\n      // Create a demo session for UI testing\n      this.sessionInfo = {\n        name: 'Demo User',\n        loginTime: new Date().toISOString()\n      };\n      this.isReady = true;\n      this.qrCode = null;\n      console.log('Demo login simulated successfully');\n    } catch (error) {\n      console.error('Failed to simulate login:', error);\n      throw error;\n    }\n  }\n\n\n\n  async sendMessage(phoneNumber: string, message: string) {\n    try {\n      if (!this.client || !this.isReady) {\n        throw new Error('WhatsApp client is not ready. Please connect first.');\n      }\n\n      // Handle group IDs vs phone numbers\n      let chatId: string;\n      if (phoneNumber.includes('@g.us')) {\n        // This is a group ID, use as is\n        chatId = phoneNumber;\n      } else if (phoneNumber.includes('@c.us')) {\n        // This is already a properly formatted chat ID\n        chatId = phoneNumber;\n      } else {\n        // Clean phone number - remove all non-digits\n        const cleanPhoneNumber = phoneNumber.replace(/\\D/g, '');\n        \n        // Validate phone number\n        if (!cleanPhoneNumber || cleanPhoneNumber.length < 10) {\n          throw new Error('Please enter a valid phone number');\n        }\n        \n        // Format for WhatsApp (add @c.us suffix)\n        chatId = `${cleanPhoneNumber}@c.us`;\n      }\n\n      console.log(`Sending message to ${chatId}: ${message}`);\n\n      // Check if the number is registered on WhatsApp first\n      try {\n        const isRegistered = await this.client.isRegisteredUser(chatId);\n        if (!isRegistered) {\n          throw new Error('This phone number is not registered on WhatsApp');\n        }\n      } catch (checkError) {\n        console.log('Could not verify registration, proceeding with send...');\n      }\n\n      // Send message with retry logic\n      let sentMessage;\n      for (let attempt = 1; attempt <= 3; attempt++) {\n        try {\n          sentMessage = await this.client.sendMessage(chatId, message);\n          break;\n        } catch (sendError: any) {\n          if (attempt === 3) throw sendError;\n          console.log(`Send attempt ${attempt} failed, retrying...`);\n          await new Promise(resolve => setTimeout(resolve, 1000 * attempt));\n        }\n      }\n      \n      if (!sentMessage) {\n        throw new Error('Failed to send message after multiple attempts');\n      }\n      \n      console.log('Message sent successfully:', sentMessage.id);\n      \n      return {\n        messageId: sentMessage.id,\n        timestamp: new Date().toISOString(),\n        to: phoneNumber,\n        message: message\n      };\n    } catch (error: any) {\n      console.error('Failed to send message:', error);\n      throw new Error(`Failed to send message: ${error.message || 'Unknown error'}`);\n    }\n  }\n\n  async sendMediaMessage(phoneNumber: string, message: string | undefined, filePath: string, fileName: string) {\n    try {\n      if (!this.client || !this.isReady) {\n        throw new Error('WhatsApp client is not ready. Please connect first.');\n      }\n\n      // Handle group IDs vs phone numbers\n      let chatId: string;\n      if (phoneNumber.includes('@g.us')) {\n        // This is a group ID, use as is\n        chatId = phoneNumber;\n      } else if (phoneNumber.includes('@c.us')) {\n        // This is already a properly formatted chat ID\n        chatId = phoneNumber;\n      } else {\n        // Clean phone number - remove all non-digits\n        const cleanPhoneNumber = phoneNumber.replace(/\\D/g, '');\n        \n        // Validate phone number\n        if (!cleanPhoneNumber || cleanPhoneNumber.length < 10) {\n          throw new Error('Please enter a valid phone number');\n        }\n        \n        // Format for WhatsApp (add @c.us suffix)\n        chatId = `${cleanPhoneNumber}@c.us`;\n      }\n\n\n      console.log(`Sending media message to ${chatId}:`, fileName);\n\n      // Check if the number is registered on WhatsApp first\n      try {\n        const isRegistered = await this.client.isRegisteredUser(chatId);\n        if (!isRegistered) {\n          throw new Error('This phone number is not registered on WhatsApp');\n        }\n      } catch (checkError) {\n        console.log('Could not verify registration, proceeding with send...');\n      }\n\n      // Create MessageMedia from file with proper MIME type detection\n      const media = MessageMedia.fromFilePath(filePath);\n      \n      // Set filename for proper display\n      if (fileName) {\n        media.filename = fileName;\n      }\n      \n      // Comprehensive MIME type detection for all WhatsApp supported formats\n      const fileExtension = path.extname(fileName || filePath).toLowerCase();\n      \n      // All WhatsApp supported file formats with proper MIME types\n      const supportedMimeTypes = {\n        // Images\n        '.jpg': 'image/jpeg',\n        '.jpeg': 'image/jpeg',\n        '.png': 'image/png',\n        '.gif': 'image/gif',\n        '.webp': 'image/webp',\n        '.bmp': 'image/bmp',\n        '.tiff': 'image/tiff',\n        '.tif': 'image/tiff',\n        \n        // Videos\n        '.mp4': 'video/mp4',\n        '.mkv': 'video/x-matroska',\n        '.avi': 'video/x-msvideo',\n        '.mov': 'video/quicktime',\n        '.3gp': 'video/3gpp',\n        '.m4v': 'video/x-m4v',\n        '.webm': 'video/webm',\n        '.3g2': 'video/3gpp2',\n        '.rmvb': 'video/vnd.rn-realvideo',\n        \n        // Audio\n        '.aac': 'audio/aac',\n        '.amr': 'audio/amr',\n        '.flac': 'audio/flac',\n        '.m4a': 'audio/mp4',\n        '.m4r': 'audio/mp4',\n        '.mp3': 'audio/mpeg',\n        '.ogg': 'audio/ogg',\n        '.wav': 'audio/wav',\n        '.wma': 'audio/x-ms-wma',\n        \n        // Documents\n        '.pdf': 'application/pdf',\n        '.doc': 'application/msword',\n        '.docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n        '.xls': 'application/vnd.ms-excel',\n        '.xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        '.ppt': 'application/vnd.ms-powerpoint',\n        '.pptx': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n        '.txt': 'text/plain',\n        '.html': 'text/html',\n        '.epub': 'application/epub+zip',\n        '.ods': 'application/vnd.oasis.opendocument.spreadsheet',\n        '.zip': 'application/zip',\n        '.json': 'application/json'\n      };\n      \n      // Set proper MIME type for all supported formats\n      const mimeType = supportedMimeTypes[fileExtension as keyof typeof supportedMimeTypes];\n      if (mimeType) {\n        media.mimetype = mimeType;\n        console.log(`Setting MIME type for ${fileExtension}: ${media.mimetype}`);\n      } else {\n        console.log(`Using default MIME type for unsupported extension: ${fileExtension}`);\n      }\n      \n      // Validate file size according to WhatsApp limits\n      const stats = fs.statSync(filePath);\n      const fileSizeInMB = stats.size / (1024 * 1024);\n      \n      // Check file size limits based on type\n      const isVideo = fileExtension.match(/\\.(mp4|mkv|avi|mov|3gp|m4v|webm|3g2|rmvb)$/);\n      const isDocument = fileExtension.match(/\\.(pdf|doc|docx|xls|xlsx|ppt|pptx|txt|html|epub|ods|zip|json)$/);\n      \n      if (isVideo && fileSizeInMB > 16) {\n        throw new Error(`Video file is too large (${fileSizeInMB.toFixed(1)}MB). WhatsApp supports videos up to 16MB.`);\n      } else if (isDocument && fileSizeInMB > 100) {\n        throw new Error(`Document file is too large (${fileSizeInMB.toFixed(1)}MB). WhatsApp supports documents up to 100MB.`);\n      } else if (fileSizeInMB > 100) {\n        throw new Error(`File is too large (${fileSizeInMB.toFixed(1)}MB). Maximum file size is 100MB.`);\n      }\n      \n      console.log(`File size: ${fileSizeInMB.toFixed(2)}MB - within WhatsApp limits`);\n\n      // Send media message with retry logic\n      let sentMessage;\n      for (let attempt = 1; attempt <= 3; attempt++) {\n        try {\n          if (message && message.trim()) {\n            // Send media with caption\n            sentMessage = await this.client.sendMessage(chatId, media, { caption: message.trim() });\n          } else {\n            // Send media without caption\n            sentMessage = await this.client.sendMessage(chatId, media);\n          }\n          break;\n        } catch (sendError: any) {\n          if (attempt === 3) throw sendError;\n          console.log(`Send attempt ${attempt} failed, retrying...`);\n          await new Promise(resolve => setTimeout(resolve, 1000 * attempt));\n        }\n      }\n      \n      if (!sentMessage) {\n        throw new Error('Failed to send media message after multiple attempts');\n      }\n      \n      console.log('Media message sent successfully:', sentMessage.id);\n      \n      // Clean up the temporary file\n      try {\n        fs.unlinkSync(filePath);\n        console.log('Temporary file cleaned up:', filePath);\n      } catch (cleanupError) {\n        console.warn('Failed to clean up temporary file:', cleanupError);\n      }\n      \n      return {\n        messageId: sentMessage.id,\n        timestamp: new Date().toISOString(),\n        to: phoneNumber,\n        message: message || '[Media]',\n        fileName: fileName\n      };\n    } catch (error: any) {\n      console.error('Failed to send media message:', error);\n      \n      // Clean up the temporary file even on error\n      try {\n        if (fs.existsSync(filePath)) {\n          fs.unlinkSync(filePath);\n          console.log('Temporary file cleaned up after error:', filePath);\n        }\n      } catch (cleanupError) {\n        console.warn('Failed to clean up temporary file after error:', cleanupError);\n      }\n      \n      throw new Error(`Failed to send media message: ${error.message || 'Unknown error'}`);\n    }\n  }\n\n  async getChats() {\n    try {\n      if (!this.client || !this.isReady) {\n        throw new Error('WhatsApp client is not ready. Please connect first.');\n      }\n\n      console.log('Fetching all chats (excluding groups)...');\n      const chats = await this.client.getChats();\n      \n      const chatList = chats\n        .filter((chat: any) => !chat.isGroup) // Exclude groups from chats\n        .map((chat: any) => ({\n          id: chat.id._serialized,\n          name: chat.name || 'Unknown',\n          isGroup: chat.isGroup,\n          unreadCount: chat.unreadCount,\n          lastMessage: chat.lastMessage ? {\n            body: chat.lastMessage.body || '[Media]',\n            timestamp: chat.lastMessage.timestamp,\n            fromMe: chat.lastMessage.fromMe\n          } : null,\n          timestamp: chat.timestamp\n        }))\n        .sort((a, b) => {\n          // Sort by last message timestamp or chat timestamp, newest first\n          const aTime = a.lastMessage?.timestamp || a.timestamp;\n          const bTime = b.lastMessage?.timestamp || b.timestamp;\n          return bTime - aTime;\n        });\n\n      console.log(`Found ${chatList.length} individual chats (groups excluded)`);\n      return chatList;\n    } catch (error: any) {\n      console.error('Failed to get chats:', error);\n      throw new Error(`Failed to get chats: ${error.message || 'Unknown error'}`);\n    }\n  }\n\n  // Helper method to identify AI contacts\n  private isAIContact(name: string, number: string): boolean {\n    const aiNames = [\n      'meta ai', 'dungeon master', 'bob the robot', 'amber the detective',\n      'jane austen ai', 'jade on the beat', 'left hook luiz', 'bru the sports guy',\n      'chatgpt', 'claude', 'gemini', 'bard', 'copilot', 'assistant', 'ai bot',\n      'virtual assistant', 'bot', 'ai helper', 'artificial intelligence',\n      'whatsapp ai', 'meta assistant', 'facebook ai', 'instagram ai'\n    ];\n    \n    const aiNumbers = [\n      '13135550002', '13135550005', '13135550009', '13135550012', \n      '13135550013', '13135550014', '13135550015'\n    ];\n    \n    const lowerName = name?.toLowerCase() || '';\n    const cleanNumber = number?.replace(/[\\+\\-\\s\\(\\)]/g, '') || '';\n    \n    // Check if name contains AI keywords\n    const isAIName = aiNames.some(aiName => \n      lowerName.includes(aiName) || \n      lowerName.includes('ai') ||\n      lowerName.includes('bot') ||\n      lowerName.includes('assistant') ||\n      lowerName.includes('chatbot')\n    );\n    \n    // Check if number matches known AI numbers\n    const isAINumber = aiNumbers.some(aiNumber => cleanNumber.includes(aiNumber));\n    \n    // Additional patterns for AI contacts\n    const hasAIPattern = /\\b(ai|bot|assistant|virtual|artificial|meta|chatgpt|claude|gemini|bard)\\b/i.test(lowerName);\n    \n    return isAIName || isAINumber || hasAIPattern;\n  }\n\n  // Helper method to determine which contact is better when deduplicating\n  private isContactBetter(candidate: any, existing: any): boolean {\n    // First priority: Valid Indian phone numbers (10 digits starting with 6-9)\n    const candidateClean = (candidate.number || '').replace(/\\D/g, '');\n    const existingClean = (existing.number || '').replace(/\\D/g, '');\n    \n    const isValidIndianNumber = (num: string) => {\n      // Remove country code if present\n      const cleanNum = num.startsWith('91') ? num.slice(2) : num;\n      return cleanNum.length === 10 && /^[6-9]/.test(cleanNum);\n    };\n    \n    const candidateValidIndian = isValidIndianNumber(candidateClean);\n    const existingValidIndian = isValidIndianNumber(existingClean);\n    \n    // Strongly prefer valid Indian numbers\n    if (candidateValidIndian && !existingValidIndian) return true;\n    if (!candidateValidIndian && existingValidIndian) return false;\n    \n    // If both or neither are valid Indian numbers, check other criteria\n    \n    // Prefer standard 10-digit numbers over longer ones (which might be international format errors)\n    if (candidateValidIndian && existingValidIndian) {\n      const candidateLen = candidateClean.startsWith('91') ? candidateClean.slice(2).length : candidateClean.length;\n      const existingLen = existingClean.startsWith('91') ? existingClean.slice(2).length : existingClean.length;\n      \n      if (candidateLen === 10 && existingLen !== 10) return true;\n      if (candidateLen !== 10 && existingLen === 10) return false;\n    }\n    \n    // Prefer contacts with profile pictures\n    if (candidate.profilePicUrl && !existing.profilePicUrl) return true;\n    if (!candidate.profilePicUrl && existing.profilePicUrl) return false;\n    \n    // Prefer contacts that are WhatsApp contacts\n    if (candidate.isWAContact && !existing.isWAContact) return true;\n    if (!candidate.isWAContact && existing.isWAContact) return false;\n    \n    // Prefer shorter, cleaner phone numbers (less likely to be corrupted)\n    if (candidateClean.length < existingClean.length && candidateClean.length >= 10) return true;\n    if (existingClean.length < candidateClean.length && existingClean.length >= 10) return false;\n    \n    // Prefer contacts with longer, more complete names\n    if (candidate.name && existing.name) {\n      if (candidate.name.length > existing.name.length) return true;\n      if (existing.name.length > candidate.name.length) return false;\n    }\n    \n    // Default: keep existing\n    return false;\n  }\n\n  // Store incoming messages in cache for immediate retrieval\n  private async storeRealtimeMessage(message: any) {\n    try {\n      const chatId = message.from;\n      \n      // Get existing messages for this chat\n      let chatMessages = this.messageCache.get(chatId) || [];\n      \n      // Create message object with consistent ID format\n      const messageObj = {\n        id: message.id?._serialized || `realtime_${Date.now()}_${Math.random()}`,\n        body: message.body || '[Media]',\n        timestamp: message.timestamp * 1000, // Convert to milliseconds\n        fromMe: message.fromMe || false,\n        author: message.author || message.from,\n        type: message.type || 'chat',\n        hasMedia: message.hasMedia || false,\n        mediaUrl: null // Will be populated if it's a media message\n      };\n\n      // Handle media messages\n      if (message.hasMedia) {\n        try {\n          const media = await message.downloadMedia();\n          if (media) {\n            messageObj.mediaUrl = `data:${media.mimetype};base64,${media.data}`;\n          }\n        } catch (mediaError: any) {\n          console.warn('Failed to download media for message:', mediaError.message);\n        }\n      }\n      \n      // Check if this message already exists in cache to prevent duplicates\n      const existingIndex = chatMessages.findIndex(existing => \n        existing.body === messageObj.body && \n        existing.fromMe === messageObj.fromMe &&\n        Math.abs(existing.timestamp - messageObj.timestamp) < 2000 // Within 2 seconds\n      );\n      \n      if (existingIndex === -1) {\n        // Add to messages array only if it doesn't already exist\n        chatMessages.push(messageObj);\n      } else {\n        console.log(`🔄 Skipped duplicate cached message: ${messageObj.body.substring(0, 50)}...`);\n        return; // Don't update cache if message already exists\n      }\n      \n      // Keep only last 100 messages per chat to avoid memory issues\n      if (chatMessages.length > 100) {\n        chatMessages = chatMessages.slice(-100);\n      }\n      \n      // Sort by timestamp\n      chatMessages.sort((a, b) => a.timestamp - b.timestamp);\n      \n      // Update cache\n      this.messageCache.set(chatId, chatMessages);\n      \n      console.log(`💾 Cached message for chat ${chatId}: ${messageObj.body.substring(0, 50)}...`);\n    } catch (error: any) {\n      console.error('Error storing realtime message:', error.message);\n    }\n  }\n\n  async getContacts() {\n    try {\n      if (!this.client || !this.isReady) {\n        throw new Error('WhatsApp client is not ready. Please connect first.');\n      }\n\n      console.log('Fetching all contacts (excluding groups)...');\n      const contacts = await this.client.getContacts();\n      \n      const filteredContacts = contacts\n        .filter(contact => \n          contact.id.user && \n          !contact.id.user.includes('status') && \n          !contact.isGroup &&\n          contact.isMyContact && // Only show contacts that are actually saved in the user's address book\n          contact.name && \n          contact.name.trim() !== '' &&\n          contact.name !== contact.id.user && // Exclude contacts where name is just the phone number\n          contact.name !== 'Unknown' &&\n          !contact.name.startsWith('+') && // Exclude names that are just phone numbers starting with +\n          !/^\\d+$/.test(contact.name) && // Exclude names that are just digits\n          !this.isAIContact(contact.name, contact.number) // Exclude AI contacts\n        )\n        .map(contact => ({\n          id: contact.id._serialized,\n          name: contact.name || contact.pushname || 'Unknown',\n          number: contact.number,\n          isMyContact: contact.isMyContact,\n          isWAContact: contact.isWAContact,\n          profilePicUrl: contact.profilePicUrl || null,\n          isGroup: contact.isGroup || false,\n          originalContact: contact // Keep reference for deduplication logic\n        }));\n\n      // Remove duplicates by name, keeping the most valid contact\n      const contactsByName = new Map();\n      \n      filteredContacts.forEach(contact => {\n        const normalizedName = contact.name.toLowerCase().trim();\n        \n        if (!contactsByName.has(normalizedName)) {\n          contactsByName.set(normalizedName, contact);\n        } else {\n          const existing = contactsByName.get(normalizedName);\n          // Keep the contact with better quality indicators\n          if (this.isContactBetter(contact, existing)) {\n            contactsByName.set(normalizedName, contact);\n          }\n        }\n      });\n\n      const contactList = Array.from(contactsByName.values())\n        .map(contact => ({\n          id: contact.id,\n          name: contact.name,\n          number: contact.number,\n          isMyContact: contact.isMyContact,\n          isWAContact: contact.isWAContact,\n          profilePicUrl: contact.profilePicUrl,\n          isGroup: contact.isGroup\n        }));\n\n      console.log(`Found ${contactList.length} individual contacts (groups excluded)`);\n      return contactList;\n    } catch (error: any) {\n      console.error('Failed to get contacts:', error);\n      throw new Error(`Failed to get contacts: ${error.message || 'Unknown error'}`);\n    }\n  }\n\n  // Get all groups from connected WhatsApp device\n  async getGroups() {\n    try {\n      if (!this.client || !this.isReady) {\n        throw new Error('WhatsApp client is not ready. Please connect first.');\n      }\n\n      console.log('Fetching all groups...');\n      const chats = await this.client.getChats();\n      \n      const groupList = chats\n        .filter(chat => chat.isGroup) // Only include groups\n        .map(chat => ({\n          id: chat.id._serialized,\n          name: chat.name || 'Unknown Group',\n          isGroup: chat.isGroup,\n          unreadCount: chat.unreadCount,\n          lastMessage: chat.lastMessage ? {\n            body: chat.lastMessage.body || '[Media]',\n            timestamp: chat.lastMessage.timestamp,\n            fromMe: chat.lastMessage.fromMe\n          } : null,\n          timestamp: chat.timestamp,\n          participants: chat.participants || [],\n          isAdmin: chat.participants ? chat.participants.some((p: any) => p.isAdmin && p.id._serialized === this.client?.info?.wid?._serialized) : false,\n          onlyAdminsCanMessage: chat.groupMetadata?.restrict || false // Check if group restricts messaging to admins only\n        }))\n        .sort((a, b) => {\n          // Sort by last message timestamp or chat timestamp, newest first\n          const aTime = a.lastMessage?.timestamp || a.timestamp;\n          const bTime = b.lastMessage?.timestamp || b.timestamp;\n          return bTime - aTime;\n        });\n\n      console.log(`Found ${groupList.length} groups`);\n      return groupList;\n    } catch (error: any) {\n      console.error('Failed to get groups:', error);\n      throw new Error(`Failed to get groups: ${error.message || 'Unknown error'}`);\n    }\n  }\n\n  // Get chat history with a specific contact\n  async getChatHistory(contactId: string) {\n    try {\n      if (!this.client || !this.isReady) {\n        throw new Error('WhatsApp client is not ready. Please connect first.');\n      }\n\n      console.log(`Fetching chat history for contact: ${contactId}`);\n      \n      // Get the chat by ID\n      const chat = await this.client.getChatById(contactId);\n      \n      if (!chat) {\n        throw new Error('Chat not found');\n      }\n\n      // Fetch messages from WhatsApp (limit to last 50 for performance)\n      const messages = await chat.fetchMessages({ limit: 50 });\n      \n      const fetchedMessages = messages.map((msg: any) => ({\n        id: msg.id._serialized || msg.id.id, // Use _serialized for consistency with real-time messages\n        body: msg.body || '[Media]',\n        fromMe: msg.fromMe,\n        timestamp: msg.timestamp * 1000, // Convert to milliseconds for consistency\n        type: msg.type,\n        hasMedia: msg.hasMedia,\n        mediaUrl: msg.hasMedia ? msg.mediaUrl : null\n      }));\n\n      // Get cached real-time messages for this chat\n      const cachedMessages = this.messageCache.get(contactId) || [];\n      \n      // Merge and deduplicate messages using more robust logic\n      const allMessages = [...fetchedMessages, ...cachedMessages];\n      const uniqueMessages = new Map();\n      \n      // Remove duplicates by message body, timestamp, and fromMe (more reliable than just ID)\n      allMessages.forEach(msg => {\n        // Create a unique key based on content and timing rather than just ID\n        const timeWindow = Math.floor(msg.timestamp / 1000); // Group by second to handle slight timestamp differences\n        const key = `${msg.body}_${msg.fromMe}_${timeWindow}`;\n        \n        // Only add if we haven't seen this exact message combination\n        if (!uniqueMessages.has(key)) {\n          uniqueMessages.set(key, msg);\n        } else {\n          // If we have a duplicate, prefer the one with a proper message ID\n          const existing = uniqueMessages.get(key);\n          if (msg.id && msg.id.startsWith('false_') && existing.id && !existing.id.startsWith('false_')) {\n            // Keep the existing one (it has a better ID)\n          } else if (existing.id && existing.id.startsWith('false_') && msg.id && !msg.id.startsWith('false_')) {\n            // Replace with the new one (it has a better ID)\n            uniqueMessages.set(key, msg);\n          }\n        }\n      });\n      \n      // Sort by timestamp (oldest first, newest last)\n      const sortedMessages = Array.from(uniqueMessages.values())\n        .sort((a, b) => a.timestamp - b.timestamp);\n\n      console.log(`Found ${sortedMessages.length} messages for chat ${contactId} (${fetchedMessages.length} fetched, ${cachedMessages.length} cached)`);\n      \n      return {\n        contact: {\n          id: chat.id._serialized,\n          name: chat.name || 'Unknown',\n          isGroup: chat.isGroup\n        },\n        messages: sortedMessages\n      };\n    } catch (error: any) {\n      console.error('Failed to get chat history:', error);\n      throw new Error(`Failed to get chat history: ${error.message || 'Unknown error'}`);\n    }\n  }\n}\n\nexport const whatsappService = new WhatsAppService();\n","size_bytes":59565},"client/src/lib/websocket.ts":{"content":"// Centralized WebSocket connection utility\n// This prevents multiple WebSocket connections and ensures proper URL construction\n\nlet wsInstance: WebSocket | null = null;\nlet reconnectTimeout: NodeJS.Timeout | null = null;\n\nexport interface WebSocketMessage {\n  type: 'qr' | 'connected' | 'disconnected' | 'logout' | 'chats_updated' | 'contacts_updated' | 'groups_updated' | 'new_message' | 'connection_status';\n  data?: any;\n}\n\nexport type WebSocketEventHandler = (message: WebSocketMessage) => void;\n\nclass WebSocketManager {\n  private ws: WebSocket | null = null;\n  private eventHandlers: Set<WebSocketEventHandler> = new Set();\n  private reconnectAttempts = 0;\n  private maxReconnectAttempts = 5;\n  private reconnectDelay = 3000;\n\n  constructor() {\n    this.connect();\n  }\n\n  private connect() {\n    try {\n      // Determine the appropriate WebSocket URL\n      const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n      const hostname = window.location.hostname;\n      const currentLocation = window.location.href;\n      \n      // For Replit, use the full hostname; for localhost, include port\n      let wsUrl: string;\n      if (hostname.includes('replit.dev') || hostname.includes('repl.it')) {\n        wsUrl = `${protocol}//${hostname}/ws`;\n      } else if (hostname === 'localhost' || hostname === '127.0.0.1') {\n        const port = window.location.port || (protocol === 'wss:' ? '443' : '80');\n        wsUrl = `${protocol}//${hostname}:${port}/ws`;\n      } else {\n        wsUrl = `${protocol}//${hostname}/ws`;\n      }\n      \n      console.log('🔌 WebSocket connecting to:', wsUrl);\n      console.log('🔌 Connection details:', {\n        protocol,\n        hostname,\n        currentLocation: window.location.href,\n        finalUrl: wsUrl\n      });\n\n      this.ws = new WebSocket(wsUrl);\n\n      this.ws.onopen = () => {\n        console.log('📡 WebSocket connected successfully');\n        this.reconnectAttempts = 0;\n      };\n\n      this.ws.onmessage = (event) => {\n        try {\n          const message: WebSocketMessage = JSON.parse(event.data);\n          console.log('📨 WebSocket message received:', message.type);\n          \n          // Notify all registered handlers\n          this.eventHandlers.forEach(handler => {\n            try {\n              handler(message);\n            } catch (error) {\n              console.error('Error in WebSocket event handler:', error);\n            }\n          });\n        } catch (error) {\n          console.error('Failed to parse WebSocket message:', error);\n        }\n      };\n\n      this.ws.onclose = (event) => {\n        console.log('📡 WebSocket disconnected:', event.code, event.reason);\n        this.ws = null;\n        \n        // Attempt to reconnect if we haven't exceeded max attempts\n        if (this.reconnectAttempts < this.maxReconnectAttempts) {\n          this.reconnectAttempts++;\n          console.log(`🔄 Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);\n          \n          if (reconnectTimeout) {\n            clearTimeout(reconnectTimeout);\n          }\n          \n          reconnectTimeout = setTimeout(() => {\n            this.connect();\n          }, this.reconnectDelay);\n        } else {\n          console.log('❌ Max reconnection attempts reached');\n        }\n      };\n\n      this.ws.onerror = (error) => {\n        console.error('📡 WebSocket error:', error);\n      };\n\n    } catch (error) {\n      console.error('Failed to create WebSocket connection:', error);\n      \n      // Retry after delay\n      if (this.reconnectAttempts < this.maxReconnectAttempts) {\n        this.reconnectAttempts++;\n        setTimeout(() => this.connect(), this.reconnectDelay);\n      }\n    }\n  }\n\n  public addEventHandler(handler: WebSocketEventHandler) {\n    this.eventHandlers.add(handler);\n  }\n\n  public removeEventHandler(handler: WebSocketEventHandler) {\n    this.eventHandlers.delete(handler);\n  }\n\n  public isConnected(): boolean {\n    return this.ws?.readyState === WebSocket.OPEN;\n  }\n\n  public disconnect() {\n    if (reconnectTimeout) {\n      clearTimeout(reconnectTimeout);\n      reconnectTimeout = null;\n    }\n    \n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n    \n    this.eventHandlers.clear();\n  }\n}\n\n// Export singleton instance\nexport const websocketManager = new WebSocketManager();","size_bytes":4347},"client/src/pages/status.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { ArrowLeft, Eye, Image, Video, FileText, Link as LinkIcon, User } from 'lucide-react';\nimport { formatDistanceToNow } from 'date-fns';\n\ninterface StatusUpdate {\n  id: string;\n  author: string;\n  authorName: string;\n  body: string;\n  timestamp: number;\n  type: string;\n  hasMedia: boolean;\n  mediaType: string;\n  links: string[];\n}\n\nexport default function StatusPage() {\n  const [, setLocation] = useLocation();\n  const [selectedStatus, setSelectedStatus] = useState<StatusUpdate | null>(null);\n  const [showStatusDialog, setShowStatusDialog] = useState(false);\n\n  // Fetch status updates\n  const { data: statusUpdates = [], isLoading: statusLoading } = useQuery<StatusUpdate[]>({\n    queryKey: ['/api/status'],\n    refetchInterval: 30000,\n  });\n\n  // Group status updates by author\n  const groupedStatuses = statusUpdates.reduce((acc: Record<string, StatusUpdate[]>, status) => {\n    const authorKey = status.authorName || status.author;\n    if (!acc[authorKey]) {\n      acc[authorKey] = [];\n    }\n    acc[authorKey].push(status);\n    return acc;\n  }, {});\n\n  const handleStatusClick = (status: StatusUpdate) => {\n    setSelectedStatus(status);\n    setShowStatusDialog(true);\n  };\n\n  const getMediaIcon = (type: string) => {\n    switch (type) {\n      case 'image':\n        return <Image className=\"h-4 w-4\" />;\n      case 'video':\n        return <Video className=\"h-4 w-4\" />;\n      case 'document':\n        return <FileText className=\"h-4 w-4\" />;\n      default:\n        return null;\n    }\n  };\n\n  const getStatusTypeColor = (type: string) => {\n    switch (type) {\n      case 'image':\n        return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200';\n      case 'video':\n        return 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200';\n      case 'document':\n        return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200';\n      default:\n        return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200';\n    }\n  };\n\n  const formatPhoneNumber = (author: string): string => {\n    if (typeof author === 'string' && author.includes('@')) {\n      const phoneNumber = author.split('@')[0];\n      if (phoneNumber.length > 7) {\n        return phoneNumber.replace(/^(\\d{1,3})(\\d{3,4})(\\d{3,4})(\\d{4})$/, '+$1 $2 $3 $4');\n      }\n      return phoneNumber;\n    }\n    return author || 'Unknown';\n  };\n\n  if (statusLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      <div className=\"max-w-6xl mx-auto p-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              variant=\"ghost\"\n              onClick={() => setLocation('/dashboard?module=status')}\n              className=\"flex items-center space-x-2\"\n            >\n              <ArrowLeft className=\"h-4 w-4\" />\n              <span>Back to Dashboard</span>\n            </Button>\n            <div>\n              <h1 className=\"text-2xl font-bold\">WhatsApp Status Updates</h1>\n              <p className=\"text-muted-foreground\">\n                View status updates from your contacts\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Status Updates */}\n        <div className=\"space-y-6\">\n          {Object.keys(groupedStatuses).length === 0 ? (\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"text-center py-8\">\n                  <User className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No Status Updates</h3>\n                  <p className=\"text-muted-foreground\">\n                    Status updates from your contacts will appear here.\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          ) : (\n            Object.entries(groupedStatuses).map(([authorName, statuses]) => (\n              <Card key={authorName} className=\"overflow-hidden\">\n                <CardHeader className=\"pb-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-12 h-12 rounded-full bg-green-200 dark:bg-green-700 flex items-center justify-center\">\n                        <User className=\"h-6 w-6\" />\n                      </div>\n                      <div>\n                        <CardTitle className=\"text-lg\">{authorName}</CardTitle>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {formatPhoneNumber(statuses[0].author)}\n                        </p>\n                      </div>\n                    </div>\n                    <Badge variant=\"secondary\">\n                      {statuses.length} update{statuses.length !== 1 ? 's' : ''}\n                    </Badge>\n                  </div>\n                </CardHeader>\n                \n                <CardContent className=\"pt-0\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                    {statuses.map((status) => (\n                      <div\n                        key={status.id}\n                        className=\"border rounded-lg p-4 hover:bg-muted/50 transition-colors cursor-pointer group\"\n                        onClick={() => handleStatusClick(status)}\n                        data-testid={`status-card-${status.id}`}\n                      >\n                        <div className=\"flex items-start justify-between mb-2\">\n                          <div className=\"flex items-center space-x-2\">\n                            {status.hasMedia && getMediaIcon(status.mediaType)}\n                            <Badge \n                              className={`text-xs ${getStatusTypeColor(status.type)}`}\n                              variant=\"secondary\"\n                            >\n                              {status.type || 'text'}\n                            </Badge>\n                          </div>\n                          <Button \n                            size=\"sm\" \n                            variant=\"ghost\" \n                            className=\"opacity-0 group-hover:opacity-100 transition-opacity\"\n                          >\n                            <Eye className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                        \n                        {status.body && (\n                          <p className=\"text-sm mb-3 line-clamp-3\">\n                            {status.body}\n                          </p>\n                        )}\n                        \n                        {status.links && status.links.length > 0 && (\n                          <div className=\"flex items-center space-x-1 mb-3\">\n                            <LinkIcon className=\"h-3 w-3 text-blue-500\" />\n                            <span className=\"text-xs text-blue-500\">\n                              {status.links.length} link{status.links.length !== 1 ? 's' : ''}\n                            </span>\n                          </div>\n                        )}\n                        \n                        <p className=\"text-xs text-muted-foreground\">\n                          {formatDistanceToNow(new Date(status.timestamp * 1000), { addSuffix: true })}\n                        </p>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          )}\n        </div>\n\n        {/* Status Detail Dialog */}\n        <Dialog open={showStatusDialog} onOpenChange={setShowStatusDialog}>\n          <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center space-x-2\">\n                <User className=\"h-5 w-5\" />\n                <span>{selectedStatus?.authorName}</span>\n                {selectedStatus?.hasMedia && (\n                  <Badge className={getStatusTypeColor(selectedStatus.type)} variant=\"secondary\">\n                    {selectedStatus.type}\n                  </Badge>\n                )}\n              </DialogTitle>\n            </DialogHeader>\n            \n            {selectedStatus && (\n              <div className=\"space-y-4\">\n                <div className=\"text-sm text-muted-foreground\">\n                  {formatPhoneNumber(selectedStatus.author)} • {' '}\n                  {formatDistanceToNow(new Date(selectedStatus.timestamp * 1000), { addSuffix: true })}\n                </div>\n                \n                {selectedStatus.body && (\n                  <div className=\"bg-muted/30 rounded-lg p-4\">\n                    <p className=\"whitespace-pre-wrap\">{selectedStatus.body}</p>\n                  </div>\n                )}\n                \n                {selectedStatus.hasMedia && (\n                  <div className=\"bg-muted/30 rounded-lg p-4 text-center\">\n                    <div className=\"flex flex-col items-center space-y-2\">\n                      {getMediaIcon(selectedStatus.mediaType)}\n                      <p className=\"text-sm text-muted-foreground\">\n                        Media content ({selectedStatus.mediaType})\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        Media preview not available in this view\n                      </p>\n                    </div>\n                  </div>\n                )}\n                \n                {selectedStatus.links && selectedStatus.links.length > 0 && (\n                  <div className=\"space-y-2\">\n                    <h4 className=\"font-medium flex items-center space-x-2\">\n                      <LinkIcon className=\"h-4 w-4\" />\n                      <span>Links</span>\n                    </h4>\n                    <div className=\"space-y-1\">\n                      {selectedStatus.links.map((link, index) => (\n                        <a\n                          key={index}\n                          href={link}\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                          className=\"block text-sm text-blue-500 hover:text-blue-700 underline break-all\"\n                        >\n                          {link}\n                        </a>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}","size_bytes":11153},"client/src/pages/bulk-campaigns.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Play, Pause, Copy, RefreshCw, Trash2, RotateCcw } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport type { BulkMessageCampaign } from \"@shared/schema\";\n\nexport default function BulkCampaigns() {\n  const { toast } = useToast();\n  const [isCreateFormOpen, setIsCreateFormOpen] = useState(false);\n  const [autoRefresh, setAutoRefresh] = useState(true);\n  \n  const [campaignForm, setCampaignForm] = useState({\n    name: \"\",\n    message: \"\",\n    targetType: \"whatsapp_group\",\n    whatsappGroupId: \"\",\n    scheduleType: \"immediate\",\n    minInterval: 40,\n    maxInterval: 100\n  });\n\n  // Fetch campaigns with auto-refresh\n  const { data: campaigns = [], isLoading: campaignsLoading, refetch: refetchCampaigns } = useQuery<BulkMessageCampaign[]>({\n    queryKey: [\"/api/bulk-campaigns\"],\n    enabled: true,\n    refetchInterval: autoRefresh ? 3000 : false,\n    refetchIntervalInBackground: true\n  });\n\n  // Fetch WhatsApp groups\n  const { data: whatsappGroups = [] } = useQuery<any[]>({\n    queryKey: [\"/api/groups\"],\n    enabled: true\n  });\n\n  // Auto-refresh effect for running campaigns\n  useEffect(() => {\n    const hasRunningCampaigns = campaigns.some(c => c.status === \"running\");\n    setAutoRefresh(hasRunningCampaigns);\n  }, [campaigns]);\n\n  // Create campaign mutation\n  const createCampaignMutation = useMutation({\n    mutationFn: async (formData: FormData) => {\n      const response = await fetch(\"/api/campaigns/create\", {\n        method: \"POST\",\n        body: formData\n      });\n      if (!response.ok) throw new Error('Failed to create campaign');\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Campaign created successfully\" });\n      setIsCreateFormOpen(false);\n      resetForm();\n      queryClient.invalidateQueries({ queryKey: [\"/api/bulk-campaigns\"] });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message || \"Failed to create campaign\", variant: \"destructive\" });\n    }\n  });\n\n  // Execute campaign mutation\n  const executeCampaignMutation = useMutation({\n    mutationFn: async (campaignId: string) => {\n      const response = await fetch(`/api/campaigns/${campaignId}/execute`, {\n        method: \"POST\"\n      });\n      if (!response.ok) throw new Error('Failed to start campaign');\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Campaign started successfully\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bulk-campaigns\"] });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message || \"Failed to start campaign\", variant: \"destructive\" });\n    }\n  });\n\n  // Restart campaign mutation (creates a copy with same settings)\n  const restartCampaignMutation = useMutation({\n    mutationFn: async (campaign: BulkMessageCampaign) => {\n      const formData = new FormData();\n      formData.append(\"name\", campaign.name);\n      formData.append(\"message\", campaign.message);\n      formData.append(\"targetType\", campaign.targetType);\n      formData.append(\"scheduleType\", campaign.scheduleType);\n      formData.append(\"minInterval\", campaign.minInterval.toString());\n      formData.append(\"maxInterval\", campaign.maxInterval.toString());\n      if (campaign.whatsappGroupId) formData.append(\"whatsappGroupId\", campaign.whatsappGroupId);\n      \n      const response = await fetch(\"/api/campaigns/create\", {\n        method: \"POST\",\n        body: formData\n      });\n      if (!response.ok) throw new Error('Failed to restart campaign');\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Campaign restarted successfully\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bulk-campaigns\"] });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message || \"Failed to restart campaign\", variant: \"destructive\" });\n    }\n  });\n\n  // Delete campaign mutation\n  const deleteCampaignMutation = useMutation({\n    mutationFn: async (campaignId: string) => {\n      const response = await fetch(`/api/campaigns/${campaignId}`, {\n        method: \"DELETE\"\n      });\n      if (!response.ok) throw new Error('Failed to delete campaign');\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Campaign deleted successfully\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bulk-campaigns\"] });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message || \"Failed to delete campaign\", variant: \"destructive\" });\n    }\n  });\n\n  const resetForm = () => {\n    setCampaignForm({\n      name: \"\",\n      message: \"\",\n      targetType: \"whatsapp_group\",\n      whatsappGroupId: \"\",\n      scheduleType: \"immediate\",\n      minInterval: 40,\n      maxInterval: 100\n    });\n  };\n\n  const handleCreateCampaign = () => {\n    if (!campaignForm.name || !campaignForm.message) {\n      toast({ title: \"Error\", description: \"Campaign name and message are required\", variant: \"destructive\" });\n      return;\n    }\n\n    if (!campaignForm.whatsappGroupId) {\n      toast({ title: \"Error\", description: \"Please select a WhatsApp group\", variant: \"destructive\" });\n      return;\n    }\n\n    const formData = new FormData();\n    Object.entries(campaignForm).forEach(([key, value]) => {\n      formData.append(key, value.toString());\n    });\n\n    createCampaignMutation.mutate(formData);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"draft\": return \"bg-gray-100 text-gray-800\";\n      case \"running\": return \"bg-blue-100 text-blue-800\";\n      case \"paused\": return \"bg-yellow-100 text-yellow-800\";\n      case \"completed\": return \"bg-green-100 text-green-800\";\n      case \"failed\": return \"bg-red-100 text-red-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleString();\n  };\n\n  return (\n    <div className=\"min-h-screen max-h-screen overflow-y-auto space-y-6 p-4\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Bulk Campaigns</h1>\n          <p className=\"text-muted-foreground\">Create and manage bulk messaging campaigns</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button\n            variant=\"outline\"\n            onClick={() => refetchCampaigns()}\n            disabled={campaignsLoading}\n          >\n            <RefreshCw className={`h-4 w-4 mr-2 ${campaignsLoading ? 'animate-spin' : ''}`} />\n            Refresh\n          </Button>\n          <Button onClick={() => setIsCreateFormOpen(!isCreateFormOpen)}>\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Create Campaign\n          </Button>\n        </div>\n      </div>\n\n      {/* Create Campaign Form */}\n      {isCreateFormOpen && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Create New Campaign</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">Campaign Name</label>\n                <Input\n                  placeholder=\"Enter campaign name\"\n                  value={campaignForm.name}\n                  onChange={(e) => setCampaignForm(prev => ({ ...prev, name: e.target.value }))}\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">WhatsApp Group</label>\n                <select \n                  className=\"w-full p-2 border rounded-md\"\n                  value={campaignForm.whatsappGroupId}\n                  onChange={(e) => setCampaignForm(prev => ({ ...prev, whatsappGroupId: e.target.value }))}\n                >\n                  <option value=\"\">Select WhatsApp group</option>\n                  {whatsappGroups.filter(group => group.isGroup).map((group) => (\n                    <option key={group.id} value={group.id}>\n                      {group.name}\n                    </option>\n                  ))}\n                </select>\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Message</label>\n              <Textarea\n                placeholder=\"Type your message here...\"\n                rows={4}\n                value={campaignForm.message}\n                onChange={(e) => setCampaignForm(prev => ({ ...prev, message: e.target.value }))}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">Min Interval (seconds)</label>\n                <Input\n                  type=\"number\"\n                  min=\"1\"\n                  max=\"300\"\n                  value={campaignForm.minInterval}\n                  onChange={(e) => setCampaignForm(prev => ({ ...prev, minInterval: parseInt(e.target.value) || 1 }))}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">Max Interval (seconds)</label>\n                <Input\n                  type=\"number\"\n                  min=\"1\"\n                  max=\"300\"\n                  value={campaignForm.maxInterval}\n                  onChange={(e) => setCampaignForm(prev => ({ ...prev, maxInterval: parseInt(e.target.value) || 10 }))}\n                />\n              </div>\n            </div>\n\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button variant=\"outline\" onClick={() => setIsCreateFormOpen(false)}>\n                Cancel\n              </Button>\n              <Button \n                onClick={handleCreateCampaign}\n                disabled={createCampaignMutation.isPending}\n              >\n                {createCampaignMutation.isPending ? \"Creating...\" : \"Create Campaign\"}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Campaigns List */}\n      <div className=\"space-y-4\">\n        {campaignsLoading ? (\n          <div className=\"text-center py-8\">Loading campaigns...</div>\n        ) : campaigns.length === 0 ? (\n          <Card>\n            <CardContent className=\"text-center py-8\">\n              <h3 className=\"text-lg font-semibold mb-2\">No campaigns yet</h3>\n              <p className=\"text-muted-foreground mb-4\">Create your first bulk messaging campaign</p>\n              <Button onClick={() => setIsCreateFormOpen(true)}>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Create Campaign\n              </Button>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid gap-4\">\n            {campaigns.map((campaign) => (\n              <Card key={campaign.id}>\n                <CardHeader>\n                  <div className=\"flex justify-between items-start\">\n                    <div>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        {campaign.name}\n                        <Badge className={getStatusColor(campaign.status)}>\n                          {campaign.status}\n                        </Badge>\n                      </CardTitle>\n                      <p className=\"text-sm text-muted-foreground mt-1\">\n                        Created: {formatDate(campaign.createdAt.toString())}\n                      </p>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      {campaign.status === \"draft\" && (\n                        <Button \n                          size=\"sm\" \n                          onClick={() => executeCampaignMutation.mutate(campaign.id)}\n                          disabled={executeCampaignMutation.isPending}\n                        >\n                          <Play className=\"h-4 w-4 mr-1\" />\n                          Start\n                        </Button>\n                      )}\n                      {(campaign.status === \"completed\" || campaign.status === \"failed\") && (\n                        <>\n                          <Button \n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => restartCampaignMutation.mutate(campaign)}\n                            disabled={restartCampaignMutation.isPending}\n                          >\n                            <RotateCcw className=\"h-4 w-4 mr-1\" />\n                            Restart\n                          </Button>\n                          <Button \n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => deleteCampaignMutation.mutate(campaign.id)}\n                            disabled={deleteCampaignMutation.isPending}\n                            className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                          >\n                            <Trash2 className=\"h-4 w-4 mr-1\" />\n                            Delete\n                          </Button>\n                        </>\n                      )}\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <h4 className=\"font-medium text-sm mb-1\">Message Preview</h4>\n                      <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                        {campaign.message}\n                      </p>\n                    </div>\n\n                    {/* Progress Section */}\n                    {campaign.totalTargets > 0 && (\n                      <div className=\"space-y-3\">\n                        <div className=\"flex justify-between items-center text-sm\">\n                          <span className=\"font-medium\">Progress</span>\n                          <span className=\"text-muted-foreground\">\n                            {campaign.sentCount} / {campaign.totalTargets} \n                            ({Math.round((campaign.sentCount / campaign.totalTargets) * 100)}%)\n                          </span>\n                        </div>\n                        <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                          <div \n                            className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\" \n                            style={{\n                              width: `${(campaign.sentCount / campaign.totalTargets) * 100}%`\n                            }}\n                          ></div>\n                        </div>\n                        <div className=\"flex justify-between text-xs\">\n                          <span className=\"text-green-600 font-medium\">✓ {campaign.sentCount} sent</span>\n                          <span className=\"text-red-600 font-medium\">✗ {campaign.failedCount} failed</span>\n                          <span className=\"text-blue-600 font-medium\">⏳ {campaign.totalTargets - campaign.sentCount} remaining</span>\n                        </div>\n                        {campaign.status === \"running\" && (\n                          <div className=\"text-xs text-muted-foreground flex justify-between items-center mt-2 pt-2 border-t\">\n                            <span>Status: Active</span>\n                            <span className=\"flex items-center\">\n                              <span className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse mr-2\"></span>\n                              Sending messages...\n                            </span>\n                          </div>\n                        )}\n                        {campaign.status === \"completed\" && (\n                          <div className=\"text-xs text-green-600 font-medium mt-2 pt-2 border-t\">\n                            ✅ Campaign completed successfully\n                          </div>\n                        )}\n                      </div>\n                    )}\n\n\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Analytics Summary */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex justify-between items-center\">\n            <CardTitle>Campaign Analytics</CardTitle>\n            <p className=\"text-xs text-muted-foreground\">Last updated: {new Date().toLocaleTimeString()}</p>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-blue-600\">\n                {campaigns.length}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">Total Campaigns</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-green-600\">\n                {campaigns.reduce((sum, c) => sum + c.sentCount, 0)}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">Messages Sent</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-red-600\">\n                {campaigns.reduce((sum, c) => sum + c.failedCount, 0)}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">Failed Messages</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-purple-600\">\n                {campaigns.filter(c => c.status === \"completed\").length}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">Completed</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":18341},"client/src/pages/bulk-campaigns-complex.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Plus, Play, Pause, RotateCcw, Eye, Upload, Send, Calendar, Clock, Target, Settings, Copy, MoreVertical, RefreshCw } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport type { BulkMessageCampaign, ContactGroup } from \"@shared/schema\";\n\ninterface WhatsAppGroup {\n  id: string;\n  name: string;\n  isGroup: boolean;\n  participants?: any[];\n}\n\nexport default function BulkCampaigns() {\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"campaigns\");\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [autoRefresh, setAutoRefresh] = useState(true);\n\n  const [campaignForm, setCampaignForm] = useState({\n    name: \"\",\n    message: \"\",\n    targetType: \"\",\n    contactGroupId: \"\",\n    whatsappGroupId: \"\",\n    scheduleType: \"immediate\",\n    timePost: \"\",\n    scheduleHours: \"\",\n    minInterval: 1,\n    maxInterval: 10\n  });\n\n  // Fetch campaigns with auto-refresh\n  const { data: campaigns = [], isLoading: campaignsLoading, refetch: refetchCampaigns } = useQuery<BulkMessageCampaign[]>({\n    queryKey: [\"/api/bulk-campaigns\"],\n    enabled: true,\n    refetchInterval: autoRefresh ? 3000 : false, // Auto-refresh every 3 seconds when enabled\n    refetchIntervalInBackground: true\n  });\n\n  // Auto-refresh effect for running campaigns\n  useEffect(() => {\n    const hasRunningCampaigns = campaigns.some(c => c.status === \"running\");\n    setAutoRefresh(hasRunningCampaigns);\n  }, [campaigns]);\n\n  // WebSocket integration for real-time updates\n  useEffect(() => {\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    \n    let ws: WebSocket | null = null;\n    \n    const connectWebSocket = () => {\n      try {\n        ws = new WebSocket(wsUrl);\n        \n        ws.onopen = () => {\n          console.log('📡 Campaign WebSocket connected');\n        };\n        \n        ws.onmessage = (event) => {\n          try {\n            const message = JSON.parse(event.data);\n            if (message.type === 'campaign_progress_update') {\n              // Invalidate and refetch campaigns on progress updates\n              queryClient.invalidateQueries({ queryKey: [\"/api/bulk-campaigns\"] });\n            }\n          } catch (error) {\n            console.error('Error parsing WebSocket message:', error);\n          }\n        };\n        \n        ws.onerror = (error) => {\n          console.error('Campaign WebSocket error:', error);\n        };\n        \n        ws.onclose = () => {\n          console.log('📡 Campaign WebSocket disconnected');\n          // Reconnect after 3 seconds\n          setTimeout(connectWebSocket, 3000);\n        };\n      } catch (error) {\n        console.error('Failed to create WebSocket connection:', error);\n      }\n    };\n    \n    connectWebSocket();\n    \n    return () => {\n      if (ws && ws.readyState === WebSocket.OPEN) {\n        ws.close();\n      }\n    };\n  }, []);\n\n  // Fetch contact groups\n  const { data: contactGroups = [] } = useQuery<ContactGroup[]>({\n    queryKey: [\"/api/contact-groups\"],\n    enabled: true\n  });\n\n  // Fetch WhatsApp groups\n  const { data: whatsappGroups = [] } = useQuery<WhatsAppGroup[]>({\n    queryKey: [\"/api/groups\"],\n    enabled: true\n  });\n\n  // Fetch campaign targets count\n  const { data: targetCount = 0 } = useQuery<number>({\n    queryKey: [\"/api/campaigns/targets\", campaignForm.targetType, campaignForm.contactGroupId, campaignForm.whatsappGroupId],\n    enabled: !!campaignForm.targetType\n  });\n\n  // Create campaign mutation\n  const createCampaignMutation = useMutation({\n    mutationFn: async (formData: FormData) => {\n      const response = await fetch(\"/api/campaigns/create\", {\n        method: \"POST\",\n        body: formData\n      });\n      if (!response.ok) throw new Error('Failed to create campaign');\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Campaign created successfully\" });\n      setIsCreateDialogOpen(false);\n      resetForm();\n      queryClient.invalidateQueries({ queryKey: [\"/api/bulk-campaigns\"] });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message || \"Failed to create campaign\", variant: \"destructive\" });\n    }\n  });\n\n  // Clone campaign mutation\n  const cloneCampaignMutation = useMutation({\n    mutationFn: async (campaign: BulkMessageCampaign) => {\n      const formData = new FormData();\n      formData.append(\"name\", `${campaign.name} (Copy)`);\n      formData.append(\"message\", campaign.message);\n      formData.append(\"targetType\", campaign.targetType);\n      formData.append(\"scheduleType\", campaign.scheduleType);\n      formData.append(\"minInterval\", campaign.minInterval.toString());\n      formData.append(\"maxInterval\", campaign.maxInterval.toString());\n      if (campaign.contactGroupId) formData.append(\"contactGroupId\", campaign.contactGroupId);\n      if (campaign.whatsappGroupId) formData.append(\"whatsappGroupId\", campaign.whatsappGroupId);\n      if (campaign.timePost) formData.append(\"timePost\", campaign.timePost.toString());\n      if (campaign.scheduleHours) formData.append(\"scheduleHours\", campaign.scheduleHours);\n      \n      const response = await fetch(\"/api/campaigns/create\", {\n        method: \"POST\",\n        body: formData\n      });\n      if (!response.ok) throw new Error('Failed to clone campaign');\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Campaign cloned successfully\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bulk-campaigns\"] });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message || \"Failed to clone campaign\", variant: \"destructive\" });\n    }\n  });\n\n  // Execute campaign mutation\n  const executeCampaignMutation = useMutation({\n    mutationFn: async (campaignId: string) => {\n      return apiRequest(`/api/campaigns/${campaignId}/execute`, {\n        method: \"POST\"\n      });\n    },\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Campaign started successfully\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bulk-campaigns\"] });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message || \"Failed to start campaign\", variant: \"destructive\" });\n    }\n  });\n\n  // Pause campaign mutation\n  const pauseCampaignMutation = useMutation({\n    mutationFn: async (campaignId: string) => {\n      return apiRequest(`/api/campaigns/${campaignId}/pause`, {\n        method: \"POST\"\n      });\n    },\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Campaign paused successfully\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bulk-campaigns\"] });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message || \"Failed to pause campaign\", variant: \"destructive\" });\n    }\n  });\n\n  // Resume campaign mutation\n  const resumeCampaignMutation = useMutation({\n    mutationFn: async (campaignId: string) => {\n      return apiRequest(`/api/campaigns/${campaignId}/resume`, {\n        method: \"POST\"\n      });\n    },\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Campaign resumed successfully\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bulk-campaigns\"] });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message || \"Failed to resume campaign\", variant: \"destructive\" });\n    }\n  });\n\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      setSelectedFile(file);\n    }\n  };\n\n  const resetForm = () => {\n    setCampaignForm({\n      name: \"\",\n      message: \"\",\n      targetType: \"\",\n      contactGroupId: \"\",\n      whatsappGroupId: \"\",\n      scheduleType: \"immediate\",\n      timePost: \"\",\n      scheduleHours: \"\",\n      minInterval: 1,\n      maxInterval: 10\n    });\n    setSelectedFile(null);\n  };\n\n  const handleCreateCampaign = () => {\n    if (!campaignForm.name || !campaignForm.message) {\n      toast({ title: \"Error\", description: \"Campaign name and message are required\", variant: \"destructive\" });\n      return;\n    }\n\n    if (campaignForm.targetType === \"contact_group\" && !campaignForm.contactGroupId) {\n      toast({ title: \"Error\", description: \"Please select a contact group\", variant: \"destructive\" });\n      return;\n    }\n\n    if (campaignForm.targetType === \"whatsapp_group\" && !campaignForm.whatsappGroupId) {\n      toast({ title: \"Error\", description: \"Please select a WhatsApp group\", variant: \"destructive\" });\n      return;\n    }\n\n    const formData = new FormData();\n    Object.entries(campaignForm).forEach(([key, value]) => {\n      if (Array.isArray(value)) {\n        formData.append(key, JSON.stringify(value));\n      } else {\n        formData.append(key, value.toString());\n      }\n    });\n\n    if (selectedFile) {\n      formData.append(\"media\", selectedFile);\n    }\n\n    createCampaignMutation.mutate(formData);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"draft\": return \"bg-gray-100 text-gray-800\";\n      case \"running\": return \"bg-blue-100 text-blue-800\";\n      case \"paused\": return \"bg-yellow-100 text-yellow-800\";\n      case \"completed\": return \"bg-green-100 text-green-800\";\n      case \"failed\": return \"bg-red-100 text-red-800\";\n      case \"scheduled\": return \"bg-purple-100 text-purple-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleString();\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Bulk Campaigns</h1>\n          <p className=\"text-muted-foreground\">Create and manage bulk messaging campaigns</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button\n            variant=\"outline\"\n            onClick={() => refetchCampaigns()}\n            disabled={campaignsLoading}\n          >\n            <RefreshCw className={`h-4 w-4 mr-2 ${campaignsLoading ? 'animate-spin' : ''}`} />\n            Refresh\n          </Button>\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Create Campaign\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>Create New Campaign</DialogTitle>\n              </DialogHeader>\n              \n              <Tabs defaultValue=\"basic\" className=\"w-full\">\n                <TabsList className=\"grid w-full grid-cols-4\">\n                  <TabsTrigger value=\"basic\">Basic Info</TabsTrigger>\n                  <TabsTrigger value=\"targets\">Targets</TabsTrigger>\n                  <TabsTrigger value=\"scheduling\">Scheduling</TabsTrigger>\n                  <TabsTrigger value=\"media\">Media</TabsTrigger>\n                </TabsList>\n                \n                <TabsContent value=\"basic\" className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"campaignName\">Campaign Name</Label>\n                    <Input\n                      id=\"campaignName\"\n                      placeholder=\"Enter campaign name\"\n                      value={campaignForm.name}\n                      onChange={(e) => setCampaignForm(prev => ({ ...prev, name: e.target.value }))}\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"message\">Message</Label>\n                    <Textarea\n                      id=\"message\"\n                      placeholder=\"Type your message here...\"\n                      rows={6}\n                      value={campaignForm.message}\n                      onChange={(e) => setCampaignForm(prev => ({ ...prev, message: e.target.value }))}\n                    />\n                  </div>\n                </TabsContent>\n                \n                <TabsContent value=\"targets\" className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label>Target Type</Label>\n                    <Select\n                      value={campaignForm.targetType}\n                      onValueChange={(value) => setCampaignForm(prev => ({ ...prev, targetType: value, contactGroupId: \"\", whatsappGroupId: \"\" }))}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select target type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"contact_group\">Contact Group</SelectItem>\n                        <SelectItem value=\"whatsapp_group\">WhatsApp Group</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  {campaignForm.targetType === \"contact_group\" && (\n                    <div className=\"space-y-2\">\n                      <Label>Contact Group</Label>\n                      <Select\n                        value={campaignForm.contactGroupId}\n                        onValueChange={(value) => setCampaignForm(prev => ({ ...prev, contactGroupId: value }))}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select contact group\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {contactGroups.map((group) => (\n                            <SelectItem key={group.id} value={group.id}>\n                              {group.name} ({group.totalContacts} contacts)\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  )}\n\n                  {campaignForm.targetType === \"whatsapp_group\" && (\n                    <div className=\"space-y-2\">\n                      <Label>WhatsApp Group</Label>\n                      <Select\n                        value={campaignForm.whatsappGroupId}\n                        onValueChange={(value) => setCampaignForm(prev => ({ ...prev, whatsappGroupId: value }))}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select WhatsApp group\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {whatsappGroups.filter(group => group.isGroup).map((group) => (\n                            <SelectItem key={group.id} value={group.id}>\n                              {group.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  )}\n\n                  {targetCount > 0 && (\n                    <div className=\"p-3 bg-blue-50 rounded-lg\">\n                      <p className=\"text-sm text-blue-800\">\n                        <Target className=\"inline w-4 h-4 mr-2\" />\n                        This campaign will target {targetCount} recipients\n                      </p>\n                    </div>\n                  )}\n                </TabsContent>\n                \n                <TabsContent value=\"scheduling\" className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label>Schedule Type</Label>\n                    <Select\n                      value={campaignForm.scheduleType}\n                      onValueChange={(value) => setCampaignForm(prev => ({ ...prev, scheduleType: value }))}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select schedule type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"immediate\">Send Immediately</SelectItem>\n                        <SelectItem value=\"scheduled\">Schedule for Later</SelectItem>\n                        <SelectItem value=\"odd_hours\">Send in Odd Hours (9, 11, 13, 15)</SelectItem>\n                        <SelectItem value=\"even_hours\">Send in Even Hours (10, 12, 14, 16)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  {campaignForm.scheduleType === \"scheduled\" && (\n                    <div className=\"space-y-2\">\n                      <Label>Schedule Time</Label>\n                      <Input\n                        type=\"datetime-local\"\n                        value={campaignForm.timePost}\n                        onChange={(e) => setCampaignForm(prev => ({ ...prev, timePost: e.target.value }))}\n                      />\n                    </div>\n                  )}\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label>Min Interval (seconds)</Label>\n                      <Input\n                        type=\"number\"\n                        min=\"1\"\n                        max=\"300\"\n                        value={campaignForm.minInterval}\n                        onChange={(e) => setCampaignForm(prev => ({ ...prev, minInterval: parseInt(e.target.value) || 1 }))}\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label>Max Interval (seconds)</Label>\n                      <Input\n                        type=\"number\"\n                        min=\"1\"\n                        max=\"300\"\n                        value={campaignForm.maxInterval}\n                        onChange={(e) => setCampaignForm(prev => ({ ...prev, maxInterval: parseInt(e.target.value) || 10 }))}\n                      />\n                    </div>\n                  </div>\n                </TabsContent>\n                \n                <TabsContent value=\"media\" className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label>Media Attachment (Optional)</Label>\n                    <Input\n                      type=\"file\"\n                      accept=\"image/*,video/*,audio/*,.pdf,.doc,.docx\"\n                      onChange={handleFileSelect}\n                    />\n                    {selectedFile && (\n                      <div className=\"text-sm text-muted-foreground\">\n                        Selected: {selectedFile.name} ({(selectedFile.size / 1024 / 1024).toFixed(2)} MB)\n                      </div>\n                    )}\n                  </div>\n                </TabsContent>\n              </Tabs>\n\n              <div className=\"flex justify-end space-x-2 pt-4\">\n                <Button variant=\"outline\" onClick={() => setIsCreateDialogOpen(false)}>\n                  Cancel\n                </Button>\n                <Button \n                  onClick={handleCreateCampaign}\n                  disabled={createCampaignMutation.isPending}\n                >\n                  {createCampaignMutation.isPending ? \"Creating...\" : \"Create Campaign\"}\n                </Button>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList>\n          <TabsTrigger value=\"campaigns\">Campaigns</TabsTrigger>\n          <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"campaigns\">\n          <div className=\"space-y-4\">\n            {campaignsLoading ? (\n              <div className=\"text-center py-8\">Loading campaigns...</div>\n            ) : campaigns.length === 0 ? (\n              <Card>\n                <CardContent className=\"text-center py-8\">\n                  <h3 className=\"text-lg font-semibold mb-2\">No campaigns yet</h3>\n                  <p className=\"text-muted-foreground mb-4\">Create your first bulk messaging campaign</p>\n                  <Button onClick={() => setIsCreateDialogOpen(true)}>\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Create Campaign\n                  </Button>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"grid gap-4\">\n                {campaigns.map((campaign) => (\n                  <Card key={campaign.id}>\n                    <CardHeader>\n                      <div className=\"flex justify-between items-start\">\n                        <div>\n                          <CardTitle className=\"flex items-center gap-2\">\n                            {campaign.name}\n                            <Badge className={getStatusColor(campaign.status)}>\n                              {campaign.status}\n                            </Badge>\n                          </CardTitle>\n                          <p className=\"text-sm text-muted-foreground mt-1\">\n                            Created: {formatDate(campaign.createdAt.toString())}\n                            {campaign.lastExecuted && (\n                              <span className=\"ml-4\">\n                                Last executed: {formatDate(campaign.lastExecuted.toString())}\n                              </span>\n                            )}\n                          </p>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          {campaign.status === \"draft\" && (\n                            <Button \n                              size=\"sm\" \n                              onClick={() => executeCampaignMutation.mutate(campaign.id)}\n                              disabled={executeCampaignMutation.isPending}\n                            >\n                              <Play className=\"h-4 w-4 mr-1\" />\n                              Start\n                            </Button>\n                          )}\n                          {campaign.status === \"running\" && (\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\"\n                              onClick={() => pauseCampaignMutation.mutate(campaign.id)}\n                              disabled={pauseCampaignMutation.isPending}\n                            >\n                              <Pause className=\"h-4 w-4 mr-1\" />\n                              Pause\n                            </Button>\n                          )}\n                          {campaign.status === \"paused\" && (\n                            <Button \n                              size=\"sm\"\n                              onClick={() => resumeCampaignMutation.mutate(campaign.id)}\n                              disabled={resumeCampaignMutation.isPending}\n                            >\n                              <Play className=\"h-4 w-4 mr-1\" />\n                              Resume\n                            </Button>\n                          )}\n                          {(campaign.status === \"completed\" || campaign.status === \"failed\") && (\n                            <Button \n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => cloneCampaignMutation.mutate(campaign)}\n                              disabled={cloneCampaignMutation.isPending}\n                            >\n                              <Copy className=\"h-4 w-4 mr-1\" />\n                              Clone & Reuse\n                            </Button>\n                          )}\n                          <DropdownMenu>\n                            <DropdownMenuTrigger asChild>\n                              <Button size=\"sm\" variant=\"outline\">\n                                <MoreVertical className=\"h-4 w-4\" />\n                              </Button>\n                            </DropdownMenuTrigger>\n                            <DropdownMenuContent>\n                              <DropdownMenuItem onClick={() => cloneCampaignMutation.mutate(campaign)}>\n                                <Copy className=\"h-4 w-4 mr-2\" />\n                                Clone Campaign\n                              </DropdownMenuItem>\n                            </DropdownMenuContent>\n                          </DropdownMenu>\n                        </div>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        <div>\n                          <h4 className=\"font-medium text-sm mb-1\">Message Preview</h4>\n                          <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                            {campaign.message}\n                          </p>\n                        </div>\n\n                        {/* Progress Section */}\n                        {campaign.totalTargets > 0 && (\n                          <div className=\"space-y-3\">\n                            <div className=\"flex justify-between items-center text-sm\">\n                              <span className=\"font-medium\">Progress</span>\n                              <span className=\"text-muted-foreground\">\n                                {campaign.sentCount + campaign.failedCount} / {campaign.totalTargets} \n                                ({Math.round(((campaign.sentCount + campaign.failedCount) / campaign.totalTargets) * 100)}%)\n                              </span>\n                            </div>\n                            <Progress \n                              value={((campaign.sentCount + campaign.failedCount) / campaign.totalTargets) * 100}\n                              className=\"h-3\"\n                            />\n                            <div className=\"flex justify-between text-xs\">\n                              <span className=\"text-green-600 font-medium\">✓ {campaign.sentCount} sent</span>\n                              <span className=\"text-red-600 font-medium\">✗ {campaign.failedCount} failed</span>\n                              <span className=\"text-blue-600 font-medium\">⏳ {campaign.totalTargets - campaign.sentCount - campaign.failedCount} remaining</span>\n                            </div>\n                            {campaign.status === \"running\" && (\n                              <div className=\"text-xs text-muted-foreground flex justify-between items-center mt-2 pt-2 border-t\">\n                                <span>Status: Active</span>\n                                <span className=\"flex items-center\">\n                                  <span className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse mr-2\"></span>\n                                  Sending messages...\n                                </span>\n                              </div>\n                            )}\n                            {campaign.status === \"completed\" && (\n                              <div className=\"text-xs text-green-600 font-medium mt-2 pt-2 border-t\">\n                                ✅ Campaign completed successfully\n                              </div>\n                            )}\n                          </div>\n                        )}\n\n                        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                          <div>\n                            <span className=\"font-medium\">Target Type:</span>\n                            <p className=\"text-muted-foreground capitalize\">\n                              {campaign.targetType.replace(\"_\", \" \")}\n                            </p>\n                          </div>\n                          <div>\n                            <span className=\"font-medium\">Total Targets:</span>\n                            <p className=\"text-muted-foreground\">{campaign.totalTargets}</p>\n                          </div>\n                          <div>\n                            <span className=\"font-medium\">Sent:</span>\n                            <p className=\"text-green-600 font-medium\">\n                              {campaign.sentCount}\n                              {campaign.status === \"running\" && <span className=\"animate-pulse ml-1\">●</span>}\n                            </p>\n                          </div>\n                          <div>\n                            <span className=\"font-medium\">Failed:</span>\n                            <p className=\"text-red-600 font-medium\">{campaign.failedCount}</p>\n                          </div>\n                        </div>\n\n                        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                          <div>\n                            <span className=\"font-medium\">Schedule:</span>\n                            <p className=\"text-muted-foreground capitalize\">\n                              {campaign.scheduleType.replace(\"_\", \" \")}\n                            </p>\n                          </div>\n                          <div>\n                            <span className=\"font-medium\">Interval:</span>\n                            <p className=\"text-muted-foreground\">\n                              {campaign.minInterval}-{campaign.maxInterval}s\n                            </p>\n                          </div>\n                          {campaign.timePost && (\n                            <div>\n                              <span className=\"font-medium\">Scheduled For:</span>\n                              <p className=\"text-muted-foreground\">\n                                {formatDate(campaign.timePost.toString())}\n                              </p>\n                            </div>\n                          )}\n                          {campaign.mediaUrl && (\n                            <div>\n                              <span className=\"font-medium\">Media:</span>\n                              <p className=\"text-muted-foreground capitalize\">\n                                {campaign.mediaType || \"Attached\"}\n                              </p>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"analytics\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Campaign Analytics</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-blue-600\">\n                    {campaigns.length}\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">Total Campaigns</p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-green-600\">\n                    {campaigns.reduce((sum, c) => sum + c.sentCount, 0)}\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">Messages Sent</p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-red-600\">\n                    {campaigns.reduce((sum, c) => sum + c.failedCount, 0)}\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">Failed Messages</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":32688},"client/src/pages/bulk-campaigns-old.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Plus, Play, Pause, RotateCcw, Eye, Upload, Send, Calendar, Clock, Target, Settings, Copy, MoreVertical, RefreshCw } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport type { BulkMessageCampaign, ContactGroup } from \"@shared/schema\";\n\ninterface Group {\n  id: string;\n  name: string;\n  isGroup: boolean;\n  participants?: any[];\n}\n\nexport default function BulkCampaigns() {\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"campaigns\");\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [autoRefresh, setAutoRefresh] = useState(true);\n\n  // Campaign form state\n  const [campaignForm, setCampaignForm] = useState({\n    name: \"\",\n    message: \"\",\n    targetType: \"contact_group\",\n    contactGroupId: \"\",\n    whatsappGroupId: \"\",\n    scheduleType: \"immediate\",\n    timePost: \"\",\n    scheduleHours: [] as string[],\n    minInterval: 1,\n    maxInterval: 10\n  });\n\n  // Fetch campaigns with auto-refresh\n  const { data: campaigns = [], isLoading: campaignsLoading, refetch: refetchCampaigns } = useQuery<BulkMessageCampaign[]>({\n    queryKey: [\"/api/bulk-campaigns\"],\n    enabled: true,\n    refetchInterval: autoRefresh ? 3000 : false, // Auto-refresh every 3 seconds when enabled\n    refetchIntervalInBackground: true\n  });\n\n  // Auto-refresh effect for running campaigns\n  useEffect(() => {\n    const hasRunningCampaigns = campaigns.some(c => c.status === \"running\");\n    setAutoRefresh(hasRunningCampaigns);\n  }, [campaigns]);\n\n  // WebSocket integration for real-time updates\n  useEffect(() => {\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    \n    let ws: WebSocket | null = null;\n    \n    const connectWebSocket = () => {\n      try {\n        ws = new WebSocket(wsUrl);\n        \n        ws.onopen = () => {\n          console.log('📡 Campaign WebSocket connected');\n        };\n        \n        ws.onmessage = (event) => {\n          try {\n            const message = JSON.parse(event.data);\n            if (message.type === 'campaign_progress_update') {\n              // Invalidate and refetch campaigns on progress updates\n              queryClient.invalidateQueries({ queryKey: [\"/api/bulk-campaigns\"] });\n            }\n          } catch (error) {\n            console.error('Error parsing WebSocket message:', error);\n          }\n        };\n        \n        ws.onerror = (error) => {\n          console.error('Campaign WebSocket error:', error);\n        };\n        \n        ws.onclose = () => {\n          console.log('📡 Campaign WebSocket disconnected');\n          // Reconnect after 3 seconds\n          setTimeout(connectWebSocket, 3000);\n        };\n      } catch (error) {\n        console.error('Failed to create WebSocket connection:', error);\n      }\n    };\n    \n    connectWebSocket();\n    \n    return () => {\n      if (ws && ws.readyState === WebSocket.OPEN) {\n        ws.close();\n      }\n    };\n  }, []);\n\n  // Fetch contact groups\n  const { data: contactGroups = [] } = useQuery<ContactGroup[]>({\n    queryKey: [\"/api/contact-groups\"],\n    enabled: campaignForm.targetType === \"contact_group\"\n  });\n\n  // Fetch WhatsApp groups\n  const { data: whatsappGroups = [] } = useQuery<Group[]>({\n    queryKey: [\"/api/groups\"],\n    enabled: campaignForm.targetType === \"whatsapp_group\"\n  });\n\n  // Fetch campaign targets preview\n  const { data: campaignTargets = [] } = useQuery<Array<{id: string, name?: string, count?: number}>>({\n    queryKey: [\"/api/campaigns/targets\", campaignForm.targetType, campaignForm.contactGroupId, campaignForm.whatsappGroupId],\n    enabled: !!campaignForm.targetType\n  });\n\n  // Create campaign mutation\n  const createCampaignMutation = useMutation({\n    mutationFn: async (formData: FormData) => {\n      const response = await fetch(\"/api/campaigns/create\", {\n        method: \"POST\",\n        body: formData\n      });\n      if (!response.ok) throw new Error('Failed to create campaign');\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Campaign created successfully\" });\n      setIsCreateDialogOpen(false);\n      resetForm();\n      queryClient.invalidateQueries({ queryKey: [\"/api/bulk-campaigns\"] });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message || \"Failed to create campaign\", variant: \"destructive\" });\n    }\n  });\n\n  // Clone campaign mutation\n  const cloneCampaignMutation = useMutation({\n    mutationFn: async (campaign: BulkMessageCampaign) => {\n      const formData = new FormData();\n      formData.append(\"name\", `${campaign.name} (Copy)`);\n      formData.append(\"message\", campaign.message);\n      formData.append(\"targetType\", campaign.targetType);\n      formData.append(\"scheduleType\", campaign.scheduleType);\n      formData.append(\"minInterval\", campaign.minInterval.toString());\n      formData.append(\"maxInterval\", campaign.maxInterval.toString());\n      if (campaign.contactGroupId) formData.append(\"contactGroupId\", campaign.contactGroupId);\n      if (campaign.whatsappGroupId) formData.append(\"whatsappGroupId\", campaign.whatsappGroupId);\n      if (campaign.timePost) formData.append(\"timePost\", campaign.timePost.toString());\n      if (campaign.scheduleHours) formData.append(\"scheduleHours\", campaign.scheduleHours);\n      \n      const response = await fetch(\"/api/campaigns/create\", {\n        method: \"POST\",\n        body: formData\n      });\n      if (!response.ok) throw new Error('Failed to clone campaign');\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Campaign cloned successfully\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bulk-campaigns\"] });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message || \"Failed to clone campaign\", variant: \"destructive\" });\n    }\n  });\n\n  // Campaign control mutations\n  const executeCampaignMutation = useMutation({\n    mutationFn: async (campaignId: string) => {\n      return apiRequest(`/api/campaigns/${campaignId}/execute`, \"POST\");\n    },\n    onSuccess: (data: any) => {\n      toast({ \n        title: \"Campaign Started\", \n        description: `Executing ${data.totalTargets} targets. Estimated duration: ${data.estimatedDuration}` \n      });\n      refetchCampaigns();\n    }\n  });\n\n  const pauseCampaignMutation = useMutation({\n    mutationFn: async (campaignId: string) => {\n      return apiRequest(`/api/campaigns/${campaignId}/pause`, \"POST\");\n    },\n    onSuccess: () => {\n      toast({ title: \"Campaign Paused\", description: \"Campaign execution paused\" });\n      refetchCampaigns();\n    }\n  });\n\n  const resumeCampaignMutation = useMutation({\n    mutationFn: async (campaignId: string) => {\n      return apiRequest(`/api/campaigns/${campaignId}/resume`, \"POST\");\n    },\n    onSuccess: () => {\n      toast({ title: \"Campaign Resumed\", description: \"Campaign execution resumed\" });\n      refetchCampaigns();\n    }\n  });\n\n  const resetForm = () => {\n    setCampaignForm({\n      name: \"\",\n      message: \"\",\n      targetType: \"contact_group\",\n      contactGroupId: \"\",\n      whatsappGroupId: \"\",\n      scheduleType: \"immediate\",\n      timePost: \"\",\n      scheduleHours: [],\n      minInterval: 1,\n      maxInterval: 10\n    });\n    setSelectedFile(null);\n  };\n\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      setSelectedFile(file);\n    }\n  };\n\n  const handleCreateCampaign = () => {\n    if (!campaignForm.name || !campaignForm.message) {\n      toast({ title: \"Error\", description: \"Campaign name and message are required\", variant: \"destructive\" });\n      return;\n    }\n\n    if (campaignForm.targetType === \"contact_group\" && !campaignForm.contactGroupId) {\n      toast({ title: \"Error\", description: \"Please select a contact group\", variant: \"destructive\" });\n      return;\n    }\n\n    if (campaignForm.targetType === \"whatsapp_group\" && !campaignForm.whatsappGroupId) {\n      toast({ title: \"Error\", description: \"Please select a WhatsApp group\", variant: \"destructive\" });\n      return;\n    }\n\n    const formData = new FormData();\n    Object.entries(campaignForm).forEach(([key, value]) => {\n      if (Array.isArray(value)) {\n        formData.append(key, JSON.stringify(value));\n      } else {\n        formData.append(key, value.toString());\n      }\n    });\n\n    if (selectedFile) {\n      formData.append(\"media\", selectedFile);\n    }\n\n    createCampaignMutation.mutate(formData);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"draft\": return \"bg-gray-100 text-gray-800\";\n      case \"running\": return \"bg-blue-100 text-blue-800\";\n      case \"paused\": return \"bg-yellow-100 text-yellow-800\";\n      case \"completed\": return \"bg-green-100 text-green-800\";\n      case \"failed\": return \"bg-red-100 text-red-800\";\n      case \"scheduled\": return \"bg-purple-100 text-purple-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleString();\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Bulk Campaigns</h1>\n          <p className=\"text-muted-foreground\">Create and manage bulk messaging campaigns</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button\n            variant=\"outline\"\n            onClick={() => refetchCampaigns()}\n            disabled={campaignsLoading}\n          >\n            <RefreshCw className={`h-4 w-4 mr-2 ${campaignsLoading ? 'animate-spin' : ''}`} />\n            Refresh\n          </Button>\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Create Campaign\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Create New Campaign</DialogTitle>\n            </DialogHeader>\n            \n            <Tabs defaultValue=\"basic\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-4\">\n                <TabsTrigger value=\"basic\">Basic Info</TabsTrigger>\n                <TabsTrigger value=\"targets\">Targets</TabsTrigger>\n                <TabsTrigger value=\"scheduling\">Scheduling</TabsTrigger>\n                <TabsTrigger value=\"media\">Media</TabsTrigger>\n              </TabsList>\n              \n              <TabsContent value=\"basic\" className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"campaignName\">Campaign Name</Label>\n                  <Input\n                    id=\"campaignName\"\n                    placeholder=\"Enter campaign name\"\n                    value={campaignForm.name}\n                    onChange={(e) => setCampaignForm(prev => ({ ...prev, name: e.target.value }))}\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"message\">Message</Label>\n                  <Textarea\n                    id=\"message\"\n                    placeholder=\"Type your message here...\"\n                    rows={6}\n                    value={campaignForm.message}\n                    onChange={(e) => setCampaignForm(prev => ({ ...prev, message: e.target.value }))}\n                  />\n                </div>\n              </TabsContent>\n              \n              <TabsContent value=\"targets\" className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label>Target Type</Label>\n                  <Select \n                    value={campaignForm.targetType} \n                    onValueChange={(value) => setCampaignForm(prev => ({ ...prev, targetType: value }))}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"contact_group\">Contact Group</SelectItem>\n                      <SelectItem value=\"local_contacts\">All Local Contacts</SelectItem>\n                      <SelectItem value=\"whatsapp_group\">WhatsApp Group</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {campaignForm.targetType === \"contact_group\" && (\n                  <div className=\"space-y-2\">\n                    <Label>Contact Group</Label>\n                    <Select \n                      value={campaignForm.contactGroupId} \n                      onValueChange={(value) => setCampaignForm(prev => ({ ...prev, contactGroupId: value }))}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select contact group\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {contactGroups.map((group) => (\n                          <SelectItem key={group.id} value={group.id}>\n                            {group.name} ({group.validContacts} contacts)\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                )}\n\n                {campaignForm.targetType === \"whatsapp_group\" && (\n                  <div className=\"space-y-2\">\n                    <Label>WhatsApp Group</Label>\n                    <Select \n                      value={campaignForm.whatsappGroupId} \n                      onValueChange={(value) => setCampaignForm(prev => ({ ...prev, whatsappGroupId: value }))}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select WhatsApp group\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {whatsappGroups.map((group) => (\n                          <SelectItem key={group.id} value={group.id}>\n                            {group.name} ({group.participants?.length || 0} members)\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                )}\n\n                {campaignTargets.length > 0 && (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-sm\">Target Preview</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      {campaignTargets.map((target) => (\n                        <div key={target.id} className=\"flex justify-between items-center py-2\">\n                          <span>{target.name}</span>\n                          <Badge variant=\"outline\">{target.count} targets</Badge>\n                        </div>\n                      ))}\n                    </CardContent>\n                  </Card>\n                )}\n              </TabsContent>\n              \n              <TabsContent value=\"scheduling\" className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label>Schedule Type</Label>\n                  <Select \n                    value={campaignForm.scheduleType} \n                    onValueChange={(value) => setCampaignForm(prev => ({ ...prev, scheduleType: value }))}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"immediate\">Send Immediately</SelectItem>\n                      <SelectItem value=\"scheduled\">Schedule for Specific Time</SelectItem>\n                      <SelectItem value=\"daytime\">Daytime Hours (6AM-6PM)</SelectItem>\n                      <SelectItem value=\"nighttime\">Nighttime Hours (7PM-5AM)</SelectItem>\n                      <SelectItem value=\"odd_hours\">Odd Hours Only</SelectItem>\n                      <SelectItem value=\"even_hours\">Even Hours Only</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {campaignForm.scheduleType === \"scheduled\" && (\n                  <div className=\"space-y-2\">\n                    <Label>Schedule Time</Label>\n                    <Input\n                      type=\"datetime-local\"\n                      value={campaignForm.timePost}\n                      onChange={(e) => setCampaignForm(prev => ({ ...prev, timePost: e.target.value }))}\n                    />\n                  </div>\n                )}\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label>Min Interval (seconds)</Label>\n                    <Input\n                      type=\"number\"\n                      min=\"1\"\n                      max=\"300\"\n                      value={campaignForm.minInterval}\n                      onChange={(e) => setCampaignForm(prev => ({ ...prev, minInterval: parseInt(e.target.value) || 1 }))}\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label>Max Interval (seconds)</Label>\n                    <Input\n                      type=\"number\"\n                      min=\"1\"\n                      max=\"300\"\n                      value={campaignForm.maxInterval}\n                      onChange={(e) => setCampaignForm(prev => ({ ...prev, maxInterval: parseInt(e.target.value) || 10 }))}\n                    />\n                  </div>\n                </div>\n              </TabsContent>\n              \n              <TabsContent value=\"media\" className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label>Media Attachment (Optional)</Label>\n                  <Input\n                    type=\"file\"\n                    accept=\"image/*,video/*,audio/*,.pdf,.doc,.docx\"\n                    onChange={handleFileSelect}\n                  />\n                  {selectedFile && (\n                    <div className=\"text-sm text-muted-foreground\">\n                      Selected: {selectedFile.name} ({(selectedFile.size / 1024 / 1024).toFixed(2)} MB)\n                    </div>\n                  )}\n                </div>\n              </TabsContent>\n            </Tabs>\n\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button variant=\"outline\" onClick={() => setIsCreateDialogOpen(false)}>\n                Cancel\n              </Button>\n              <Button \n                onClick={handleCreateCampaign}\n                disabled={createCampaignMutation.isPending}\n              >\n                {createCampaignMutation.isPending ? \"Creating...\" : \"Create Campaign\"}\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList>\n          <TabsTrigger value=\"campaigns\">Campaigns</TabsTrigger>\n          <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"campaigns\">\n          <div className=\"space-y-4\">\n            {campaignsLoading ? (\n              <div className=\"text-center py-8\">Loading campaigns...</div>\n            ) : campaigns.length === 0 ? (\n              <Card>\n                <CardContent className=\"text-center py-8\">\n                  <h3 className=\"text-lg font-semibold mb-2\">No campaigns yet</h3>\n                  <p className=\"text-muted-foreground mb-4\">Create your first bulk messaging campaign</p>\n                  <Button onClick={() => setIsCreateDialogOpen(true)}>\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Create Campaign\n                  </Button>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"grid gap-4\">\n                {campaigns.map((campaign) => (\n                  <Card key={campaign.id}>\n                    <CardHeader>\n                      <div className=\"flex justify-between items-start\">\n                        <div>\n                          <CardTitle className=\"flex items-center gap-2\">\n                            {campaign.name}\n                            <Badge className={getStatusColor(campaign.status)}>\n                              {campaign.status}\n                            </Badge>\n                          </CardTitle>\n                          <p className=\"text-sm text-muted-foreground mt-1\">\n                            Created: {formatDate(campaign.createdAt.toString())}\n                            {campaign.lastExecuted && (\n                              <span className=\"ml-4\">\n                                Last executed: {formatDate(campaign.lastExecuted.toString())}\n                              </span>\n                            )}\n                          </p>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          {campaign.status === \"draft\" && (\n                            <Button \n                              size=\"sm\" \n                              onClick={() => executeCampaignMutation.mutate(campaign.id)}\n                              disabled={executeCampaignMutation.isPending}\n                            >\n                              <Play className=\"h-4 w-4 mr-1\" />\n                              Start\n                            </Button>\n                          )}\n                          {campaign.status === \"running\" && (\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\"\n                              onClick={() => pauseCampaignMutation.mutate(campaign.id)}\n                              disabled={pauseCampaignMutation.isPending}\n                            >\n                              <Pause className=\"h-4 w-4 mr-1\" />\n                              Pause\n                            </Button>\n                          )}\n                          {campaign.status === \"paused\" && (\n                            <Button \n                              size=\"sm\"\n                              onClick={() => resumeCampaignMutation.mutate(campaign.id)}\n                              disabled={resumeCampaignMutation.isPending}\n                            >\n                              <Play className=\"h-4 w-4 mr-1\" />\n                              Resume\n                            </Button>\n                          )}\n                          {(campaign.status === \"completed\" || campaign.status === \"failed\") && (\n                            <Button \n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => cloneCampaignMutation.mutate(campaign)}\n                              disabled={cloneCampaignMutation.isPending}\n                            >\n                              <Copy className=\"h-4 w-4 mr-1\" />\n                              Clone & Reuse\n                            </Button>\n                          )}\n                          <DropdownMenu>\n                            <DropdownMenuTrigger asChild>\n                              <Button size=\"sm\" variant=\"outline\">\n                                <MoreVertical className=\"h-4 w-4\" />\n                              </Button>\n                            </DropdownMenuTrigger>\n                            <DropdownMenuContent>\n                              <DropdownMenuItem onClick={() => cloneCampaignMutation.mutate(campaign)}>\n                                <Copy className=\"h-4 w-4 mr-2\" />\n                                Clone Campaign\n                              </DropdownMenuItem>\n                            </DropdownMenuContent>\n                          </DropdownMenu>\n                        </div>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        <div>\n                          <h4 className=\"font-medium text-sm mb-1\">Message Preview</h4>\n                          <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                            {campaign.message}\n                          </p>\n                        </div>\n\n                        {/* Progress Section */}\n                        {campaign.totalTargets > 0 && (\n                          <div className=\"space-y-3\">\n                            <div className=\"flex justify-between items-center text-sm\">\n                              <span className=\"font-medium\">Progress</span>\n                              <span className=\"text-muted-foreground\">\n                                {campaign.sentCount + campaign.failedCount} / {campaign.totalTargets} \n                                ({Math.round(((campaign.sentCount + campaign.failedCount) / campaign.totalTargets) * 100)}%)\n                              </span>\n                            </div>\n                            <Progress \n                              value={((campaign.sentCount + campaign.failedCount) / campaign.totalTargets) * 100}\n                              className=\"h-3\"\n                            />\n                            <div className=\"flex justify-between text-xs\">\n                              <span className=\"text-green-600 font-medium\">✓ {campaign.sentCount} sent</span>\n                              <span className=\"text-red-600 font-medium\">✗ {campaign.failedCount} failed</span>\n                              <span className=\"text-blue-600 font-medium\">⏳ {campaign.totalTargets - campaign.sentCount - campaign.failedCount} remaining</span>\n                            </div>\n                            {campaign.status === \"running\" && (\n                              <div className=\"text-xs text-muted-foreground flex justify-between items-center mt-2 pt-2 border-t\">\n                                <span>Status: Active</span>\n                                <span className=\"flex items-center\">\n                                  <span className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse mr-2\"></span>\n                                  Sending messages...\n                                </span>\n                              </div>\n                            )}\n                            {campaign.status === \"completed\" && (\n                              <div className=\"text-xs text-green-600 font-medium mt-2 pt-2 border-t\">\n                                ✅ Campaign completed successfully\n                              </div>\n                            )}\n                          </div>\n                        )}\n\n                        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                          <div>\n                            <span className=\"font-medium\">Target Type:</span>\n                            <p className=\"text-muted-foreground capitalize\">\n                              {campaign.targetType.replace(\"_\", \" \")}\n                            </p>\n                          </div>\n                          <div>\n                            <span className=\"font-medium\">Total Targets:</span>\n                            <p className=\"text-muted-foreground\">{campaign.totalTargets}</p>\n                          </div>\n                          <div>\n                            <span className=\"font-medium\">Sent:</span>\n                            <p className=\"text-green-600 font-medium\">\n                              {campaign.sentCount}\n                              {campaign.status === \"running\" && <span className=\"animate-pulse ml-1\">●</span>}\n                            </p>\n                          </div>\n                          <div>\n                            <span className=\"font-medium\">Failed:</span>\n                            <p className=\"text-red-600 font-medium\">{campaign.failedCount}</p>\n                          </div>\n                        </div>\n\n                        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                          <div>\n                            <span className=\"font-medium\">Schedule:</span>\n                            <p className=\"text-muted-foreground capitalize\">\n                              {campaign.scheduleType.replace(\"_\", \" \")}\n                            </p>\n                          </div>\n                          <div>\n                            <span className=\"font-medium\">Interval:</span>\n                            <p className=\"text-muted-foreground\">\n                              {campaign.minInterval}-{campaign.maxInterval}s\n                            </p>\n                          </div>\n                          {campaign.timePost && (\n                            <div>\n                              <span className=\"font-medium\">Scheduled For:</span>\n                              <p className=\"text-muted-foreground\">\n                                {formatDate(campaign.timePost.toString())}\n                              </p>\n                            </div>\n                          )}\n                          {campaign.mediaUrl && (\n                            <div>\n                              <span className=\"font-medium\">Media:</span>\n                              <p className=\"text-muted-foreground capitalize\">\n                                {campaign.mediaType || \"Attached\"}\n                              </p>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"analytics\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Campaign Analytics</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-blue-600\">\n                    {campaigns.length}\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">Total Campaigns</p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-green-600\">\n                    {campaigns.reduce((sum, c) => sum + c.sentCount, 0)}\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">Messages Sent</p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-red-600\">\n                    {campaigns.reduce((sum, c) => sum + c.failedCount, 0)}\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">Failed Messages</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":32314},"client/src/pages/bulk-messaging.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { MessageCircle, Users, Clock, Send, Play, Pause, RotateCcw } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\ninterface Campaign {\n  id: number;\n  title: string;\n  message: string;\n  targetType: string;\n  status: string;\n  sentCount: number;\n  totalCount: number;\n  createdAt: string;\n}\n\ninterface ContactGroup {\n  id: number;\n  name: string;\n  memberCount: number;\n}\n\nexport default function BulkMessaging() {\n  const { toast } = useToast();\n  const [selectedGroupId, setSelectedGroupId] = useState<string>(\"\");\n  const [campaignTitle, setCampaignTitle] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [targetType, setTargetType] = useState(\"contact_groups\");\n\n  // Fetch campaigns\n  const { data: campaigns, isLoading: campaignsLoading } = useQuery<Campaign[]>({\n    queryKey: ['/api/bulk-campaigns'],\n  });\n\n  // Fetch contact groups\n  const { data: contactGroups, isLoading: groupsLoading } = useQuery<ContactGroup[]>({\n    queryKey: ['/api/contact-groups'],\n  });\n\n  // Create campaign mutation\n  const createCampaignMutation = useMutation({\n    mutationFn: (data: any) => apiRequest('/api/bulk-campaigns', 'POST', data),\n    onSuccess: () => {\n      toast({ title: \"Campaign created successfully!\" });\n      queryClient.invalidateQueries({ queryKey: ['/api/bulk-campaigns'] });\n      // Reset form\n      setCampaignTitle(\"\");\n      setMessage(\"\");\n      setSelectedGroupId(\"\");\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to create campaign\", \n        description: error.message,\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  // Start campaign mutation\n  const startCampaignMutation = useMutation({\n    mutationFn: (campaignId: number) => apiRequest(`/api/bulk-campaigns/${campaignId}/start`, 'POST'),\n    onSuccess: () => {\n      toast({ title: \"Campaign started!\" });\n      queryClient.invalidateQueries({ queryKey: ['/api/bulk-campaigns'] });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to start campaign\", \n        description: error.message,\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  // Restart campaign mutation\n  const restartCampaignMutation = useMutation({\n    mutationFn: (campaignId: number) => apiRequest(`/api/bulk-campaigns/${campaignId}/restart`, 'POST'),\n    onSuccess: () => {\n      toast({ title: \"Campaign restarted!\" });\n      queryClient.invalidateQueries({ queryKey: ['/api/bulk-campaigns'] });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Failed to restart campaign\", \n        description: error.message,\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const handleCreateCampaign = () => {\n    if (!campaignTitle.trim() || !message.trim() || !selectedGroupId) {\n      toast({\n        title: \"Please fill in all fields\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    createCampaignMutation.mutate({\n      title: campaignTitle,\n      message,\n      targetType,\n      targetId: parseInt(selectedGroupId),\n      scheduledAt: new Date().toISOString()\n    });\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      draft: { variant: \"secondary\" as const, text: \"Draft\" },\n      running: { variant: \"default\" as const, text: \"Running\" },\n      completed: { variant: \"default\" as const, text: \"Completed\" },\n      paused: { variant: \"outline\" as const, text: \"Paused\" },\n      failed: { variant: \"destructive\" as const, text: \"Failed\" }\n    };\n\n    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.draft;\n    return <Badge variant={config.variant}>{config.text}</Badge>;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background p-4 overflow-y-auto\" data-testid=\"bulk-messaging-page\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\" data-testid=\"page-title\">\n              Bulk Messaging\n            </h1>\n            <p className=\"text-muted-foreground mt-1\">\n              Create and manage bulk WhatsApp campaigns\n            </p>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Campaign Creation Form */}\n          <div className=\"lg:col-span-1\">\n            <Card data-testid=\"create-campaign-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <MessageCircle className=\"w-5 h-5\" />\n                  Create Campaign\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <label className=\"text-sm font-medium\">Campaign Title</label>\n                  <Input\n                    placeholder=\"Enter campaign title\"\n                    value={campaignTitle}\n                    onChange={(e) => setCampaignTitle(e.target.value)}\n                    data-testid=\"input-campaign-title\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"text-sm font-medium\">Target Type</label>\n                  <Select value={targetType} onValueChange={setTargetType}>\n                    <SelectTrigger data-testid=\"select-target-type\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"contact_groups\">Contact Groups</SelectItem>\n                      <SelectItem value=\"local_contacts\">Local Contacts</SelectItem>\n                      <SelectItem value=\"whatsapp_groups\">WhatsApp Groups</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {targetType === \"contact_groups\" && (\n                  <div>\n                    <label className=\"text-sm font-medium\">Contact Group</label>\n                    <Select value={selectedGroupId} onValueChange={setSelectedGroupId}>\n                      <SelectTrigger data-testid=\"select-contact-group\">\n                        <SelectValue placeholder=\"Select a group\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {contactGroups?.map((group) => (\n                          <SelectItem key={group.id} value={group.id.toString()}>\n                            {group.name} ({group.memberCount} contacts)\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                )}\n\n                <div>\n                  <label className=\"text-sm font-medium\">Message</label>\n                  <Textarea\n                    placeholder=\"Type your message here...\"\n                    value={message}\n                    onChange={(e) => setMessage(e.target.value)}\n                    rows={4}\n                    data-testid=\"input-message\"\n                  />\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    {message.length}/1000 characters\n                  </p>\n                </div>\n\n                <Button\n                  onClick={handleCreateCampaign}\n                  className=\"w-full\"\n                  disabled={createCampaignMutation.isPending}\n                  data-testid=\"button-create-campaign\"\n                >\n                  {createCampaignMutation.isPending ? \"Creating...\" : \"Create Campaign\"}\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Campaigns List */}\n          <div className=\"lg:col-span-2\">\n            <Card data-testid=\"campaigns-list-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Users className=\"w-5 h-5\" />\n                  Campaigns ({campaigns?.length || 0})\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"max-h-[70vh] overflow-y-auto\">\n                {campaignsLoading ? (\n                  <div className=\"text-center py-8\">\n                    <p className=\"text-muted-foreground\">Loading campaigns...</p>\n                  </div>\n                ) : !campaigns || campaigns.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <MessageCircle className=\"w-16 h-16 mx-auto text-muted-foreground mb-4\" />\n                    <p className=\"text-muted-foreground\">No campaigns created yet</p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Create your first bulk messaging campaign\n                    </p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {campaigns.map((campaign) => (\n                      <div\n                        key={campaign.id}\n                        className=\"border rounded-lg p-4 space-y-3\"\n                        data-testid={`campaign-${campaign.id}`}\n                      >\n                        <div className=\"flex justify-between items-start\">\n                          <div className=\"flex-1\">\n                            <h3 className=\"font-semibold text-lg\" data-testid={`campaign-title-${campaign.id}`}>\n                              {campaign.title}\n                            </h3>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {campaign.targetType.replace('_', ' ')} • Created {new Date(campaign.createdAt).toLocaleDateString()}\n                            </p>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            {getStatusBadge(campaign.status)}\n                          </div>\n                        </div>\n\n                        <div className=\"bg-muted p-3 rounded text-sm\" data-testid={`campaign-message-${campaign.id}`}>\n                          {campaign.message}\n                        </div>\n\n                        {campaign.status === 'running' || campaign.status === 'completed' ? (\n                          <div className=\"space-y-2\">\n                            <div className=\"flex justify-between text-sm\">\n                              <span data-testid={`campaign-progress-text-${campaign.id}`}>\n                                {campaign.sentCount} of {campaign.totalCount} sent\n                              </span>\n                              <span>{Math.round((campaign.sentCount / campaign.totalCount) * 100)}%</span>\n                            </div>\n                            <Progress \n                              value={(campaign.sentCount / campaign.totalCount) * 100}\n                              data-testid={`campaign-progress-${campaign.id}`}\n                            />\n                            {campaign.status === 'completed' && (\n                              <div className=\"flex gap-2 mt-2\">\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  onClick={() => restartCampaignMutation.mutate(campaign.id)}\n                                  disabled={restartCampaignMutation.isPending}\n                                  data-testid={`button-restart-campaign-${campaign.id}`}\n                                >\n                                  <RotateCcw className=\"w-4 h-4 mr-1\" />\n                                  Restart\n                                </Button>\n                              </div>\n                            )}\n                          </div>\n                        ) : (\n                          <div className=\"flex gap-2\">\n                            <Button\n                              size=\"sm\"\n                              onClick={() => startCampaignMutation.mutate(campaign.id)}\n                              disabled={startCampaignMutation.isPending}\n                              data-testid={`button-start-campaign-${campaign.id}`}\n                            >\n                              <Play className=\"w-4 h-4 mr-1\" />\n                              Start\n                            </Button>\n                          </div>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":13153}}}